// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package allinea_database.log_nagios_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
import java.net.URLEncoder;

//the import part of tJava_3

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: Log_Nagios Purpose: <br>
 * Description:  <br>
 * @author 
 * @version 5.6.0.20141024_1545
 * @status 
 */
public class Log_Nagios implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (codice != null) {

				this.setProperty("codice", codice.toString());

			}

			if (descrizione != null) {

				this.setProperty("descrizione", descrizione.toString());

			}

			if (nagios_codice_applicazione != null) {

				this.setProperty("nagios_codice_applicazione",
						nagios_codice_applicazione.toString());

			}

			if (nagios_codice_servizio != null) {

				this.setProperty("nagios_codice_servizio",
						nagios_codice_servizio.toString());

			}

			if (nagios_flag_attiva != null) {

				this.setProperty("nagios_flag_attiva",
						nagios_flag_attiva.toString());

			}

			if (nagios_password != null) {

				this.setProperty("nagios_password", nagios_password.toString());

			}

			if (nagios_url != null) {

				this.setProperty("nagios_url", nagios_url.toString());

			}

			if (nagios_username != null) {

				this.setProperty("nagios_username", nagios_username.toString());

			}

		}

		public String codice;

		public String getCodice() {
			return this.codice;
		}

		public String descrizione;

		public String getDescrizione() {
			return this.descrizione;
		}

		public String nagios_codice_applicazione;

		public String getNagios_codice_applicazione() {
			return this.nagios_codice_applicazione;
		}

		public String nagios_codice_servizio;

		public String getNagios_codice_servizio() {
			return this.nagios_codice_servizio;
		}

		public Boolean nagios_flag_attiva;

		public Boolean getNagios_flag_attiva() {
			return this.nagios_flag_attiva;
		}

		public String nagios_password;

		public String getNagios_password() {
			return this.nagios_password;
		}

		public String nagios_url;

		public String getNagios_url() {
			return this.nagios_url;
		}

		public String nagios_username;

		public String getNagios_username() {
			return this.nagios_username;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Log_Nagios";
	private final String projectName = "ALLINEA_DATABASE";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils(
			"_6-cJYCCOEeWvtsyhMT3IfQ", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Log_Nagios.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Log_Nagios.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				} catch (TalendException e) {
					// do nothing
				}

			}
		}
	}

	public void tStatCatcher_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLog4JCatch_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLog4JCatch_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLog4J_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLog4J_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tStatCatcher_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLog4J_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class LOG_STATStruct implements
			routines.system.IPersistableRow<LOG_STATStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Log_Nagios = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Log_Nagios = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Log_Nagios.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Log_Nagios.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Log_Nagios = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Log_Nagios = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Log_Nagios, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Log_Nagios, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Log_Nagios) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

					this.priority = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

				// Integer

				writeInteger(this.priority, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append(",priority=" + String.valueOf(priority));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(LOG_STATStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Log_Nagios = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Log_Nagios = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Log_Nagios.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Log_Nagios.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Log_Nagios = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Log_Nagios = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Log_Nagios, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Log_Nagios, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Log_Nagios) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				LOG_STATStruct LOG_STAT = new LOG_STATStruct();

				/**
				 * [tLog4JCatch_1 begin ] start
				 */

				ok_Hash.put("tLog4JCatch_1", false);
				start_Hash.put("tLog4JCatch_1", System.currentTimeMillis());

				currentComponent = "tLog4JCatch_1";

				int tos_count_tLog4JCatch_1 = 0;

				org.apache.log4j.Logger logger_tLog4JCatch_1 = org.apache.log4j.Logger
						.getLogger(this.getClass());
				int nb_line_tLog4JCatch_1 = 0;

				/**
				 * [tLog4JCatch_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				LOG_STATStruct LOG_STAT_tmp = new LOG_STATStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1
						.getMessages()) {
					row3.pid = pid;
					row3.root_pid = rootPid;
					row3.father_pid = fatherPid;
					row3.project = projectName;
					row3.job = jobName;
					row3.context = contextStr;
					row3.origin = (scm.getOrigin() == null
							|| scm.getOrigin().length() < 1 ? null : scm
							.getOrigin());
					row3.message = scm.getMessage();
					row3.duration = scm.getDuration();
					row3.moment = scm.getMoment();
					row3.message_type = scm.getMessageType();
					row3.job_version = scm.getJobVersion();
					row3.job_repository_id = scm.getJobId();
					row3.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
						// ###############################
						// # Output tables

						LOG_STAT = null;

						// # Output table : 'LOG_STAT'
						LOG_STAT_tmp.moment = row3.moment;
						LOG_STAT_tmp.pid = row3.pid;
						LOG_STAT_tmp.father_pid = row3.father_pid;
						LOG_STAT_tmp.root_pid = row3.root_pid;
						LOG_STAT_tmp.system_pid = row3.system_pid;
						LOG_STAT_tmp.project = row3.project;
						LOG_STAT_tmp.job = row3.job;
						LOG_STAT_tmp.job_repository_id = row3.job_repository_id;
						LOG_STAT_tmp.job_version = row3.job_version;
						LOG_STAT_tmp.context = row3.context;
						LOG_STAT_tmp.origin = row3.origin;
						LOG_STAT_tmp.message_type = row3.message_type;
						LOG_STAT_tmp.message = row3.message;
						LOG_STAT_tmp.duration = row3.duration;
						LOG_STAT_tmp.priority = 3;
						LOG_STAT = LOG_STAT_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */
					// Start of branch "LOG_STAT"
					if (LOG_STAT != null) {

						/**
						 * [tLog4JCatch_1 main ] start
						 */

						currentComponent = "tLog4JCatch_1";

						switch (LOG_STAT.priority) {
						case 1:
							logger_tLog4JCatch_1.trace(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 2:
							logger_tLog4JCatch_1.debug(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 3:
							logger_tLog4JCatch_1.info(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 4:
							logger_tLog4JCatch_1.warn(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 5:
							logger_tLog4JCatch_1.error(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 6:
							logger_tLog4JCatch_1.fatal(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						default:
							logger_tLog4JCatch_1.warn(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						}

						nb_line_tLog4JCatch_1++;

						tos_count_tLog4JCatch_1++;

						/**
						 * [tLog4JCatch_1 main ] stop
						 */

					} // End of branch "LOG_STAT"

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tLog4JCatch_1 end ] start
				 */

				currentComponent = "tLog4JCatch_1";

				globalMap.put("tLog4JCatch_1_NB_LINE", nb_line_tLog4JCatch_1);

				ok_Hash.put("tLog4JCatch_1", true);
				end_Hash.put("tLog4JCatch_1", System.currentTimeMillis());

				/**
				 * [tLog4JCatch_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tLog4JCatch_1 finally ] start
				 */

				currentComponent = "tLog4JCatch_1";

				/**
				 * [tLog4JCatch_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class LOG_ERRORStruct implements
			routines.system.IPersistableRow<LOG_ERRORStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Log_Nagios = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Log_Nagios = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Log_Nagios.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Log_Nagios.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Log_Nagios = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Log_Nagios = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Log_Nagios, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Log_Nagios, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Log_Nagios) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(LOG_ERRORStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				LOG_ERRORStruct LOG_ERROR = new LOG_ERRORStruct();

				/**
				 * [tLog4JCatch_2 begin ] start
				 */

				ok_Hash.put("tLog4JCatch_2", false);
				start_Hash.put("tLog4JCatch_2", System.currentTimeMillis());

				currentComponent = "tLog4JCatch_2";

				int tos_count_tLog4JCatch_2 = 0;

				org.apache.log4j.Logger logger_tLog4JCatch_2 = org.apache.log4j.Logger
						.getLogger(this.getClass());
				int nb_line_tLog4JCatch_2 = 0;

				/**
				 * [tLog4JCatch_2 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					LOG_ERROR.type = lcm.getType();
					LOG_ERROR.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					LOG_ERROR.priority = lcm.getPriority();
					LOG_ERROR.message = lcm.getMessage();
					LOG_ERROR.code = lcm.getCode();

					LOG_ERROR.moment = java.util.Calendar.getInstance()
							.getTime();

					LOG_ERROR.pid = pid;
					LOG_ERROR.root_pid = rootPid;
					LOG_ERROR.father_pid = fatherPid;

					LOG_ERROR.project = projectName;
					LOG_ERROR.job = jobName;
					LOG_ERROR.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */

					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tLog4JCatch_2 main ] start
					 */

					currentComponent = "tLog4JCatch_2";

					switch (LOG_ERROR.priority) {
					case 1:
						logger_tLog4JCatch_2.trace(LOG_ERROR.moment + "|"
								+ LOG_ERROR.pid + "|" + LOG_ERROR.root_pid
								+ "|" + LOG_ERROR.father_pid + "|"
								+ LOG_ERROR.project + "|" + LOG_ERROR.job + "|"
								+ LOG_ERROR.context + "|" + LOG_ERROR.priority
								+ "|" + LOG_ERROR.type + "|" + LOG_ERROR.origin
								+ "|" + LOG_ERROR.message + "|"
								+ LOG_ERROR.code);
						break;
					case 2:
						logger_tLog4JCatch_2.debug(LOG_ERROR.moment + "|"
								+ LOG_ERROR.pid + "|" + LOG_ERROR.root_pid
								+ "|" + LOG_ERROR.father_pid + "|"
								+ LOG_ERROR.project + "|" + LOG_ERROR.job + "|"
								+ LOG_ERROR.context + "|" + LOG_ERROR.priority
								+ "|" + LOG_ERROR.type + "|" + LOG_ERROR.origin
								+ "|" + LOG_ERROR.message + "|"
								+ LOG_ERROR.code);
						break;
					case 3:
						logger_tLog4JCatch_2.info(LOG_ERROR.moment + "|"
								+ LOG_ERROR.pid + "|" + LOG_ERROR.root_pid
								+ "|" + LOG_ERROR.father_pid + "|"
								+ LOG_ERROR.project + "|" + LOG_ERROR.job + "|"
								+ LOG_ERROR.context + "|" + LOG_ERROR.priority
								+ "|" + LOG_ERROR.type + "|" + LOG_ERROR.origin
								+ "|" + LOG_ERROR.message + "|"
								+ LOG_ERROR.code);
						break;
					case 4:
						logger_tLog4JCatch_2.warn(LOG_ERROR.moment + "|"
								+ LOG_ERROR.pid + "|" + LOG_ERROR.root_pid
								+ "|" + LOG_ERROR.father_pid + "|"
								+ LOG_ERROR.project + "|" + LOG_ERROR.job + "|"
								+ LOG_ERROR.context + "|" + LOG_ERROR.priority
								+ "|" + LOG_ERROR.type + "|" + LOG_ERROR.origin
								+ "|" + LOG_ERROR.message + "|"
								+ LOG_ERROR.code);
						break;
					case 5:
						logger_tLog4JCatch_2.error(LOG_ERROR.moment + "|"
								+ LOG_ERROR.pid + "|" + LOG_ERROR.root_pid
								+ "|" + LOG_ERROR.father_pid + "|"
								+ LOG_ERROR.project + "|" + LOG_ERROR.job + "|"
								+ LOG_ERROR.context + "|" + LOG_ERROR.priority
								+ "|" + LOG_ERROR.type + "|" + LOG_ERROR.origin
								+ "|" + LOG_ERROR.message + "|"
								+ LOG_ERROR.code);
						break;
					case 6:
						logger_tLog4JCatch_2.fatal(LOG_ERROR.moment + "|"
								+ LOG_ERROR.pid + "|" + LOG_ERROR.root_pid
								+ "|" + LOG_ERROR.father_pid + "|"
								+ LOG_ERROR.project + "|" + LOG_ERROR.job + "|"
								+ LOG_ERROR.context + "|" + LOG_ERROR.priority
								+ "|" + LOG_ERROR.type + "|" + LOG_ERROR.origin
								+ "|" + LOG_ERROR.message + "|"
								+ LOG_ERROR.code);
						break;
					default:
						logger_tLog4JCatch_2.warn(LOG_ERROR.moment + "|"
								+ LOG_ERROR.pid + "|" + LOG_ERROR.root_pid
								+ "|" + LOG_ERROR.father_pid + "|"
								+ LOG_ERROR.project + "|" + LOG_ERROR.job + "|"
								+ LOG_ERROR.context + "|" + LOG_ERROR.priority
								+ "|" + LOG_ERROR.type + "|" + LOG_ERROR.origin
								+ "|" + LOG_ERROR.message + "|"
								+ LOG_ERROR.code);
						break;
					}

					nb_line_tLog4JCatch_2++;

					tos_count_tLog4JCatch_2++;

					/**
					 * [tLog4JCatch_2 main ] stop
					 */

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tLog4JCatch_2 end ] start
				 */

				currentComponent = "tLog4JCatch_2";

				globalMap.put("tLog4JCatch_2_NB_LINE", nb_line_tLog4JCatch_2);

				ok_Hash.put("tLog4JCatch_2", true);
				end_Hash.put("tLog4JCatch_2", System.currentTimeMillis());

				/**
				 * [tLog4JCatch_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLogCatcher_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tLog4J_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tLog4JCatch_2 finally ] start
				 */

				currentComponent = "tLog4JCatch_2";

				/**
				 * [tLog4JCatch_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public void tLog4J_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLog4J_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLog4J_1 begin ] start
				 */

				ok_Hash.put("tLog4J_1", false);
				start_Hash.put("tLog4J_1", System.currentTimeMillis());

				currentComponent = "tLog4J_1";

				int tos_count_tLog4J_1 = 0;

				org.apache.log4j.Logger logger_tLog4J_1 = org.apache.log4j.Logger
						.getLogger(this.getClass());

				int nb_line_tLog4J_1 = 0;
				int nb_logged_line_tLog4J_1 = 0;

				/**
				 * [tLog4J_1 begin ] stop
				 */

				/**
				 * [tLog4J_1 main ] start
				 */

				currentComponent = "tLog4J_1";

				logger_tLog4J_1.error(this.getExceptionStackTrace());
				nb_logged_line_tLog4J_1++;

				nb_line_tLog4J_1++;

				tos_count_tLog4J_1++;

				/**
				 * [tLog4J_1 main ] stop
				 */

				/**
				 * [tLog4J_1 end ] start
				 */

				currentComponent = "tLog4J_1";

				globalMap.put("tLog4J_1_NB_LINE", nb_line_tLog4J_1);
				globalMap.put("tLog4J_1_NB_LOGGED_LINE",
						nb_logged_line_tLog4J_1);

				ok_Hash.put("tLog4J_1", true);
				end_Hash.put("tLog4J_1", System.currentTimeMillis());

				/**
				 * [tLog4J_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLog4J_1 finally ] start
				 */

				currentComponent = "tLog4J_1";

				/**
				 * [tLog4J_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLog4J_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				globalMap.put("LogNagios", "OK");

				context.nagios_flag_attiva = context.nagios_flag_attiva != null ? context.nagios_flag_attiva
						: false;

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_1",
						end_Hash.get("tJava_1") - start_Hash.get("tJava_1"));
				tStatCatcher_1Process(globalMap);
				if ("OK".equalsIgnoreCase((String) globalMap.get("LogNagios"))
						&& context.nagios_flag_attiva) {

					tJava_3Process(globalMap);
				}

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_3");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				java.net.URL url_tHttpRequest_1 = new java.net.URL(
						context.nagios_url);

				tStatCatcher_1.addMessage("Init oggetto url con stringa ::: "
						+ context.nagios_url, "tJava_3");
				tStatCatcher_1Process(globalMap);

				java.net.HttpURLConnection urlConn_tHttpRequest_1 = (java.net.HttpURLConnection) url_tHttpRequest_1
						.openConnection();

				tStatCatcher_1.addMessage("Open connection...", "tJava_3");
				tStatCatcher_1Process(globalMap);

				urlConn_tHttpRequest_1.setRequestMethod("POST");
				urlConn_tHttpRequest_1.setDoOutput(true);
				urlConn_tHttpRequest_1.setDoInput(true);
				urlConn_tHttpRequest_1.setUseCaches(false);

				boolean connected_tHttpRequest_1 = false;
				int responseCode_tHttpRequest_1 = 0;
				String responseMessage_tHttpRequest_1 = null;
				globalMap.put("tHttpRequest_1_CONNECTED", false);

				byte[] buffer_tHttpRequest_1 = new byte[1024];
				int bos_buffer_tHttpRequest_1 = 0;

				long currentTime = System.currentTimeMillis() / 1000;

				String envelop = String.format(
						"username=%s&password=%s&input=",
						context.nagios_username, context.nagios_password);

				String data = String.format(
						"[%d] PROCESS_HOST_CHECK_RESULT;%s;0;OK", currentTime,
						context.nagios_codice_applicazione);

				String encodedData = URLEncoder.encode(data, "UTF-8");

				String total = envelop + encodedData + "\n";

				tStatCatcher_1.addMessage("Set dei parametri :::: " + envelop
						+ data + "\n", "tJava_3");
				tStatCatcher_1.addMessage("Set dei parametri (encoding) :::: "
						+ total, "tJava_3");
				tStatCatcher_1Process(globalMap);

				java.io.OutputStreamWriter bosParam_tHttpRequest_1 = new java.io.OutputStreamWriter(
						urlConn_tHttpRequest_1.getOutputStream());
				bosParam_tHttpRequest_1.write(total);
				bosParam_tHttpRequest_1.flush();
				bosParam_tHttpRequest_1.close();

				urlConn_tHttpRequest_1.connect();

				tStatCatcher_1.addMessage("Connect ...", "tJava_3");
				tStatCatcher_1Process(globalMap);

				connected_tHttpRequest_1 = true;
				globalMap.put("tHttpRequest_1_CONNECTED", true);
				responseCode_tHttpRequest_1 = urlConn_tHttpRequest_1
						.getResponseCode();
				globalMap.put("tHttpRequest_1_RESPONSE_CODE",
						responseCode_tHttpRequest_1);
				responseMessage_tHttpRequest_1 = urlConn_tHttpRequest_1
						.getResponseMessage();
				globalMap.put("tHttpRequest_1_RESPONSE_MESSAGE",
						responseMessage_tHttpRequest_1);

				tStatCatcher_1.addMessage("Disconnect ...", "tJava_3");
				tStatCatcher_1Process(globalMap);

				urlConn_tHttpRequest_1.disconnect();

				if (java.net.HttpURLConnection.HTTP_OK != responseCode_tHttpRequest_1) {
					throw new RuntimeException("Request failed:"
							+ responseCode_tHttpRequest_1 + " "
							+ responseMessage_tHttpRequest_1);
				}

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_3",
						end_Hash.get("tJava_3") - start_Hash.get("tJava_3"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tJava_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_2");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				if ("failure".equalsIgnoreCase(status)) {
					globalMap.put("LogNagios", "KO");
				}

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_2",
						end_Hash.get("tJava_2") - start_Hash.get("tJava_2"));
				tStatCatcher_1Process(globalMap);
				if ("OK".equalsIgnoreCase((String) globalMap.get("LogNagios"))
						&& context.nagios_flag_attiva) {

					tJava_4Process(globalMap);
				}

				/**
				 * [tJava_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_4");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				java.net.URL url_tHttpRequest_2 = new java.net.URL(
						context.nagios_url);

				tStatCatcher_1.addMessage("Init oggetto url con stringa ::: "
						+ context.nagios_url, "tJava_4");
				tStatCatcher_1Process(globalMap);

				java.net.HttpURLConnection urlConn_tHttpRequest_2 = (java.net.HttpURLConnection) url_tHttpRequest_2
						.openConnection();

				tStatCatcher_1.addMessage("Open connection...", "tJava_4");
				tStatCatcher_1Process(globalMap);

				urlConn_tHttpRequest_2.setRequestMethod("POST");
				urlConn_tHttpRequest_2.setDoOutput(true);
				urlConn_tHttpRequest_2.setDoInput(true);
				urlConn_tHttpRequest_2.setUseCaches(false);

				boolean connected_tHttpRequest_2 = false;
				int responseCode_tHttpRequest_2 = 0;
				String responseMessage_tHttpRequest_2 = null;
				globalMap.put("tHttpRequest_2_CONNECTED", false);

				byte[] buffer_tHttpRequest_2 = new byte[1024];
				int bos_buffer_tHttpRequest_2 = 0;

				long currentTime = System.currentTimeMillis() / 1000;

				String envelop = String.format(
						"username=%s&password=%s&input=",
						context.nagios_username, context.nagios_password);

				String data = String.format(
						"[%d] PROCESS_SERVICE_CHECK_RESULT;%s;%s;%s;%s",
						currentTime, context.nagios_codice_applicazione,
						context.nagios_codice_servizio, context.codice,
						context.descrizione);

				String encodedData = URLEncoder.encode(data, "UTF-8");

				String total = envelop + encodedData + "\n";

				tStatCatcher_1.addMessage("Set dei parametri :::: " + envelop
						+ data + "\n", "tJava_4");
				tStatCatcher_1.addMessage("Set dei parametri (encoding) :::: "
						+ total, "tJava_4");
				tStatCatcher_1Process(globalMap);

				java.io.OutputStreamWriter bosParam_tHttpRequest_2 = new java.io.OutputStreamWriter(
						urlConn_tHttpRequest_2.getOutputStream());
				bosParam_tHttpRequest_2.write(total);
				bosParam_tHttpRequest_2.flush();
				bosParam_tHttpRequest_2.close();

				urlConn_tHttpRequest_2.connect();
				tStatCatcher_1.addMessage("Connect ...", "tJava_4");
				tStatCatcher_1Process(globalMap);
				connected_tHttpRequest_2 = true;
				globalMap.put("tHttpRequest_2_CONNECTED", true);
				responseCode_tHttpRequest_2 = urlConn_tHttpRequest_2
						.getResponseCode();
				globalMap.put("tHttpRequest_2_RESPONSE_CODE",
						responseCode_tHttpRequest_2);
				responseMessage_tHttpRequest_2 = urlConn_tHttpRequest_2
						.getResponseMessage();
				globalMap.put("tHttpRequest_2_RESPONSE_MESSAGE",
						responseMessage_tHttpRequest_2);
				urlConn_tHttpRequest_2.disconnect();
				tStatCatcher_1.addMessage("Disconnect ...", "tJava_4");
				tStatCatcher_1Process(globalMap);

				if (java.net.HttpURLConnection.HTTP_OK != responseCode_tHttpRequest_2) {
					throw new RuntimeException("Request failed:"
							+ responseCode_tHttpRequest_2 + " "
							+ responseMessage_tHttpRequest_2);
				}

				/**
				 * [tJava_4 begin ] stop
				 */

				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */

				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_4",
						end_Hash.get("tJava_4") - start_Hash.get("tJava_4"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tJava_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_4 finally ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Log_Nagios Log_NagiosClass = new Log_Nagios();

		int exitCode = Log_NagiosClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Log_Nagios.class.getClassLoader()
					.getResourceAsStream(
							"allinea_database/log_nagios_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.codice = (String) context.getProperty("codice");
			context.descrizione = (String) context.getProperty("descrizione");
			context.nagios_codice_applicazione = (String) context
					.getProperty("nagios_codice_applicazione");
			context.nagios_codice_servizio = (String) context
					.getProperty("nagios_codice_servizio");
			try {
				context.nagios_flag_attiva = routines.system.ParserUtils
						.parseTo_Boolean(context
								.getProperty("nagios_flag_attiva"));
			} catch (NumberFormatException e) {
				context.nagios_flag_attiva = null;
			}
			context.nagios_password = (String) context
					.getProperty("nagios_password");
			context.nagios_url = (String) context.getProperty("nagios_url");
			context.nagios_username = (String) context
					.getProperty("nagios_username");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("codice")) {
				context.codice = (String) parentContextMap.get("codice");
			}
			if (parentContextMap.containsKey("descrizione")) {
				context.descrizione = (String) parentContextMap
						.get("descrizione");
			}
			if (parentContextMap.containsKey("nagios_codice_applicazione")) {
				context.nagios_codice_applicazione = (String) parentContextMap
						.get("nagios_codice_applicazione");
			}
			if (parentContextMap.containsKey("nagios_codice_servizio")) {
				context.nagios_codice_servizio = (String) parentContextMap
						.get("nagios_codice_servizio");
			}
			if (parentContextMap.containsKey("nagios_flag_attiva")) {
				context.nagios_flag_attiva = (Boolean) parentContextMap
						.get("nagios_flag_attiva");
			}
			if (parentContextMap.containsKey("nagios_password")) {
				context.nagios_password = (String) parentContextMap
						.get("nagios_password");
			}
			if (parentContextMap.containsKey("nagios_url")) {
				context.nagios_url = (String) parentContextMap
						.get("nagios_url");
			}
			if (parentContextMap.containsKey("nagios_username")) {
				context.nagios_username = (String) parentContextMap
						.get("nagios_username");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_1) {
			globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

			e_tJava_1.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_2) {
			globalMap.put("tJava_2_SUBPROCESS_STATE", -1);

			e_tJava_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Log_Nagios");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status,
				(end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 83455 characters generated by Talend Open Studio for Data Integration on the
 * March 1, 2017 9:29:12 AM CET
 ************************************************************************************************/
