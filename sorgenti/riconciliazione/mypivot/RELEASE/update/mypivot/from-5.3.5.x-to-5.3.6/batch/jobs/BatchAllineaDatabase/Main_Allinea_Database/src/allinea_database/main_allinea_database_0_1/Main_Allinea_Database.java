// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package allinea_database.main_allinea_database_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: Main_Allinea_Database Purpose: <br>
 * Description:  <br>
 * @author 
 * @version 5.6.0.20141024_1545
 * @status 
 */
public class Main_Allinea_Database implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (conn_db_900_6 != null) {

				this.setProperty("conn_db_900_6", conn_db_900_6.toString());

			}

			if (conn_host_900_6 != null) {

				this.setProperty("conn_host_900_6", conn_host_900_6.toString());

			}

			if (conn_port_900_6 != null) {

				this.setProperty("conn_port_900_6", conn_port_900_6.toString());

			}

			if (conn_psw_900_6 != null) {

				this.setProperty("conn_psw_900_6", conn_psw_900_6.toString());

			}

			if (conn_schema_900_6 != null) {

				this.setProperty("conn_schema_900_6",
						conn_schema_900_6.toString());

			}

			if (conn_usr_900_6 != null) {

				this.setProperty("conn_usr_900_6", conn_usr_900_6.toString());

			}

			if (conn_db_E45_1 != null) {

				this.setProperty("conn_db_E45_1", conn_db_E45_1.toString());

			}

			if (conn_host_E45_1 != null) {

				this.setProperty("conn_host_E45_1", conn_host_E45_1.toString());

			}

			if (conn_port_E45_1 != null) {

				this.setProperty("conn_port_E45_1", conn_port_E45_1.toString());

			}

			if (conn_psw_E45_1 != null) {

				this.setProperty("conn_psw_E45_1", conn_psw_E45_1.toString());

			}

			if (conn_schema_E45_1 != null) {

				this.setProperty("conn_schema_E45_1",
						conn_schema_E45_1.toString());

			}

			if (conn_usr_E45_1 != null) {

				this.setProperty("conn_usr_E45_1", conn_usr_E45_1.toString());

			}

			if (conn_db_E45_2 != null) {

				this.setProperty("conn_db_E45_2", conn_db_E45_2.toString());

			}

			if (conn_host_E45_2 != null) {

				this.setProperty("conn_host_E45_2", conn_host_E45_2.toString());

			}

			if (conn_port_E45_2 != null) {

				this.setProperty("conn_port_E45_2", conn_port_E45_2.toString());

			}

			if (conn_psw_E45_2 != null) {

				this.setProperty("conn_psw_E45_2", conn_psw_E45_2.toString());

			}

			if (conn_schema_E45_2 != null) {

				this.setProperty("conn_schema_E45_2",
						conn_schema_E45_2.toString());

			}

			if (conn_usr_E45_2 != null) {

				this.setProperty("conn_usr_E45_2", conn_usr_E45_2.toString());

			}

			if (conn_db_E45_4 != null) {

				this.setProperty("conn_db_E45_4", conn_db_E45_4.toString());

			}

			if (conn_host_E45_4 != null) {

				this.setProperty("conn_host_E45_4", conn_host_E45_4.toString());

			}

			if (conn_port_E45_4 != null) {

				this.setProperty("conn_port_E45_4", conn_port_E45_4.toString());

			}

			if (conn_psw_E45_4 != null) {

				this.setProperty("conn_psw_E45_4", conn_psw_E45_4.toString());

			}

			if (conn_schema_E45_4 != null) {

				this.setProperty("conn_schema_E45_4",
						conn_schema_E45_4.toString());

			}

			if (conn_usr_E45_4 != null) {

				this.setProperty("conn_usr_E45_4", conn_usr_E45_4.toString());

			}

			if (ambiente != null) {

				this.setProperty("ambiente", ambiente.toString());

			}

			if (directory_talend != null) {

				this.setProperty("directory_talend",
						directory_talend.toString());

			}

			if (numero_minuti_avviso != null) {

				this.setProperty("numero_minuti_avviso",
						numero_minuti_avviso.toString());

			}

			if (numero_ore_trigger_batch != null) {

				this.setProperty("numero_ore_trigger_batch",
						numero_ore_trigger_batch.toString());

			}

		}

		public String conn_db_900_6;

		public String getConn_db_900_6() {
			return this.conn_db_900_6;
		}

		public String conn_host_900_6;

		public String getConn_host_900_6() {
			return this.conn_host_900_6;
		}

		public String conn_port_900_6;

		public String getConn_port_900_6() {
			return this.conn_port_900_6;
		}

		public String conn_psw_900_6;

		public String getConn_psw_900_6() {
			return this.conn_psw_900_6;
		}

		public String conn_schema_900_6;

		public String getConn_schema_900_6() {
			return this.conn_schema_900_6;
		}

		public String conn_usr_900_6;

		public String getConn_usr_900_6() {
			return this.conn_usr_900_6;
		}

		public String conn_db_E45_1;

		public String getConn_db_E45_1() {
			return this.conn_db_E45_1;
		}

		public String conn_host_E45_1;

		public String getConn_host_E45_1() {
			return this.conn_host_E45_1;
		}

		public String conn_port_E45_1;

		public String getConn_port_E45_1() {
			return this.conn_port_E45_1;
		}

		public String conn_psw_E45_1;

		public String getConn_psw_E45_1() {
			return this.conn_psw_E45_1;
		}

		public String conn_schema_E45_1;

		public String getConn_schema_E45_1() {
			return this.conn_schema_E45_1;
		}

		public String conn_usr_E45_1;

		public String getConn_usr_E45_1() {
			return this.conn_usr_E45_1;
		}

		public String conn_db_E45_2;

		public String getConn_db_E45_2() {
			return this.conn_db_E45_2;
		}

		public String conn_host_E45_2;

		public String getConn_host_E45_2() {
			return this.conn_host_E45_2;
		}

		public String conn_port_E45_2;

		public String getConn_port_E45_2() {
			return this.conn_port_E45_2;
		}

		public String conn_psw_E45_2;

		public String getConn_psw_E45_2() {
			return this.conn_psw_E45_2;
		}

		public String conn_schema_E45_2;

		public String getConn_schema_E45_2() {
			return this.conn_schema_E45_2;
		}

		public String conn_usr_E45_2;

		public String getConn_usr_E45_2() {
			return this.conn_usr_E45_2;
		}

		public String conn_db_E45_4;

		public String getConn_db_E45_4() {
			return this.conn_db_E45_4;
		}

		public String conn_host_E45_4;

		public String getConn_host_E45_4() {
			return this.conn_host_E45_4;
		}

		public String conn_port_E45_4;

		public String getConn_port_E45_4() {
			return this.conn_port_E45_4;
		}

		public String conn_psw_E45_4;

		public String getConn_psw_E45_4() {
			return this.conn_psw_E45_4;
		}

		public String conn_schema_E45_4;

		public String getConn_schema_E45_4() {
			return this.conn_schema_E45_4;
		}

		public String conn_usr_E45_4;

		public String getConn_usr_E45_4() {
			return this.conn_usr_E45_4;
		}

		public String ambiente;

		public String getAmbiente() {
			return this.ambiente;
		}

		public String directory_talend;

		public String getDirectory_talend() {
			return this.directory_talend;
		}

		public Integer numero_minuti_avviso;

		public Integer getNumero_minuti_avviso() {
			return this.numero_minuti_avviso;
		}

		public Integer numero_ore_trigger_batch;

		public Integer getNumero_ore_trigger_batch() {
			return this.numero_ore_trigger_batch;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Main_Allinea_Database";
	private final String projectName = "ALLINEA_DATABASE";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils(
			"_z59_oGA0EeSDKIz7kzxpnQ", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Main_Allinea_Database.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Main_Allinea_Database.this, new Object[] {
									e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				} catch (TalendException e) {
					// do nothing
				}

			}
		}
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFilterRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tContextLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tInitLog4J_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tInitLog4J_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tStatCatcher_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLog4JCatch_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLoop_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tInfiniteLoop_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tInfiniteLoop_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tInitLog4J_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tStatCatcher_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLoop_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				globalMap.put("errorMain", false);

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				if (!((Boolean) globalMap.get("errorMain"))) {

					tFileInputDelimited_1Process(globalMap);
				}

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Main_Allinea_Database = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database,
						0, length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Main_Allinea_Database) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Main_Allinea_Database = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database = new byte[0];

		public String key;

		public String getKey() {
			return this.key;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database,
						0, length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Main_Allinea_Database) {

				try {

					int length = 0;

					this.key = readString(dis);

					this.value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.key, dos);

				// String

				writeString(this.value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("key=" + key);
			sb.append(",value=" + value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tContextLoad_1 begin ] start
				 */

				ok_Hash.put("tContextLoad_1", false);
				start_Hash.put("tContextLoad_1", System.currentTimeMillis());

				currentComponent = "tContextLoad_1";

				int tos_count_tContextLoad_1 = 0;

				java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
				java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
				int nb_line_tContextLoad_1 = 0;

				/**
				 * [tContextLoad_1 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) "=").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) "=")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				context.directory_talend
						+ "/conf/BatchAllineaDatabase/batchallineadatabase-properties_1.0.properties"/**
				 * 
				 * End field tFileInputDelimited_1:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									"ISO-8859-15");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									new java.io.BufferedReader(
											new java.io.InputStreamReader(
													new java.io.FileInputStream(
															String.valueOf(filename_tFileInputDelimited_1)),
													"ISO-8859-15")),
									fieldSeparator_tFileInputDelimited_1[0]);
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd(""
									+ rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						// ?????doesn't work for other escapeChar
						// the default escape mode is double escape
						csvReadertFileInputDelimited_1
								.setEscapeChar(csvReadertFileInputDelimited_1
										.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 0; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
										.getValues();
								if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
										.equals(rowtFileInputDelimited_1[0]))) {// empty
																				// line
																				// when
																				// row
																				// separator
																				// is
																				// '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
									: totalLinetFileInputDelimited_1
											- footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0],
										"ISO-8859-15");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										new java.io.BufferedReader(
												new java.io.InputStreamReader(
														new java.io.FileInputStream(
																String.valueOf(filename_tFileInputDelimited_1)),
														"ISO-8859-15")),
										fieldSeparator_tFileInputDelimited_1[0]);
							}
							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							// ?????doesn't work for other escapeChar
							// the default escape mode is double escape
							csvReadertFileInputDelimited_1
									.setEscapeChar(csvReadertFileInputDelimited_1
											.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 0; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1
								.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {

						throw e;

					}// TD110 end

					while (limittFileInputDelimited_1 != 0
							&& csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
								.getValues();

						if (rowtFileInputDelimited_1.length == 1
								&& ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator)
							// by 'context.fs' or 'globalMap.get("fs")'.
							if (((String) "=").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) "=")
										.toCharArray();
							} else {
								throw new IllegalArgumentException(
										"Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

								row1.key = null;

								row1.value = null;

							} else {

								for (int i_tFileInputDelimited_1 = 0; i_tFileInputDelimited_1 < rowtFileInputDelimited_1.length; i_tFileInputDelimited_1++) {
									rowtFileInputDelimited_1[i_tFileInputDelimited_1] = rowtFileInputDelimited_1[i_tFileInputDelimited_1]
											.trim();
								}

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																				// Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.key = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.key = null;
								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row1.value = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {
									row1.value = null;
								}

							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							throw (e);

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tFilterRow_1 main ] start
							 */

							currentComponent = "tFilterRow_1";

							row2 = null;
							Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1(
									"&&");
							ope_tFilterRow_1.matches(
									(!row1.key.startsWith("#")),
									"advanced condition failed");

							if (ope_tFilterRow_1.getMatchFlag()) {
								if (row2 == null) {
									row2 = new row2Struct();
								}
								row2.key = row1.key;
								row2.value = row1.value;
								nb_line_ok_tFilterRow_1++;
							} else {
								nb_line_reject_tFilterRow_1++;
							}

							nb_line_tFilterRow_1++;

							tos_count_tFilterRow_1++;

							/**
							 * [tFilterRow_1 main ] stop
							 */
							// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tContextLoad_1 main ] start
								 */

								currentComponent = "tContextLoad_1";

								// ////////////////////////
								String tmp_key_tContextLoad_1 = null;

								String key_tContextLoad_1 = null;
								if (row2.key != null) {
									tmp_key_tContextLoad_1 = row2.key.trim();
									if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1
											.startsWith("!"))) {
										tmp_key_tContextLoad_1 = null;
									} else {
										row2.key = tmp_key_tContextLoad_1;
									}
								}
								if (row2.key != null) {

									key_tContextLoad_1 =

									row2.key;

								}

								String value_tContextLoad_1 = null;
								if (row2.value != null) {

									value_tContextLoad_1 =

									row2.value;

								}

								if (tmp_key_tContextLoad_1 != null) {
									try {
										if (key_tContextLoad_1 != null
												&& "conn_db_900_6"
														.equals(key_tContextLoad_1)) {
											context.conn_db_900_6 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_host_900_6"
														.equals(key_tContextLoad_1)) {
											context.conn_host_900_6 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_port_900_6"
														.equals(key_tContextLoad_1)) {
											context.conn_port_900_6 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_psw_900_6"
														.equals(key_tContextLoad_1)) {
											context.conn_psw_900_6 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_schema_900_6"
														.equals(key_tContextLoad_1)) {
											context.conn_schema_900_6 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_usr_900_6"
														.equals(key_tContextLoad_1)) {
											context.conn_usr_900_6 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_db_E45_1"
														.equals(key_tContextLoad_1)) {
											context.conn_db_E45_1 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_host_E45_1"
														.equals(key_tContextLoad_1)) {
											context.conn_host_E45_1 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_port_E45_1"
														.equals(key_tContextLoad_1)) {
											context.conn_port_E45_1 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_psw_E45_1"
														.equals(key_tContextLoad_1)) {
											context.conn_psw_E45_1 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_schema_E45_1"
														.equals(key_tContextLoad_1)) {
											context.conn_schema_E45_1 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_usr_E45_1"
														.equals(key_tContextLoad_1)) {
											context.conn_usr_E45_1 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_db_E45_2"
														.equals(key_tContextLoad_1)) {
											context.conn_db_E45_2 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_host_E45_2"
														.equals(key_tContextLoad_1)) {
											context.conn_host_E45_2 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_port_E45_2"
														.equals(key_tContextLoad_1)) {
											context.conn_port_E45_2 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_psw_E45_2"
														.equals(key_tContextLoad_1)) {
											context.conn_psw_E45_2 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_schema_E45_2"
														.equals(key_tContextLoad_1)) {
											context.conn_schema_E45_2 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_usr_E45_2"
														.equals(key_tContextLoad_1)) {
											context.conn_usr_E45_2 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_db_E45_4"
														.equals(key_tContextLoad_1)) {
											context.conn_db_E45_4 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_host_E45_4"
														.equals(key_tContextLoad_1)) {
											context.conn_host_E45_4 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_port_E45_4"
														.equals(key_tContextLoad_1)) {
											context.conn_port_E45_4 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_psw_E45_4"
														.equals(key_tContextLoad_1)) {
											context.conn_psw_E45_4 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_schema_E45_4"
														.equals(key_tContextLoad_1)) {
											context.conn_schema_E45_4 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "conn_usr_E45_4"
														.equals(key_tContextLoad_1)) {
											context.conn_usr_E45_4 = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "ambiente"
														.equals(key_tContextLoad_1)) {
											context.ambiente = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "directory_talend"
														.equals(key_tContextLoad_1)) {
											context.directory_talend = value_tContextLoad_1;
										}

										if (key_tContextLoad_1 != null
												&& "numero_minuti_avviso"
														.equals(key_tContextLoad_1)) {

											context.numero_minuti_avviso = Integer
													.parseInt(value_tContextLoad_1);

										}

										if (key_tContextLoad_1 != null
												&& "numero_ore_trigger_batch"
														.equals(key_tContextLoad_1)) {

											context.numero_ore_trigger_batch = Integer
													.parseInt(value_tContextLoad_1);

										}

										if (context
												.getProperty(key_tContextLoad_1) != null) {
											assignList_tContextLoad_1
													.add(key_tContextLoad_1);
										} else {
											newPropertyList_tContextLoad_1
													.add(key_tContextLoad_1);
										}
										context.setProperty(key_tContextLoad_1,
												value_tContextLoad_1);
									} catch (java.lang.Exception e) {

										System.err
												.println("Setting a value for the key \""
														+ key_tContextLoad_1
														+ "\" has failed. Error message: "
														+ e.getMessage());
									}
									nb_line_tContextLoad_1++;
								}
								// ////////////////////////

								tos_count_tContextLoad_1++;

								/**
								 * [tContextLoad_1 main ] stop
								 */

							} // End of branch "row2"

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK",
						nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT",
						nb_line_reject_tFilterRow_1);

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tContextLoad_1 end ] start
				 */

				currentComponent = "tContextLoad_1";

				java.util.Enumeration<?> enu_tContextLoad_1 = context
						.propertyNames();
				while (enu_tContextLoad_1.hasMoreElements()) {
					String key_tContextLoad_1 = (String) enu_tContextLoad_1
							.nextElement();
					if (!assignList_tContextLoad_1.contains(key_tContextLoad_1)
							&& !newPropertyList_tContextLoad_1
									.contains(key_tContextLoad_1)) {
						noAssignList_tContextLoad_1.add(key_tContextLoad_1);
					}
				}

				String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1
						.toString();
				String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1
						.substring(1,
								newPropertyStr_tContextLoad_1.length() - 1);

				String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1
						.toString();
				String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1
						.substring(1, noAssignStr_tContextLoad_1.length() - 1);

				globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT",
						newProperty_tContextLoad_1);
				globalMap.put("tContextLoad_1_KEY_NOT_LOADED",
						noAssign_tContextLoad_1);

				globalMap.put("tContextLoad_1_NB_LINE", nb_line_tContextLoad_1);

				List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();

				resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread
						.currentThread().getId() + "", "", "", "", "",
						resumeUtil.convertToJsonText(context,
								parametersToEncrypt_tContextLoad_1));

				ok_Hash.put("tContextLoad_1", true);
				end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				/**
				 * [tContextLoad_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tContextLoad_1 finally ] start
				 */

				currentComponent = "tContextLoad_1";

				/**
				 * [tContextLoad_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				if ("failure".equalsIgnoreCase(status)) {
					globalMap.put("errorMain", true);
				}

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				if (!((Boolean) globalMap.get("errorMain"))) {

					tInitLog4J_1Process(globalMap);
				}

				/**
				 * [tJava_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public void tInitLog4J_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tInitLog4J_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tInitLog4J_1 begin ] start
				 */

				ok_Hash.put("tInitLog4J_1", false);
				start_Hash.put("tInitLog4J_1", System.currentTimeMillis());

				currentComponent = "tInitLog4J_1";

				int tos_count_tInitLog4J_1 = 0;

				java.io.File logConfFile_tInitLog4J_1 = new java.io.File(
						(context.directory_talend + "/conf/BatchAllineaDatabase/log4j.xml"));
				if (!((context.directory_talend + "/conf/BatchAllineaDatabase/log4j.xml")
						.endsWith(".xml"))
						&& !((context.directory_talend + "/conf/BatchAllineaDatabase/log4j.xml")
								.endsWith(".properties"))) {
					throw new java.security.InvalidParameterException(
							"Log4J configuration file must be 'xml' or 'properties'");
				} else if ((!logConfFile_tInitLog4J_1.exists())
						|| (!logConfFile_tInitLog4J_1.isFile())) {
					throw new java.io.FileNotFoundException(
							(context.directory_talend + "/conf/BatchAllineaDatabase/log4j.xml"));
				} else if (!logConfFile_tInitLog4J_1.canRead()) {
					throw new java.lang.SecurityException(
							(context.directory_talend + "/conf/BatchAllineaDatabase/log4j.xml")
									+ " can not be read");
				}

				try {
					org.courtine.talend.log4j.TalendLog4JConfigurator
							.configureLog4J(
									(context.directory_talend + "/conf/BatchAllineaDatabase/log4j.xml"),
									true);
				} catch (Exception e) {
					throw e;
				}

				/**
				 * [tInitLog4J_1 begin ] stop
				 */

				/**
				 * [tInitLog4J_1 main ] start
				 */

				currentComponent = "tInitLog4J_1";

				tos_count_tInitLog4J_1++;

				/**
				 * [tInitLog4J_1 main ] stop
				 */

				/**
				 * [tInitLog4J_1 end ] start
				 */

				currentComponent = "tInitLog4J_1";

				ok_Hash.put("tInitLog4J_1", true);
				end_Hash.put("tInitLog4J_1", System.currentTimeMillis());

				/**
				 * [tInitLog4J_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tInitLog4J_1 finally ] start
				 */

				currentComponent = "tInitLog4J_1";

				/**
				 * [tInitLog4J_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tInitLog4J_1_SUBPROCESS_STATE", 1);
	}

	public static class LOG_STATStruct implements
			routines.system.IPersistableRow<LOG_STATStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Main_Allinea_Database = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database,
						0, length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Main_Allinea_Database) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

					this.priority = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

				// Integer

				writeInteger(this.priority, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append(",priority=" + String.valueOf(priority));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(LOG_STATStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Main_Allinea_Database = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database,
						0, length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Main_Allinea_Database) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				LOG_STATStruct LOG_STAT = new LOG_STATStruct();

				/**
				 * [tLog4JCatch_1 begin ] start
				 */

				ok_Hash.put("tLog4JCatch_1", false);
				start_Hash.put("tLog4JCatch_1", System.currentTimeMillis());

				currentComponent = "tLog4JCatch_1";

				int tos_count_tLog4JCatch_1 = 0;

				org.apache.log4j.Logger logger_tLog4JCatch_1 = org.apache.log4j.Logger
						.getLogger(this.getClass());
				int nb_line_tLog4JCatch_1 = 0;

				/**
				 * [tLog4JCatch_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				LOG_STATStruct LOG_STAT_tmp = new LOG_STATStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1
						.getMessages()) {
					row4.pid = pid;
					row4.root_pid = rootPid;
					row4.father_pid = fatherPid;
					row4.project = projectName;
					row4.job = jobName;
					row4.context = contextStr;
					row4.origin = (scm.getOrigin() == null
							|| scm.getOrigin().length() < 1 ? null : scm
							.getOrigin());
					row4.message = scm.getMessage();
					row4.duration = scm.getDuration();
					row4.moment = scm.getMoment();
					row4.message_type = scm.getMessageType();
					row4.job_version = scm.getJobVersion();
					row4.job_repository_id = scm.getJobId();
					row4.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tMap_2 main ] start
					 */

					currentComponent = "tMap_2";

					boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_2 = false;
					boolean mainRowRejected_tMap_2 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
						// ###############################
						// # Output tables

						LOG_STAT = null;

						// # Output table : 'LOG_STAT'
						LOG_STAT_tmp.moment = row4.moment;
						LOG_STAT_tmp.pid = row4.pid;
						LOG_STAT_tmp.father_pid = row4.father_pid;
						LOG_STAT_tmp.root_pid = row4.root_pid;
						LOG_STAT_tmp.system_pid = row4.system_pid;
						LOG_STAT_tmp.project = row4.project;
						LOG_STAT_tmp.job = row4.job;
						LOG_STAT_tmp.job_repository_id = row4.job_repository_id;
						LOG_STAT_tmp.job_version = row4.job_version;
						LOG_STAT_tmp.context = row4.context;
						LOG_STAT_tmp.origin = row4.origin;
						LOG_STAT_tmp.message_type = row4.message_type;
						LOG_STAT_tmp.message = row4.message;
						LOG_STAT_tmp.duration = row4.duration;
						LOG_STAT_tmp.priority = 3;
						LOG_STAT = LOG_STAT_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_2 = false;

					tos_count_tMap_2++;

					/**
					 * [tMap_2 main ] stop
					 */
					// Start of branch "LOG_STAT"
					if (LOG_STAT != null) {

						/**
						 * [tLog4JCatch_1 main ] start
						 */

						currentComponent = "tLog4JCatch_1";

						switch (LOG_STAT.priority) {
						case 1:
							logger_tLog4JCatch_1.trace(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 2:
							logger_tLog4JCatch_1.debug(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 3:
							logger_tLog4JCatch_1.info(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 4:
							logger_tLog4JCatch_1.warn(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 5:
							logger_tLog4JCatch_1.error(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 6:
							logger_tLog4JCatch_1.fatal(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						default:
							logger_tLog4JCatch_1.warn(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						}

						nb_line_tLog4JCatch_1++;

						tos_count_tLog4JCatch_1++;

						/**
						 * [tLog4JCatch_1 main ] stop
						 */

					} // End of branch "LOG_STAT"

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tLog4JCatch_1 end ] start
				 */

				currentComponent = "tLog4JCatch_1";

				globalMap.put("tLog4JCatch_1_NB_LINE", nb_line_tLog4JCatch_1);

				ok_Hash.put("tLog4JCatch_1", true);
				end_Hash.put("tLog4JCatch_1", System.currentTimeMillis());

				/**
				 * [tLog4JCatch_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tLog4JCatch_1 finally ] start
				 */

				currentComponent = "tLog4JCatch_1";

				/**
				 * [tLog4JCatch_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				if ("failure".equalsIgnoreCase(status)) {
					globalMap.put("errorMain", true);
				}

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				if (!((Boolean) globalMap.get("errorMain"))) {

					tLoop_1Process(globalMap);
				}

				/**
				 * [tJava_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public void tLoop_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLoop_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLoop_1 begin ] start
				 */

				TalendThreadPool mtp_tInfiniteLoop_2 = new TalendThreadPool(2);

				final Object[] lockWrite = new Object[0];
				int threadIdCounter = 0;

				int NB_ITERATE_tInfiniteLoop_2 = 0; // for statistics

				TalendThreadPool mtp_tInfiniteLoop_1 = new TalendThreadPool(2);

				int NB_ITERATE_tInfiniteLoop_1 = 0; // for statistics

				ok_Hash.put("tLoop_1", false);
				start_Hash.put("tLoop_1", System.currentTimeMillis());

				currentComponent = "tLoop_1";

				int tos_count_tLoop_1 = 0;

				int current_iteration_tLoop_1 = 0;

				for (int looptLoop_1 = 1; looptLoop_1 <= 1; looptLoop_1 = looptLoop_1 + 1) {

					current_iteration_tLoop_1++;
					globalMap.put("tLoop_1_CURRENT_VALUE", looptLoop_1);
					globalMap.put("tLoop_1_CURRENT_ITERATION",
							current_iteration_tLoop_1);

					/**
					 * [tLoop_1 begin ] stop
					 */

					/**
					 * [tLoop_1 main ] start
					 */

					currentComponent = "tLoop_1";

					tos_count_tLoop_1++;

					/**
					 * [tLoop_1 main ] stop
					 */
					NB_ITERATE_tInfiniteLoop_1++;

					class tInfiniteLoop_1Thread extends TalendThread {// implements
																		// routines.system.TalendThreadPool.PropertySettable

						class ThreadedMap extends
								java.util.HashMap<String, Object> {

							private static final long serialVersionUID = 0L;

							public ThreadedMap(
									java.util.Map<String, Object> globalMap) {
								super(globalMap);
							}

							@Override
							public Object put(String key, Object value) {

								synchronized (Main_Allinea_Database.this.obj) {

									super.put(key, value);
									return Main_Allinea_Database.this.globalMap
											.put(key, value);

								}

							}
						}

						private java.util.Map<String, Object> globalMap = null;
						boolean isRunning = false;
						String iterateId = "";

						public tInfiniteLoop_1Thread(
								java.util.Map<String, Object> globalMap,
								int threadID) {
							super();

							synchronized (Main_Allinea_Database.this.obj) {
								this.globalMap = new ThreadedMap(globalMap);

							}
							iterateId = "." + threadID;

						}

						public void run() {

							java.util.Map threadRunResultMap = new java.util.HashMap();
							threadRunResultMap.put("errorCode", null);
							threadRunResultMap.put("status", "");
							threadLocal.set(threadRunResultMap);

							this.isRunning = true;
							String currentComponent = "";
							java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

							try {

								/**
								 * [tInfiniteLoop_1 begin ] start
								 */

								int NB_ITERATE_tRunJob_1 = 0; // for statistics

								ok_Hash.put("tInfiniteLoop_1", false);
								start_Hash.put("tInfiniteLoop_1",
										System.currentTimeMillis());

								currentComponent = "tInfiniteLoop_1";

								int tos_count_tInfiniteLoop_1 = 0;

								int counter_tInfiniteLoop_1 = 0;
								globalMap.put(
										"tInfiniteLoop_1_CURRENT_ITERATION",
										counter_tInfiniteLoop_1);

								while (counter_tInfiniteLoop_1 > -1) {
									counter_tInfiniteLoop_1++;
									globalMap
											.put("tInfiniteLoop_1_CURRENT_ITERATION",
													counter_tInfiniteLoop_1);

									/**
									 * [tInfiniteLoop_1 begin ] stop
									 */

									/**
									 * [tInfiniteLoop_1 main ] start
									 */

									currentComponent = "tInfiniteLoop_1";

									tos_count_tInfiniteLoop_1++;

									/**
									 * [tInfiniteLoop_1 main ] stop
									 */
									NB_ITERATE_tRunJob_1++;

									/**
									 * [tRunJob_1 begin ] start
									 */

									ok_Hash.put("tRunJob_1", false);
									start_Hash.put("tRunJob_1",
											System.currentTimeMillis());

									tStatCatcher_1.addMessage("begin",
											"tRunJob_1");
									tStatCatcher_1Process(globalMap);

									currentComponent = "tRunJob_1";

									int tos_count_tRunJob_1 = 0;

									/**
									 * [tRunJob_1 begin ] stop
									 */

									/**
									 * [tRunJob_1 main ] start
									 */

									currentComponent = "tRunJob_1";

									java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

									paraList_tRunJob_1.add("--father_pid="
											+ pid);

									paraList_tRunJob_1.add("--root_pid="
											+ rootPid);

									paraList_tRunJob_1
											.add("--father_node=tRunJob_1");

									paraList_tRunJob_1.add("--context=Default");

									// for feature:10589

									paraList_tRunJob_1.add("--stat_port="
											+ portStats);

									if (resuming_logs_dir_path != null) {
										paraList_tRunJob_1
												.add("--resuming_logs_dir_path="
														+ resuming_logs_dir_path);
									}
									String childResumePath_tRunJob_1 = ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path);
									String tRunJobName_tRunJob_1 = ResumeUtil
											.getRighttRunJob(resuming_checkpoint_path);
									if ("tRunJob_1"
											.equals(tRunJobName_tRunJob_1)
											&& childResumePath_tRunJob_1 != null) {
										paraList_tRunJob_1
												.add("--resuming_checkpoint_path="
														+ ResumeUtil
																.getChildJobCheckPointPath(resuming_checkpoint_path));
									}
									paraList_tRunJob_1
											.add("--parent_part_launcher=JOB:"
													+ jobName
													+ "/NODE:tRunJob_1");

									java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

									context.synchronizeContext();
									java.util.Enumeration<?> propertyNames_tRunJob_1 = context
											.propertyNames();
									while (propertyNames_tRunJob_1
											.hasMoreElements()) {
										String key_tRunJob_1 = (String) propertyNames_tRunJob_1
												.nextElement();
										Object value_tRunJob_1 = (Object) context
												.get(key_tRunJob_1);
										paraList_tRunJob_1
												.add("--context_param "
														+ key_tRunJob_1 + "="
														+ value_tRunJob_1);
									}

									parentContextMap_tRunJob_1.put(
											"conn_db_900_6",
											context.conn_db_900_6);

									parentContextMap_tRunJob_1.put(
											"conn_host_900_6",
											context.conn_host_900_6);

									parentContextMap_tRunJob_1.put(
											"conn_port_900_6",
											context.conn_port_900_6);

									parentContextMap_tRunJob_1.put(
											"conn_psw_900_6",
											context.conn_psw_900_6);

									parentContextMap_tRunJob_1.put(
											"conn_schema_900_6",
											context.conn_schema_900_6);

									parentContextMap_tRunJob_1.put(
											"conn_usr_900_6",
											context.conn_usr_900_6);

									parentContextMap_tRunJob_1.put(
											"conn_db_E45_1",
											context.conn_db_E45_1);

									parentContextMap_tRunJob_1.put(
											"conn_host_E45_1",
											context.conn_host_E45_1);

									parentContextMap_tRunJob_1.put(
											"conn_port_E45_1",
											context.conn_port_E45_1);

									parentContextMap_tRunJob_1.put(
											"conn_psw_E45_1",
											context.conn_psw_E45_1);

									parentContextMap_tRunJob_1.put(
											"conn_schema_E45_1",
											context.conn_schema_E45_1);

									parentContextMap_tRunJob_1.put(
											"conn_usr_E45_1",
											context.conn_usr_E45_1);

									parentContextMap_tRunJob_1.put(
											"conn_db_E45_2",
											context.conn_db_E45_2);

									parentContextMap_tRunJob_1.put(
											"conn_host_E45_2",
											context.conn_host_E45_2);

									parentContextMap_tRunJob_1.put(
											"conn_port_E45_2",
											context.conn_port_E45_2);

									parentContextMap_tRunJob_1.put(
											"conn_psw_E45_2",
											context.conn_psw_E45_2);

									parentContextMap_tRunJob_1.put(
											"conn_schema_E45_2",
											context.conn_schema_E45_2);

									parentContextMap_tRunJob_1.put(
											"conn_usr_E45_2",
											context.conn_usr_E45_2);

									parentContextMap_tRunJob_1.put(
											"conn_db_E45_4",
											context.conn_db_E45_4);

									parentContextMap_tRunJob_1.put(
											"conn_host_E45_4",
											context.conn_host_E45_4);

									parentContextMap_tRunJob_1.put(
											"conn_port_E45_4",
											context.conn_port_E45_4);

									parentContextMap_tRunJob_1.put(
											"conn_psw_E45_4",
											context.conn_psw_E45_4);

									parentContextMap_tRunJob_1.put(
											"conn_schema_E45_4",
											context.conn_schema_E45_4);

									parentContextMap_tRunJob_1.put(
											"conn_usr_E45_4",
											context.conn_usr_E45_4);

									parentContextMap_tRunJob_1.put("ambiente",
											context.ambiente);

									parentContextMap_tRunJob_1.put(
											"directory_talend",
											context.directory_talend);

									parentContextMap_tRunJob_1.put(
											"numero_minuti_avviso",
											context.numero_minuti_avviso);

									parentContextMap_tRunJob_1.put(
											"numero_ore_trigger_batch",
											context.numero_ore_trigger_batch);

									Object obj_tRunJob_1 = null;

									allinea_database.allinea_0_1.Allinea childJob_tRunJob_1 = new allinea_database.allinea_0_1.Allinea();
									// pass DataSources
									java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
											.get(KEY_DB_DATASOURCES);
									if (null != talendDataSources_tRunJob_1) {
										java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
										for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
												.entrySet()) {
											dataSources_tRunJob_1
													.put(talendDataSourceEntry_tRunJob_1
															.getKey(),
															talendDataSourceEntry_tRunJob_1
																	.getValue()
																	.getRawDataSource());
										}
										childJob_tRunJob_1
												.setDataSources(dataSources_tRunJob_1);
									}

									childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

									String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
											.runJob((String[]) paraList_tRunJob_1
													.toArray(new String[paraList_tRunJob_1
															.size()]));

									errorCode = childJob_tRunJob_1
											.getErrorCode();

									if (childJob_tRunJob_1.getErrorCode() == null) {
										globalMap
												.put("tRunJob_1_CHILD_RETURN_CODE",
														childJob_tRunJob_1
																.getStatus() != null
																&& ("failure")
																		.equals(childJob_tRunJob_1
																				.getStatus()) ? 1
																: 0);
									} else {
										globalMap.put(
												"tRunJob_1_CHILD_RETURN_CODE",
												childJob_tRunJob_1
														.getErrorCode());
									}
									if (childJob_tRunJob_1
											.getExceptionStackTrace() != null) {
										globalMap
												.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
														childJob_tRunJob_1
																.getExceptionStackTrace());
									}

									tos_count_tRunJob_1++;

									/**
									 * [tRunJob_1 main ] stop
									 */

									/**
									 * [tRunJob_1 end ] start
									 */

									currentComponent = "tRunJob_1";

									ok_Hash.put("tRunJob_1", true);
									end_Hash.put("tRunJob_1",
											System.currentTimeMillis());

									tStatCatcher_1.addMessage(
											"end",
											"tRunJob_1",
											end_Hash.get("tRunJob_1")
													- start_Hash
															.get("tRunJob_1"));
									tStatCatcher_1Process(globalMap);

									/**
									 * [tRunJob_1 end ] stop
									 */

									/**
									 * [tInfiniteLoop_1 end ] start
									 */

									currentComponent = "tInfiniteLoop_1";

									Thread.sleep(context.numero_ore_trigger_batch * 60 * 60 * 1000);
								}

								ok_Hash.put("tInfiniteLoop_1", true);
								end_Hash.put("tInfiniteLoop_1",
										System.currentTimeMillis());

								/**
								 * [tInfiniteLoop_1 end ] stop
								 */
							} catch (java.lang.Exception e) {
								this.status = "failure";
								Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
										.get()).get("errorCode"));
								if (localErrorCode != null) {
									if (this.errorCode == null
											|| localErrorCode
													.compareTo(this.errorCode) > 0) {
										this.errorCode = localErrorCode;
									}
								}

								TalendException te = new TalendException(e,
										currentComponent, globalMap);

								this.exception = te;
								talendThreadPool.setErrorThread(this);
								talendThreadPool.stopAllWorkers();

							} finally {
								try {

									/**
									 * [tInfiniteLoop_1 finally ] start
									 */

									currentComponent = "tInfiniteLoop_1";

									/**
									 * [tInfiniteLoop_1 finally ] stop
									 */

									/**
									 * [tRunJob_1 finally ] start
									 */

									currentComponent = "tRunJob_1";

									/**
									 * [tRunJob_1 finally ] stop
									 */

								} catch (java.lang.Exception e) {
									// ignore
								} catch (java.lang.Error error) {
									// ignore
								}
								resourceMap = null;
							}
							this.isRunning = false;

							Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
									.get()).get("errorCode"));
							String localStatus = (String) (((java.util.Map) threadLocal
									.get()).get("status"));
							if (localErrorCode != null) {
								if (this.errorCode == null
										|| localErrorCode
												.compareTo(this.errorCode) > 0) {
									this.errorCode = localErrorCode;
								}
							}
							if (!this.status.equals("failure")) {
								this.status = localStatus;
							}

							talendThreadPool.getTalendThreadResult()
									.setErrorCode(this.errorCode);
							talendThreadPool.getTalendThreadResult().setStatus(
									this.status);
						}
					}

					tInfiniteLoop_1Thread bt_tInfiniteLoop_1 = new tInfiniteLoop_1Thread(
							globalMap, threadIdCounter++);
					mtp_tInfiniteLoop_1.execute(bt_tInfiniteLoop_1);

					NB_ITERATE_tInfiniteLoop_2++;

					class tInfiniteLoop_2Thread extends TalendThread {// implements
																		// routines.system.TalendThreadPool.PropertySettable

						class ThreadedMap extends
								java.util.HashMap<String, Object> {

							private static final long serialVersionUID = 0L;

							public ThreadedMap(
									java.util.Map<String, Object> globalMap) {
								super(globalMap);
							}

							@Override
							public Object put(String key, Object value) {

								synchronized (Main_Allinea_Database.this.obj) {

									super.put(key, value);
									return Main_Allinea_Database.this.globalMap
											.put(key, value);

								}

							}
						}

						private java.util.Map<String, Object> globalMap = null;
						boolean isRunning = false;
						String iterateId = "";

						public tInfiniteLoop_2Thread(
								java.util.Map<String, Object> globalMap,
								int threadID) {
							super();

							synchronized (Main_Allinea_Database.this.obj) {
								this.globalMap = new ThreadedMap(globalMap);

							}
							iterateId = "." + threadID;

						}

						public void run() {

							java.util.Map threadRunResultMap = new java.util.HashMap();
							threadRunResultMap.put("errorCode", null);
							threadRunResultMap.put("status", "");
							threadLocal.set(threadRunResultMap);

							this.isRunning = true;
							String currentComponent = "";
							java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

							try {

								/**
								 * [tInfiniteLoop_2 begin ] start
								 */

								int NB_ITERATE_tRunJob_4 = 0; // for statistics

								ok_Hash.put("tInfiniteLoop_2", false);
								start_Hash.put("tInfiniteLoop_2",
										System.currentTimeMillis());

								currentComponent = "tInfiniteLoop_2";

								int tos_count_tInfiniteLoop_2 = 0;

								int counter_tInfiniteLoop_2 = 0;
								globalMap.put(
										"tInfiniteLoop_2_CURRENT_ITERATION",
										counter_tInfiniteLoop_2);

								while (counter_tInfiniteLoop_2 > -1) {
									counter_tInfiniteLoop_2++;
									globalMap
											.put("tInfiniteLoop_2_CURRENT_ITERATION",
													counter_tInfiniteLoop_2);

									/**
									 * [tInfiniteLoop_2 begin ] stop
									 */

									/**
									 * [tInfiniteLoop_2 main ] start
									 */

									currentComponent = "tInfiniteLoop_2";

									tos_count_tInfiniteLoop_2++;

									/**
									 * [tInfiniteLoop_2 main ] stop
									 */
									NB_ITERATE_tRunJob_4++;

									/**
									 * [tRunJob_4 begin ] start
									 */

									ok_Hash.put("tRunJob_4", false);
									start_Hash.put("tRunJob_4",
											System.currentTimeMillis());

									currentComponent = "tRunJob_4";

									int tos_count_tRunJob_4 = 0;

									/**
									 * [tRunJob_4 begin ] stop
									 */

									/**
									 * [tRunJob_4 main ] start
									 */

									currentComponent = "tRunJob_4";

									java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();

									paraList_tRunJob_4.add("--father_pid="
											+ pid);

									paraList_tRunJob_4.add("--root_pid="
											+ rootPid);

									paraList_tRunJob_4
											.add("--father_node=tRunJob_4");

									paraList_tRunJob_4.add("--context=Default");

									// for feature:10589

									paraList_tRunJob_4.add("--stat_port="
											+ portStats);

									if (resuming_logs_dir_path != null) {
										paraList_tRunJob_4
												.add("--resuming_logs_dir_path="
														+ resuming_logs_dir_path);
									}
									String childResumePath_tRunJob_4 = ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path);
									String tRunJobName_tRunJob_4 = ResumeUtil
											.getRighttRunJob(resuming_checkpoint_path);
									if ("tRunJob_4"
											.equals(tRunJobName_tRunJob_4)
											&& childResumePath_tRunJob_4 != null) {
										paraList_tRunJob_4
												.add("--resuming_checkpoint_path="
														+ ResumeUtil
																.getChildJobCheckPointPath(resuming_checkpoint_path));
									}
									paraList_tRunJob_4
											.add("--parent_part_launcher=JOB:"
													+ jobName
													+ "/NODE:tRunJob_4");

									java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

									context.synchronizeContext();
									java.util.Enumeration<?> propertyNames_tRunJob_4 = context
											.propertyNames();
									while (propertyNames_tRunJob_4
											.hasMoreElements()) {
										String key_tRunJob_4 = (String) propertyNames_tRunJob_4
												.nextElement();
										Object value_tRunJob_4 = (Object) context
												.get(key_tRunJob_4);
										paraList_tRunJob_4
												.add("--context_param "
														+ key_tRunJob_4 + "="
														+ value_tRunJob_4);
									}

									parentContextMap_tRunJob_4.put(
											"conn_db_900_6",
											context.conn_db_900_6);

									parentContextMap_tRunJob_4.put(
											"conn_host_900_6",
											context.conn_host_900_6);

									parentContextMap_tRunJob_4.put(
											"conn_port_900_6",
											context.conn_port_900_6);

									parentContextMap_tRunJob_4.put(
											"conn_psw_900_6",
											context.conn_psw_900_6);

									parentContextMap_tRunJob_4.put(
											"conn_schema_900_6",
											context.conn_schema_900_6);

									parentContextMap_tRunJob_4.put(
											"conn_usr_900_6",
											context.conn_usr_900_6);

									parentContextMap_tRunJob_4.put(
											"conn_db_E45_1",
											context.conn_db_E45_1);

									parentContextMap_tRunJob_4.put(
											"conn_host_E45_1",
											context.conn_host_E45_1);

									parentContextMap_tRunJob_4.put(
											"conn_port_E45_1",
											context.conn_port_E45_1);

									parentContextMap_tRunJob_4.put(
											"conn_psw_E45_1",
											context.conn_psw_E45_1);

									parentContextMap_tRunJob_4.put(
											"conn_schema_E45_1",
											context.conn_schema_E45_1);

									parentContextMap_tRunJob_4.put(
											"conn_usr_E45_1",
											context.conn_usr_E45_1);

									parentContextMap_tRunJob_4.put(
											"conn_db_E45_2",
											context.conn_db_E45_2);

									parentContextMap_tRunJob_4.put(
											"conn_host_E45_2",
											context.conn_host_E45_2);

									parentContextMap_tRunJob_4.put(
											"conn_port_E45_2",
											context.conn_port_E45_2);

									parentContextMap_tRunJob_4.put(
											"conn_psw_E45_2",
											context.conn_psw_E45_2);

									parentContextMap_tRunJob_4.put(
											"conn_schema_E45_2",
											context.conn_schema_E45_2);

									parentContextMap_tRunJob_4.put(
											"conn_usr_E45_2",
											context.conn_usr_E45_2);

									parentContextMap_tRunJob_4.put(
											"conn_db_E45_4",
											context.conn_db_E45_4);

									parentContextMap_tRunJob_4.put(
											"conn_host_E45_4",
											context.conn_host_E45_4);

									parentContextMap_tRunJob_4.put(
											"conn_port_E45_4",
											context.conn_port_E45_4);

									parentContextMap_tRunJob_4.put(
											"conn_psw_E45_4",
											context.conn_psw_E45_4);

									parentContextMap_tRunJob_4.put(
											"conn_schema_E45_4",
											context.conn_schema_E45_4);

									parentContextMap_tRunJob_4.put(
											"conn_usr_E45_4",
											context.conn_usr_E45_4);

									parentContextMap_tRunJob_4.put("ambiente",
											context.ambiente);

									parentContextMap_tRunJob_4.put(
											"directory_talend",
											context.directory_talend);

									parentContextMap_tRunJob_4.put(
											"numero_minuti_avviso",
											context.numero_minuti_avviso);

									parentContextMap_tRunJob_4.put(
											"numero_ore_trigger_batch",
											context.numero_ore_trigger_batch);

									Object obj_tRunJob_4 = null;

									obj_tRunJob_4 = "0";
									paraList_tRunJob_4
											.add("--context_param codice="
													+ RuntimeUtils
															.tRunJobConvertContext(obj_tRunJob_4));
									parentContextMap_tRunJob_4.put("codice",
											obj_tRunJob_4);

									obj_tRunJob_4 = "Batch Attivo";
									paraList_tRunJob_4
											.add("--context_param descrizione="
													+ RuntimeUtils
															.tRunJobConvertContext(obj_tRunJob_4));
									parentContextMap_tRunJob_4.put(
											"descrizione", obj_tRunJob_4);

									allinea_database.log_nagios_0_1.Log_Nagios childJob_tRunJob_4 = new allinea_database.log_nagios_0_1.Log_Nagios();
									// pass DataSources
									java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_4 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
											.get(KEY_DB_DATASOURCES);
									if (null != talendDataSources_tRunJob_4) {
										java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_4 = new java.util.HashMap<String, javax.sql.DataSource>();
										for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_4 : talendDataSources_tRunJob_4
												.entrySet()) {
											dataSources_tRunJob_4
													.put(talendDataSourceEntry_tRunJob_4
															.getKey(),
															talendDataSourceEntry_tRunJob_4
																	.getValue()
																	.getRawDataSource());
										}
										childJob_tRunJob_4
												.setDataSources(dataSources_tRunJob_4);
									}

									childJob_tRunJob_4.parentContextMap = parentContextMap_tRunJob_4;

									String[][] childReturn_tRunJob_4 = childJob_tRunJob_4
											.runJob((String[]) paraList_tRunJob_4
													.toArray(new String[paraList_tRunJob_4
															.size()]));

									errorCode = childJob_tRunJob_4
											.getErrorCode();

									if (childJob_tRunJob_4.getErrorCode() == null) {
										globalMap
												.put("tRunJob_4_CHILD_RETURN_CODE",
														childJob_tRunJob_4
																.getStatus() != null
																&& ("failure")
																		.equals(childJob_tRunJob_4
																				.getStatus()) ? 1
																: 0);
									} else {
										globalMap.put(
												"tRunJob_4_CHILD_RETURN_CODE",
												childJob_tRunJob_4
														.getErrorCode());
									}
									if (childJob_tRunJob_4
											.getExceptionStackTrace() != null) {
										globalMap
												.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE",
														childJob_tRunJob_4
																.getExceptionStackTrace());
									}

									tos_count_tRunJob_4++;

									/**
									 * [tRunJob_4 main ] stop
									 */

									/**
									 * [tRunJob_4 end ] start
									 */

									currentComponent = "tRunJob_4";

									ok_Hash.put("tRunJob_4", true);
									end_Hash.put("tRunJob_4",
											System.currentTimeMillis());

									/**
									 * [tRunJob_4 end ] stop
									 */

									/**
									 * [tInfiniteLoop_2 end ] start
									 */

									currentComponent = "tInfiniteLoop_2";

									Thread.sleep(context.numero_minuti_avviso * 60 * 1000);
								}

								ok_Hash.put("tInfiniteLoop_2", true);
								end_Hash.put("tInfiniteLoop_2",
										System.currentTimeMillis());

								/**
								 * [tInfiniteLoop_2 end ] stop
								 */
							} catch (java.lang.Exception e) {
								this.status = "failure";
								Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
										.get()).get("errorCode"));
								if (localErrorCode != null) {
									if (this.errorCode == null
											|| localErrorCode
													.compareTo(this.errorCode) > 0) {
										this.errorCode = localErrorCode;
									}
								}

								TalendException te = new TalendException(e,
										currentComponent, globalMap);

								this.exception = te;
								talendThreadPool.setErrorThread(this);
								talendThreadPool.stopAllWorkers();

							} finally {
								try {

									/**
									 * [tInfiniteLoop_2 finally ] start
									 */

									currentComponent = "tInfiniteLoop_2";

									/**
									 * [tInfiniteLoop_2 finally ] stop
									 */

									/**
									 * [tRunJob_4 finally ] start
									 */

									currentComponent = "tRunJob_4";

									/**
									 * [tRunJob_4 finally ] stop
									 */

								} catch (java.lang.Exception e) {
									// ignore
								} catch (java.lang.Error error) {
									// ignore
								}
								resourceMap = null;
							}
							this.isRunning = false;

							Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
									.get()).get("errorCode"));
							String localStatus = (String) (((java.util.Map) threadLocal
									.get()).get("status"));
							if (localErrorCode != null) {
								if (this.errorCode == null
										|| localErrorCode
												.compareTo(this.errorCode) > 0) {
									this.errorCode = localErrorCode;
								}
							}
							if (!this.status.equals("failure")) {
								this.status = localStatus;
							}

							talendThreadPool.getTalendThreadResult()
									.setErrorCode(this.errorCode);
							talendThreadPool.getTalendThreadResult().setStatus(
									this.status);
						}
					}

					tInfiniteLoop_2Thread bt_tInfiniteLoop_2 = new tInfiniteLoop_2Thread(
							globalMap, threadIdCounter++);
					mtp_tInfiniteLoop_2.execute(bt_tInfiniteLoop_2);

					/**
					 * [tLoop_1 end ] start
					 */

					currentComponent = "tLoop_1";

				}

				ok_Hash.put("tLoop_1", true);
				end_Hash.put("tLoop_1", System.currentTimeMillis());

				mtp_tInfiniteLoop_2.waitForEndOfQueue();

				TalendThread errorThread_tInfiniteLoop_2 = mtp_tInfiniteLoop_2
						.getErrorThread();

				if (errorThread_tInfiniteLoop_2 != null) {
					if (errorThread_tInfiniteLoop_2.errorCode != null) {
						if (errorCode == null
								|| errorThread_tInfiniteLoop_2.errorCode
										.compareTo(errorCode) > 0) {
							errorCode = errorThread_tInfiniteLoop_2.errorCode;
						}
					}
					if (!status.equals("failure")) {
						status = errorThread_tInfiniteLoop_2.status;
					}
					if (errorThread_tInfiniteLoop_2.exception != null) {
						throw errorThread_tInfiniteLoop_2.exception;
					}
				} else {
					Integer threadErrorCode = mtp_tInfiniteLoop_2
							.getTalendThreadResult().getErrorCode();
					String threadStatus = mtp_tInfiniteLoop_2
							.getTalendThreadResult().getStatus();

					if (threadErrorCode != null) {
						if (errorCode == null
								|| threadErrorCode.compareTo(errorCode) > 0) {
							errorCode = threadErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = threadStatus;
					}
				}

				mtp_tInfiniteLoop_1.waitForEndOfQueue();

				TalendThread errorThread_tInfiniteLoop_1 = mtp_tInfiniteLoop_1
						.getErrorThread();

				if (errorThread_tInfiniteLoop_1 != null) {
					if (errorThread_tInfiniteLoop_1.errorCode != null) {
						if (errorCode == null
								|| errorThread_tInfiniteLoop_1.errorCode
										.compareTo(errorCode) > 0) {
							errorCode = errorThread_tInfiniteLoop_1.errorCode;
						}
					}
					if (!status.equals("failure")) {
						status = errorThread_tInfiniteLoop_1.status;
					}
					if (errorThread_tInfiniteLoop_1.exception != null) {
						throw errorThread_tInfiniteLoop_1.exception;
					}
				} else {
					Integer threadErrorCode = mtp_tInfiniteLoop_1
							.getTalendThreadResult().getErrorCode();
					String threadStatus = mtp_tInfiniteLoop_1
							.getTalendThreadResult().getStatus();

					if (threadErrorCode != null) {
						if (errorCode == null
								|| threadErrorCode.compareTo(errorCode) > 0) {
							errorCode = threadErrorCode;
						}
					}
					if (!status.equals("failure")) {
						status = threadStatus;
					}
				}

				/**
				 * [tLoop_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLoop_1 finally ] start
				 */

				currentComponent = "tLoop_1";

				/**
				 * [tLoop_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLoop_1_SUBPROCESS_STATE", 1);
	}

	public static class LOG_JOBStruct implements
			routines.system.IPersistableRow<LOG_JOBStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Main_Allinea_Database = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database,
						0, length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Main_Allinea_Database,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Main_Allinea_Database) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(LOG_JOBStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				LOG_JOBStruct LOG_JOB = new LOG_JOBStruct();

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tRunJob_2");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				/**
				 * [tRunJob_2 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					LOG_JOB.type = lcm.getType();
					LOG_JOB.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					LOG_JOB.priority = lcm.getPriority();
					LOG_JOB.message = lcm.getMessage();
					LOG_JOB.code = lcm.getCode();

					LOG_JOB.moment = java.util.Calendar.getInstance().getTime();

					LOG_JOB.pid = pid;
					LOG_JOB.root_pid = rootPid;
					LOG_JOB.father_pid = fatherPid;

					LOG_JOB.project = projectName;
					LOG_JOB.job = jobName;
					LOG_JOB.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */

					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tRunJob_2 main ] start
					 */

					currentComponent = "tRunJob_2";

					java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

					paraList_tRunJob_2.add("--father_pid=" + pid);

					paraList_tRunJob_2.add("--root_pid=" + rootPid);

					paraList_tRunJob_2.add("--father_node=tRunJob_2");

					paraList_tRunJob_2.add("--context=Default");

					// for feature:10589

					paraList_tRunJob_2.add("--stat_port=" + portStats);

					if (resuming_logs_dir_path != null) {
						paraList_tRunJob_2.add("--resuming_logs_dir_path="
								+ resuming_logs_dir_path);
					}
					String childResumePath_tRunJob_2 = ResumeUtil
							.getChildJobCheckPointPath(resuming_checkpoint_path);
					String tRunJobName_tRunJob_2 = ResumeUtil
							.getRighttRunJob(resuming_checkpoint_path);
					if ("tRunJob_2".equals(tRunJobName_tRunJob_2)
							&& childResumePath_tRunJob_2 != null) {
						paraList_tRunJob_2
								.add("--resuming_checkpoint_path="
										+ ResumeUtil
												.getChildJobCheckPointPath(resuming_checkpoint_path));
					}
					paraList_tRunJob_2.add("--parent_part_launcher=JOB:"
							+ jobName + "/NODE:tRunJob_2");

					java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

					context.synchronizeContext();
					java.util.Enumeration<?> propertyNames_tRunJob_2 = context
							.propertyNames();
					while (propertyNames_tRunJob_2.hasMoreElements()) {
						String key_tRunJob_2 = (String) propertyNames_tRunJob_2
								.nextElement();
						Object value_tRunJob_2 = (Object) context
								.get(key_tRunJob_2);
						paraList_tRunJob_2.add("--context_param "
								+ key_tRunJob_2 + "=" + value_tRunJob_2);
					}

					parentContextMap_tRunJob_2.put("conn_db_900_6",
							context.conn_db_900_6);

					parentContextMap_tRunJob_2.put("conn_host_900_6",
							context.conn_host_900_6);

					parentContextMap_tRunJob_2.put("conn_port_900_6",
							context.conn_port_900_6);

					parentContextMap_tRunJob_2.put("conn_psw_900_6",
							context.conn_psw_900_6);

					parentContextMap_tRunJob_2.put("conn_schema_900_6",
							context.conn_schema_900_6);

					parentContextMap_tRunJob_2.put("conn_usr_900_6",
							context.conn_usr_900_6);

					parentContextMap_tRunJob_2.put("conn_db_E45_1",
							context.conn_db_E45_1);

					parentContextMap_tRunJob_2.put("conn_host_E45_1",
							context.conn_host_E45_1);

					parentContextMap_tRunJob_2.put("conn_port_E45_1",
							context.conn_port_E45_1);

					parentContextMap_tRunJob_2.put("conn_psw_E45_1",
							context.conn_psw_E45_1);

					parentContextMap_tRunJob_2.put("conn_schema_E45_1",
							context.conn_schema_E45_1);

					parentContextMap_tRunJob_2.put("conn_usr_E45_1",
							context.conn_usr_E45_1);

					parentContextMap_tRunJob_2.put("conn_db_E45_2",
							context.conn_db_E45_2);

					parentContextMap_tRunJob_2.put("conn_host_E45_2",
							context.conn_host_E45_2);

					parentContextMap_tRunJob_2.put("conn_port_E45_2",
							context.conn_port_E45_2);

					parentContextMap_tRunJob_2.put("conn_psw_E45_2",
							context.conn_psw_E45_2);

					parentContextMap_tRunJob_2.put("conn_schema_E45_2",
							context.conn_schema_E45_2);

					parentContextMap_tRunJob_2.put("conn_usr_E45_2",
							context.conn_usr_E45_2);

					parentContextMap_tRunJob_2.put("conn_db_E45_4",
							context.conn_db_E45_4);

					parentContextMap_tRunJob_2.put("conn_host_E45_4",
							context.conn_host_E45_4);

					parentContextMap_tRunJob_2.put("conn_port_E45_4",
							context.conn_port_E45_4);

					parentContextMap_tRunJob_2.put("conn_psw_E45_4",
							context.conn_psw_E45_4);

					parentContextMap_tRunJob_2.put("conn_schema_E45_4",
							context.conn_schema_E45_4);

					parentContextMap_tRunJob_2.put("conn_usr_E45_4",
							context.conn_usr_E45_4);

					parentContextMap_tRunJob_2
							.put("ambiente", context.ambiente);

					parentContextMap_tRunJob_2.put("directory_talend",
							context.directory_talend);

					parentContextMap_tRunJob_2.put("numero_minuti_avviso",
							context.numero_minuti_avviso);

					parentContextMap_tRunJob_2.put("numero_ore_trigger_batch",
							context.numero_ore_trigger_batch);

					Object obj_tRunJob_2 = null;

					obj_tRunJob_2 = "2";
					paraList_tRunJob_2
							.add("--context_param codice="
									+ RuntimeUtils
											.tRunJobConvertContext(obj_tRunJob_2));
					parentContextMap_tRunJob_2.put("codice", obj_tRunJob_2);

					obj_tRunJob_2 = LOG_JOB.message;
					paraList_tRunJob_2
							.add("--context_param descrizione="
									+ RuntimeUtils
											.tRunJobConvertContext(obj_tRunJob_2));
					parentContextMap_tRunJob_2
							.put("descrizione", obj_tRunJob_2);

					obj_tRunJob_2 = this.exception;
					paraList_tRunJob_2
							.add("--context_param exception="
									+ RuntimeUtils
											.tRunJobConvertContext(obj_tRunJob_2));
					parentContextMap_tRunJob_2.put("exception", obj_tRunJob_2);

					allinea_database.manage_log_0_1.Manage_Log childJob_tRunJob_2 = new allinea_database.manage_log_0_1.Manage_Log();
					// pass DataSources
					java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (null != talendDataSources_tRunJob_2) {
						java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
						for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
								.entrySet()) {
							dataSources_tRunJob_2.put(
									talendDataSourceEntry_tRunJob_2.getKey(),
									talendDataSourceEntry_tRunJob_2.getValue()
											.getRawDataSource());
						}
						childJob_tRunJob_2
								.setDataSources(dataSources_tRunJob_2);
					}

					childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;

					String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
							.runJob((String[]) paraList_tRunJob_2
									.toArray(new String[paraList_tRunJob_2
											.size()]));

					errorCode = childJob_tRunJob_2.getErrorCode();

					if (childJob_tRunJob_2.getErrorCode() == null) {
						globalMap.put(
								"tRunJob_2_CHILD_RETURN_CODE",
								childJob_tRunJob_2.getStatus() != null
										&& ("failure")
												.equals(childJob_tRunJob_2
														.getStatus()) ? 1 : 0);
					} else {
						globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
								childJob_tRunJob_2.getErrorCode());
					}
					if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
						globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",
								childJob_tRunJob_2.getExceptionStackTrace());
					}

					tos_count_tRunJob_2++;

					/**
					 * [tRunJob_2 main ] stop
					 */

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				tStatCatcher_1
						.addMessage(
								"end",
								"tRunJob_2",
								end_Hash.get("tRunJob_2")
										- start_Hash.get("tRunJob_2"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tRunJob_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tRunJob_2 finally ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Main_Allinea_Database Main_Allinea_DatabaseClass = new Main_Allinea_Database();

		int exitCode = Main_Allinea_DatabaseClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Main_Allinea_Database.class
					.getClassLoader().getResourceAsStream(
							"allinea_database/main_allinea_database_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.conn_db_900_6 = (String) context
					.getProperty("conn_db_900_6");
			context.conn_host_900_6 = (String) context
					.getProperty("conn_host_900_6");
			context.conn_port_900_6 = (String) context
					.getProperty("conn_port_900_6");
			context.conn_psw_900_6 = (String) context
					.getProperty("conn_psw_900_6");
			context.conn_schema_900_6 = (String) context
					.getProperty("conn_schema_900_6");
			context.conn_usr_900_6 = (String) context
					.getProperty("conn_usr_900_6");
			context.conn_db_E45_1 = (String) context
					.getProperty("conn_db_E45_1");
			context.conn_host_E45_1 = (String) context
					.getProperty("conn_host_E45_1");
			context.conn_port_E45_1 = (String) context
					.getProperty("conn_port_E45_1");
			context.conn_psw_E45_1 = (String) context
					.getProperty("conn_psw_E45_1");
			context.conn_schema_E45_1 = (String) context
					.getProperty("conn_schema_E45_1");
			context.conn_usr_E45_1 = (String) context
					.getProperty("conn_usr_E45_1");
			context.conn_db_E45_2 = (String) context
					.getProperty("conn_db_E45_2");
			context.conn_host_E45_2 = (String) context
					.getProperty("conn_host_E45_2");
			context.conn_port_E45_2 = (String) context
					.getProperty("conn_port_E45_2");
			context.conn_psw_E45_2 = (String) context
					.getProperty("conn_psw_E45_2");
			context.conn_schema_E45_2 = (String) context
					.getProperty("conn_schema_E45_2");
			context.conn_usr_E45_2 = (String) context
					.getProperty("conn_usr_E45_2");
			context.conn_db_E45_4 = (String) context
					.getProperty("conn_db_E45_4");
			context.conn_host_E45_4 = (String) context
					.getProperty("conn_host_E45_4");
			context.conn_port_E45_4 = (String) context
					.getProperty("conn_port_E45_4");
			context.conn_psw_E45_4 = (String) context
					.getProperty("conn_psw_E45_4");
			context.conn_schema_E45_4 = (String) context
					.getProperty("conn_schema_E45_4");
			context.conn_usr_E45_4 = (String) context
					.getProperty("conn_usr_E45_4");
			context.ambiente = (String) context.getProperty("ambiente");
			context.directory_talend = (String) context
					.getProperty("directory_talend");
			try {
				context.numero_minuti_avviso = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("numero_minuti_avviso"));
			} catch (NumberFormatException e) {
				context.numero_minuti_avviso = null;
			}
			try {
				context.numero_ore_trigger_batch = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("numero_ore_trigger_batch"));
			} catch (NumberFormatException e) {
				context.numero_ore_trigger_batch = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("conn_db_900_6")) {
				context.conn_db_900_6 = (String) parentContextMap
						.get("conn_db_900_6");
			}
			if (parentContextMap.containsKey("conn_host_900_6")) {
				context.conn_host_900_6 = (String) parentContextMap
						.get("conn_host_900_6");
			}
			if (parentContextMap.containsKey("conn_port_900_6")) {
				context.conn_port_900_6 = (String) parentContextMap
						.get("conn_port_900_6");
			}
			if (parentContextMap.containsKey("conn_psw_900_6")) {
				context.conn_psw_900_6 = (String) parentContextMap
						.get("conn_psw_900_6");
			}
			if (parentContextMap.containsKey("conn_schema_900_6")) {
				context.conn_schema_900_6 = (String) parentContextMap
						.get("conn_schema_900_6");
			}
			if (parentContextMap.containsKey("conn_usr_900_6")) {
				context.conn_usr_900_6 = (String) parentContextMap
						.get("conn_usr_900_6");
			}
			if (parentContextMap.containsKey("conn_db_E45_1")) {
				context.conn_db_E45_1 = (String) parentContextMap
						.get("conn_db_E45_1");
			}
			if (parentContextMap.containsKey("conn_host_E45_1")) {
				context.conn_host_E45_1 = (String) parentContextMap
						.get("conn_host_E45_1");
			}
			if (parentContextMap.containsKey("conn_port_E45_1")) {
				context.conn_port_E45_1 = (String) parentContextMap
						.get("conn_port_E45_1");
			}
			if (parentContextMap.containsKey("conn_psw_E45_1")) {
				context.conn_psw_E45_1 = (String) parentContextMap
						.get("conn_psw_E45_1");
			}
			if (parentContextMap.containsKey("conn_schema_E45_1")) {
				context.conn_schema_E45_1 = (String) parentContextMap
						.get("conn_schema_E45_1");
			}
			if (parentContextMap.containsKey("conn_usr_E45_1")) {
				context.conn_usr_E45_1 = (String) parentContextMap
						.get("conn_usr_E45_1");
			}
			if (parentContextMap.containsKey("conn_db_E45_2")) {
				context.conn_db_E45_2 = (String) parentContextMap
						.get("conn_db_E45_2");
			}
			if (parentContextMap.containsKey("conn_host_E45_2")) {
				context.conn_host_E45_2 = (String) parentContextMap
						.get("conn_host_E45_2");
			}
			if (parentContextMap.containsKey("conn_port_E45_2")) {
				context.conn_port_E45_2 = (String) parentContextMap
						.get("conn_port_E45_2");
			}
			if (parentContextMap.containsKey("conn_psw_E45_2")) {
				context.conn_psw_E45_2 = (String) parentContextMap
						.get("conn_psw_E45_2");
			}
			if (parentContextMap.containsKey("conn_schema_E45_2")) {
				context.conn_schema_E45_2 = (String) parentContextMap
						.get("conn_schema_E45_2");
			}
			if (parentContextMap.containsKey("conn_usr_E45_2")) {
				context.conn_usr_E45_2 = (String) parentContextMap
						.get("conn_usr_E45_2");
			}
			if (parentContextMap.containsKey("conn_db_E45_4")) {
				context.conn_db_E45_4 = (String) parentContextMap
						.get("conn_db_E45_4");
			}
			if (parentContextMap.containsKey("conn_host_E45_4")) {
				context.conn_host_E45_4 = (String) parentContextMap
						.get("conn_host_E45_4");
			}
			if (parentContextMap.containsKey("conn_port_E45_4")) {
				context.conn_port_E45_4 = (String) parentContextMap
						.get("conn_port_E45_4");
			}
			if (parentContextMap.containsKey("conn_psw_E45_4")) {
				context.conn_psw_E45_4 = (String) parentContextMap
						.get("conn_psw_E45_4");
			}
			if (parentContextMap.containsKey("conn_schema_E45_4")) {
				context.conn_schema_E45_4 = (String) parentContextMap
						.get("conn_schema_E45_4");
			}
			if (parentContextMap.containsKey("conn_usr_E45_4")) {
				context.conn_usr_E45_4 = (String) parentContextMap
						.get("conn_usr_E45_4");
			}
			if (parentContextMap.containsKey("ambiente")) {
				context.ambiente = (String) parentContextMap.get("ambiente");
			}
			if (parentContextMap.containsKey("directory_talend")) {
				context.directory_talend = (String) parentContextMap
						.get("directory_talend");
			}
			if (parentContextMap.containsKey("numero_minuti_avviso")) {
				context.numero_minuti_avviso = (Integer) parentContextMap
						.get("numero_minuti_avviso");
			}
			if (parentContextMap.containsKey("numero_ore_trigger_batch")) {
				context.numero_ore_trigger_batch = (Integer) parentContextMap
						.get("numero_ore_trigger_batch");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_1) {
			globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

			e_tJava_1.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_2) {
			globalMap.put("tJava_2_SUBPROCESS_STATE", -1);

			e_tJava_2.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_3) {
			globalMap.put("tJava_3_SUBPROCESS_STATE", -1);

			e_tJava_3.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : Main_Allinea_Database");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status,
				(end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 150119 characters generated by Talend Open Studio for Data Integration on the
 * March 1, 2017 9:29:19 AM CET
 ************************************************************************************************/
