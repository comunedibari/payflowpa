// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package allinea_database.allinea_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_13
//import java.util.List;

//the import part of tLibraryLoad_1

//the import part of tJava_12
//import java.util.List;

//the import part of tJava_11
//import java.util.List;

//the import part of tJava_10
//import java.util.List;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_15
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_3
import java.util.*;

//the import part of tJava_4
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_6
//import java.util.List;

//the import part of tJava_7
//import java.util.List;

//the import part of tJava_8
//import java.util.List;

//the import part of tJava_9
//import java.util.List;

//the import part of tJava_14
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: Allinea Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.6.0.20141024_1545
 * @status 
 */
public class Allinea implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (conn_db_900_6 != null) {

				this.setProperty("conn_db_900_6", conn_db_900_6.toString());

			}

			if (conn_host_900_6 != null) {

				this.setProperty("conn_host_900_6", conn_host_900_6.toString());

			}

			if (conn_port_900_6 != null) {

				this.setProperty("conn_port_900_6", conn_port_900_6.toString());

			}

			if (conn_psw_900_6 != null) {

				this.setProperty("conn_psw_900_6", conn_psw_900_6.toString());

			}

			if (conn_schema_900_6 != null) {

				this.setProperty("conn_schema_900_6",
						conn_schema_900_6.toString());

			}

			if (conn_usr_900_6 != null) {

				this.setProperty("conn_usr_900_6", conn_usr_900_6.toString());

			}

			if (conn_db_E45_1 != null) {

				this.setProperty("conn_db_E45_1", conn_db_E45_1.toString());

			}

			if (conn_host_E45_1 != null) {

				this.setProperty("conn_host_E45_1", conn_host_E45_1.toString());

			}

			if (conn_port_E45_1 != null) {

				this.setProperty("conn_port_E45_1", conn_port_E45_1.toString());

			}

			if (conn_psw_E45_1 != null) {

				this.setProperty("conn_psw_E45_1", conn_psw_E45_1.toString());

			}

			if (conn_schema_E45_1 != null) {

				this.setProperty("conn_schema_E45_1",
						conn_schema_E45_1.toString());

			}

			if (conn_usr_E45_1 != null) {

				this.setProperty("conn_usr_E45_1", conn_usr_E45_1.toString());

			}

			if (conn_db_E45_2 != null) {

				this.setProperty("conn_db_E45_2", conn_db_E45_2.toString());

			}

			if (conn_host_E45_2 != null) {

				this.setProperty("conn_host_E45_2", conn_host_E45_2.toString());

			}

			if (conn_port_E45_2 != null) {

				this.setProperty("conn_port_E45_2", conn_port_E45_2.toString());

			}

			if (conn_psw_E45_2 != null) {

				this.setProperty("conn_psw_E45_2", conn_psw_E45_2.toString());

			}

			if (conn_schema_E45_2 != null) {

				this.setProperty("conn_schema_E45_2",
						conn_schema_E45_2.toString());

			}

			if (conn_usr_E45_2 != null) {

				this.setProperty("conn_usr_E45_2", conn_usr_E45_2.toString());

			}

			if (conn_db_E45_4 != null) {

				this.setProperty("conn_db_E45_4", conn_db_E45_4.toString());

			}

			if (conn_host_E45_4 != null) {

				this.setProperty("conn_host_E45_4", conn_host_E45_4.toString());

			}

			if (conn_port_E45_4 != null) {

				this.setProperty("conn_port_E45_4", conn_port_E45_4.toString());

			}

			if (conn_psw_E45_4 != null) {

				this.setProperty("conn_psw_E45_4", conn_psw_E45_4.toString());

			}

			if (conn_schema_E45_4 != null) {

				this.setProperty("conn_schema_E45_4",
						conn_schema_E45_4.toString());

			}

			if (conn_usr_E45_4 != null) {

				this.setProperty("conn_usr_E45_4", conn_usr_E45_4.toString());

			}

			if (ambiente != null) {

				this.setProperty("ambiente", ambiente.toString());

			}

			if (directory_talend != null) {

				this.setProperty("directory_talend",
						directory_talend.toString());

			}

			if (numero_minuti_avviso != null) {

				this.setProperty("numero_minuti_avviso",
						numero_minuti_avviso.toString());

			}

			if (numero_ore_trigger_batch != null) {

				this.setProperty("numero_ore_trigger_batch",
						numero_ore_trigger_batch.toString());

			}

		}

		public String conn_db_900_6;

		public String getConn_db_900_6() {
			return this.conn_db_900_6;
		}

		public String conn_host_900_6;

		public String getConn_host_900_6() {
			return this.conn_host_900_6;
		}

		public String conn_port_900_6;

		public String getConn_port_900_6() {
			return this.conn_port_900_6;
		}

		public String conn_psw_900_6;

		public String getConn_psw_900_6() {
			return this.conn_psw_900_6;
		}

		public String conn_schema_900_6;

		public String getConn_schema_900_6() {
			return this.conn_schema_900_6;
		}

		public String conn_usr_900_6;

		public String getConn_usr_900_6() {
			return this.conn_usr_900_6;
		}

		public String conn_db_E45_1;

		public String getConn_db_E45_1() {
			return this.conn_db_E45_1;
		}

		public String conn_host_E45_1;

		public String getConn_host_E45_1() {
			return this.conn_host_E45_1;
		}

		public String conn_port_E45_1;

		public String getConn_port_E45_1() {
			return this.conn_port_E45_1;
		}

		public String conn_psw_E45_1;

		public String getConn_psw_E45_1() {
			return this.conn_psw_E45_1;
		}

		public String conn_schema_E45_1;

		public String getConn_schema_E45_1() {
			return this.conn_schema_E45_1;
		}

		public String conn_usr_E45_1;

		public String getConn_usr_E45_1() {
			return this.conn_usr_E45_1;
		}

		public String conn_db_E45_2;

		public String getConn_db_E45_2() {
			return this.conn_db_E45_2;
		}

		public String conn_host_E45_2;

		public String getConn_host_E45_2() {
			return this.conn_host_E45_2;
		}

		public String conn_port_E45_2;

		public String getConn_port_E45_2() {
			return this.conn_port_E45_2;
		}

		public String conn_psw_E45_2;

		public String getConn_psw_E45_2() {
			return this.conn_psw_E45_2;
		}

		public String conn_schema_E45_2;

		public String getConn_schema_E45_2() {
			return this.conn_schema_E45_2;
		}

		public String conn_usr_E45_2;

		public String getConn_usr_E45_2() {
			return this.conn_usr_E45_2;
		}

		public String conn_db_E45_4;

		public String getConn_db_E45_4() {
			return this.conn_db_E45_4;
		}

		public String conn_host_E45_4;

		public String getConn_host_E45_4() {
			return this.conn_host_E45_4;
		}

		public String conn_port_E45_4;

		public String getConn_port_E45_4() {
			return this.conn_port_E45_4;
		}

		public String conn_psw_E45_4;

		public String getConn_psw_E45_4() {
			return this.conn_psw_E45_4;
		}

		public String conn_schema_E45_4;

		public String getConn_schema_E45_4() {
			return this.conn_schema_E45_4;
		}

		public String conn_usr_E45_4;

		public String getConn_usr_E45_4() {
			return this.conn_usr_E45_4;
		}

		public String ambiente;

		public String getAmbiente() {
			return this.ambiente;
		}

		public String directory_talend;

		public String getDirectory_talend() {
			return this.directory_talend;
		}

		public Integer numero_minuti_avviso;

		public Integer getNumero_minuti_avviso() {
			return this.numero_minuti_avviso;
		}

		public Integer numero_ore_trigger_batch;

		public Integer getNumero_ore_trigger_batch() {
			return this.numero_ore_trigger_batch;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Allinea";
	private final String projectName = "ALLINEA_DATABASE";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils(
			"_cjz1YKi2EeW5YPVxY5qP5g", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Allinea.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Allinea.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				} catch (TalendException e) {
					// do nothing
				}

			}
		}
	}

	public void tPostgresqlConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		try {

			errorCode = null;
			tJava_10Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tPostgresqlConnection_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlConnection_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		try {

			errorCode = null;
			tJava_11Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tPostgresqlConnection_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlConnection_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		try {

			errorCode = null;
			tJava_12Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tPostgresqlConnection_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlConnection_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		try {

			errorCode = null;
			tJava_13Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tPostgresqlConnection_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_15_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlRow_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlRow_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRowGenerator_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRowGenerator_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tRowGenerator_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tRowGenerator_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRowGenerator_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tRowGenerator_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRowGenerator_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tRowGenerator_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tRowGenerator_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tRowGenerator_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_23_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_11_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_12_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_20_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_16_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlCommit_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlCommit_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlRollback_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlRollback_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlCommit_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlRollback_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlRollback_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tStatCatcher_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLog4JCatch_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_26_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_26_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_27_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_27_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_5_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_19_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_24_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_24_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_23_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_23_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_23_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_25_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_22_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_22_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_22_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_9_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row17_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row18_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row26_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row30_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_26_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row31_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_27_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row22_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row6_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row7_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row8_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row13_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row14_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row21_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row24_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_19_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row29_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_24_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_ente_tipo_dovuto_error(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_23_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row19_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_pa_ente_tipo_dovuto_error(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_22_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row10_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlConnection_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_4_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_13_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_12_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_11_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_10_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_15_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlRow_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlRow_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRowGenerator_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRowGenerator_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRowGenerator_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRowGenerator_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_3_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_11_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_12_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_8_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_20_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_16_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_9_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlCommit_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlRollback_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlCommit_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlRollback_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tStatCatcher_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_14_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_13_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_14_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_21_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_26_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_27_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_5_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_6_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_7_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_10_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_17_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_18_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_19_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_24_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_23_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_25_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_22_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_9_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_1", false);
				start_Hash.put("tPostgresqlConnection_1",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlConnection_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlConnection_1";

				int tos_count_tPostgresqlConnection_1 = 0;

				String url_tPostgresqlConnection_1 = "jdbc:postgresql://"
						+ context.conn_host_E45_1 + ":"
						+ context.conn_port_E45_1 + "/" + context.conn_db_E45_1
						+ "?currentSchema=" + context.conn_schema_E45_1;

				String dbUser_tPostgresqlConnection_1 = context.conn_usr_E45_1;

				final String decryptedPassword_tPostgresqlConnection_1 = context.conn_psw_E45_1;
				String dbPwd_tPostgresqlConnection_1 = decryptedPassword_tPostgresqlConnection_1;

				java.sql.Connection conn_tPostgresqlConnection_1 = null;

				String driverClass_tPostgresqlConnection_1 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlConnection_1);

				conn_tPostgresqlConnection_1 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_1,
								dbUser_tPostgresqlConnection_1,
								dbPwd_tPostgresqlConnection_1);

				globalMap.put("conn_tPostgresqlConnection_1",
						conn_tPostgresqlConnection_1);
				if (null != conn_tPostgresqlConnection_1) {

					conn_tPostgresqlConnection_1.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_1",
						context.conn_schema_E45_1);

				globalMap.put("conn_" + "tPostgresqlConnection_1",
						conn_tPostgresqlConnection_1);

				/**
				 * [tPostgresqlConnection_1 begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_1 main ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				tos_count_tPostgresqlConnection_1++;

				/**
				 * [tPostgresqlConnection_1 main ] stop
				 */

				/**
				 * [tPostgresqlConnection_1 end ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				ok_Hash.put("tPostgresqlConnection_1", true);
				end_Hash.put("tPostgresqlConnection_1",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlConnection_1",
						end_Hash.get("tPostgresqlConnection_1")
								- start_Hash.get("tPostgresqlConnection_1"));
				tStatCatcher_1Process(globalMap);
				tPostgresqlConnection_2Process(globalMap);

				/**
				 * [tPostgresqlConnection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlConnection_1 finally ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				/**
				 * [tPostgresqlConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlConnection_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_2", false);
				start_Hash.put("tPostgresqlConnection_2",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlConnection_2");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlConnection_2";

				int tos_count_tPostgresqlConnection_2 = 0;

				String url_tPostgresqlConnection_2 = "jdbc:postgresql://"
						+ context.conn_host_E45_2 + ":"
						+ context.conn_port_E45_2 + "/" + context.conn_db_E45_2
						+ "?currentSchema=" + context.conn_schema_E45_2;

				String dbUser_tPostgresqlConnection_2 = context.conn_usr_E45_2;

				final String decryptedPassword_tPostgresqlConnection_2 = context.conn_psw_E45_2;
				String dbPwd_tPostgresqlConnection_2 = decryptedPassword_tPostgresqlConnection_2;

				java.sql.Connection conn_tPostgresqlConnection_2 = null;

				String driverClass_tPostgresqlConnection_2 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlConnection_2);

				conn_tPostgresqlConnection_2 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_2,
								dbUser_tPostgresqlConnection_2,
								dbPwd_tPostgresqlConnection_2);

				globalMap.put("conn_tPostgresqlConnection_2",
						conn_tPostgresqlConnection_2);
				if (null != conn_tPostgresqlConnection_2) {

					conn_tPostgresqlConnection_2.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_2",
						context.conn_schema_E45_2);

				globalMap.put("conn_" + "tPostgresqlConnection_2",
						conn_tPostgresqlConnection_2);

				/**
				 * [tPostgresqlConnection_2 begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_2 main ] start
				 */

				currentComponent = "tPostgresqlConnection_2";

				tos_count_tPostgresqlConnection_2++;

				/**
				 * [tPostgresqlConnection_2 main ] stop
				 */

				/**
				 * [tPostgresqlConnection_2 end ] start
				 */

				currentComponent = "tPostgresqlConnection_2";

				ok_Hash.put("tPostgresqlConnection_2", true);
				end_Hash.put("tPostgresqlConnection_2",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlConnection_2",
						end_Hash.get("tPostgresqlConnection_2")
								- start_Hash.get("tPostgresqlConnection_2"));
				tStatCatcher_1Process(globalMap);
				tPostgresqlConnection_3Process(globalMap);

				/**
				 * [tPostgresqlConnection_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlConnection_2 finally ] start
				 */

				currentComponent = "tPostgresqlConnection_2";

				/**
				 * [tPostgresqlConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlConnection_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_3", false);
				start_Hash.put("tPostgresqlConnection_3",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlConnection_3");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlConnection_3";

				int tos_count_tPostgresqlConnection_3 = 0;

				String url_tPostgresqlConnection_3 = "jdbc:postgresql://"
						+ context.conn_host_E45_4 + ":"
						+ context.conn_port_E45_4 + "/" + context.conn_db_E45_4
						+ "?currentSchema=" + context.conn_schema_E45_4;

				String dbUser_tPostgresqlConnection_3 = context.conn_usr_E45_4;

				final String decryptedPassword_tPostgresqlConnection_3 = context.conn_psw_E45_4;
				String dbPwd_tPostgresqlConnection_3 = decryptedPassword_tPostgresqlConnection_3;

				java.sql.Connection conn_tPostgresqlConnection_3 = null;

				String driverClass_tPostgresqlConnection_3 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlConnection_3);

				conn_tPostgresqlConnection_3 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_3,
								dbUser_tPostgresqlConnection_3,
								dbPwd_tPostgresqlConnection_3);

				globalMap.put("conn_tPostgresqlConnection_3",
						conn_tPostgresqlConnection_3);
				if (null != conn_tPostgresqlConnection_3) {

					conn_tPostgresqlConnection_3.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_3",
						context.conn_schema_E45_4);

				globalMap.put("conn_" + "tPostgresqlConnection_3",
						conn_tPostgresqlConnection_3);

				/**
				 * [tPostgresqlConnection_3 begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_3 main ] start
				 */

				currentComponent = "tPostgresqlConnection_3";

				tos_count_tPostgresqlConnection_3++;

				/**
				 * [tPostgresqlConnection_3 main ] stop
				 */

				/**
				 * [tPostgresqlConnection_3 end ] start
				 */

				currentComponent = "tPostgresqlConnection_3";

				ok_Hash.put("tPostgresqlConnection_3", true);
				end_Hash.put("tPostgresqlConnection_3",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlConnection_3",
						end_Hash.get("tPostgresqlConnection_3")
								- start_Hash.get("tPostgresqlConnection_3"));
				tStatCatcher_1Process(globalMap);
				tPostgresqlConnection_4Process(globalMap);

				/**
				 * [tPostgresqlConnection_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlConnection_3 finally ] start
				 */

				currentComponent = "tPostgresqlConnection_3";

				/**
				 * [tPostgresqlConnection_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlConnection_3_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlConnection_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_4 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_4", false);
				start_Hash.put("tPostgresqlConnection_4",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlConnection_4");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlConnection_4";

				int tos_count_tPostgresqlConnection_4 = 0;

				String url_tPostgresqlConnection_4 = "jdbc:postgresql://"
						+ context.conn_host_900_6 + ":"
						+ context.conn_port_900_6 + "/" + context.conn_db_900_6
						+ "?currentSchema=" + context.conn_schema_900_6;

				String dbUser_tPostgresqlConnection_4 = context.conn_usr_900_6;

				final String decryptedPassword_tPostgresqlConnection_4 = context.conn_psw_900_6;
				String dbPwd_tPostgresqlConnection_4 = decryptedPassword_tPostgresqlConnection_4;

				java.sql.Connection conn_tPostgresqlConnection_4 = null;

				String driverClass_tPostgresqlConnection_4 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlConnection_4);

				conn_tPostgresqlConnection_4 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_4,
								dbUser_tPostgresqlConnection_4,
								dbPwd_tPostgresqlConnection_4);

				globalMap.put("conn_tPostgresqlConnection_4",
						conn_tPostgresqlConnection_4);
				if (null != conn_tPostgresqlConnection_4) {

					conn_tPostgresqlConnection_4.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_4",
						context.conn_schema_900_6);

				globalMap.put("conn_" + "tPostgresqlConnection_4",
						conn_tPostgresqlConnection_4);

				/**
				 * [tPostgresqlConnection_4 begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_4 main ] start
				 */

				currentComponent = "tPostgresqlConnection_4";

				tos_count_tPostgresqlConnection_4++;

				/**
				 * [tPostgresqlConnection_4 main ] stop
				 */

				/**
				 * [tPostgresqlConnection_4 end ] start
				 */

				currentComponent = "tPostgresqlConnection_4";

				ok_Hash.put("tPostgresqlConnection_4", true);
				end_Hash.put("tPostgresqlConnection_4",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlConnection_4",
						end_Hash.get("tPostgresqlConnection_4")
								- start_Hash.get("tPostgresqlConnection_4"));
				tStatCatcher_1Process(globalMap);
				tLibraryLoad_1Process(globalMap);

				/**
				 * [tPostgresqlConnection_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlConnection_4 finally ] start
				 */

				currentComponent = "tPostgresqlConnection_4";

				/**
				 * [tPostgresqlConnection_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlConnection_4_SUBPROCESS_STATE", 1);
	}

	public void tJava_13Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_13 begin ] start
				 */

				ok_Hash.put("tJava_13", false);
				start_Hash.put("tJava_13", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_13");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_13";

				int tos_count_tJava_13 = 0;

				globalMap.put("errorAllinea", true);
				// ((String)globalMap.get("tPostgresqlConnection_2_ERROR_MESSAGE"));

				/**
				 * [tJava_13 begin ] stop
				 */

				/**
				 * [tJava_13 main ] start
				 */

				currentComponent = "tJava_13";

				tos_count_tJava_13++;

				/**
				 * [tJava_13 main ] stop
				 */

				/**
				 * [tJava_13 end ] start
				 */

				currentComponent = "tJava_13";

				ok_Hash.put("tJava_13", true);
				end_Hash.put("tJava_13", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_13",
						end_Hash.get("tJava_13") - start_Hash.get("tJava_13"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tJava_13 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_13 finally ] start
				 */

				currentComponent = "tJava_13";

				/**
				 * [tJava_13 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_13_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tLibraryLoad_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */

				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */

				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tLibraryLoad_1",
						end_Hash.get("tLibraryLoad_1")
								- start_Hash.get("tLibraryLoad_1"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tLibraryLoad_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLibraryLoad_1 finally ] start
				 */

				currentComponent = "tLibraryLoad_1";

				/**
				 * [tLibraryLoad_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_12 begin ] start
				 */

				ok_Hash.put("tJava_12", false);
				start_Hash.put("tJava_12", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_12");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_12";

				int tos_count_tJava_12 = 0;

				globalMap.put("errorAllinea", true);
				// ((String)globalMap.get("tPostgresqlConnection_2_ERROR_MESSAGE"));

				/**
				 * [tJava_12 begin ] stop
				 */

				/**
				 * [tJava_12 main ] start
				 */

				currentComponent = "tJava_12";

				tos_count_tJava_12++;

				/**
				 * [tJava_12 main ] stop
				 */

				/**
				 * [tJava_12 end ] start
				 */

				currentComponent = "tJava_12";

				ok_Hash.put("tJava_12", true);
				end_Hash.put("tJava_12", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_12",
						end_Hash.get("tJava_12") - start_Hash.get("tJava_12"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tJava_12 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_12 finally ] start
				 */

				currentComponent = "tJava_12";

				/**
				 * [tJava_12 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}

	public void tJava_11Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_11 begin ] start
				 */

				ok_Hash.put("tJava_11", false);
				start_Hash.put("tJava_11", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_11");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_11";

				int tos_count_tJava_11 = 0;

				globalMap.put("errorAllinea", true);
				// ((String)globalMap.get("tPostgresqlConnection_2_ERROR_MESSAGE"));

				/**
				 * [tJava_11 begin ] stop
				 */

				/**
				 * [tJava_11 main ] start
				 */

				currentComponent = "tJava_11";

				tos_count_tJava_11++;

				/**
				 * [tJava_11 main ] stop
				 */

				/**
				 * [tJava_11 end ] start
				 */

				currentComponent = "tJava_11";

				ok_Hash.put("tJava_11", true);
				end_Hash.put("tJava_11", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_11",
						end_Hash.get("tJava_11") - start_Hash.get("tJava_11"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tJava_11 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_11 finally ] start
				 */

				currentComponent = "tJava_11";

				/**
				 * [tJava_11 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}

	public void tJava_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_10 begin ] start
				 */

				ok_Hash.put("tJava_10", false);
				start_Hash.put("tJava_10", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_10");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_10";

				int tos_count_tJava_10 = 0;

				globalMap.put("errorAllinea", true);
				// ((String)globalMap.get("tPostgresqlConnection_1_ERROR_MESSAGE"));

				/**
				 * [tJava_10 begin ] stop
				 */

				/**
				 * [tJava_10 main ] start
				 */

				currentComponent = "tJava_10";

				tos_count_tJava_10++;

				/**
				 * [tJava_10 main ] stop
				 */

				/**
				 * [tJava_10 end ] start
				 */

				currentComponent = "tJava_10";

				ok_Hash.put("tJava_10", true);
				end_Hash.put("tJava_10", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_10",
						end_Hash.get("tJava_10") - start_Hash.get("tJava_10"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tJava_10 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_10 finally ] start
				 */

				currentComponent = "tJava_10";

				/**
				 * [tJava_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_10_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				globalMap.put("errorAllinea", false);

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_1",
						end_Hash.get("tJava_1") - start_Hash.get("tJava_1"));
				tStatCatcher_1Process(globalMap);
				if (true) {

					tPostgresqlConnection_1Process(globalMap);
				}

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_15Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_15Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_15 begin ] start
				 */

				ok_Hash.put("tJava_15", false);
				start_Hash.put("tJava_15", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_15");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_15";

				int tos_count_tJava_15 = 0;

				java.sql.Connection conn_tPostgresqlConnection_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				conn_tPostgresqlConnection_1.setReadOnly(true);

				java.sql.Connection conn_tPostgresqlConnection_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_2");
				conn_tPostgresqlConnection_2.setReadOnly(true);

				/**
				 * [tJava_15 begin ] stop
				 */

				/**
				 * [tJava_15 main ] start
				 */

				currentComponent = "tJava_15";

				tos_count_tJava_15++;

				/**
				 * [tJava_15 main ] stop
				 */

				/**
				 * [tJava_15 end ] start
				 */

				currentComponent = "tJava_15";

				ok_Hash.put("tJava_15", true);
				end_Hash.put("tJava_15", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_15",
						end_Hash.get("tJava_15") - start_Hash.get("tJava_15"));
				tStatCatcher_1Process(globalMap);
				if (!(Boolean) globalMap.get("errorAllinea")) {

					tPostgresqlRow_2Process(globalMap);
				}

				if (!(Boolean) globalMap.get("errorAllinea")) {

					tPostgresqlRow_1Process(globalMap);
				}

				/**
				 * [tJava_15 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_15 finally ] start
				 */

				currentComponent = "tJava_15";

				/**
				 * [tJava_15 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_15_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlRow_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlRow_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlRow_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlRow_2", false);
				start_Hash.put("tPostgresqlRow_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlRow_2");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlRow_2";

				int tos_count_tPostgresqlRow_2 = 0;

				java.sql.Connection conn_tPostgresqlRow_2 = null;
				String query_tPostgresqlRow_2 = "";
				boolean whetherReject_tPostgresqlRow_2 = false;
				conn_tPostgresqlRow_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_3");

				java.sql.Statement stmt_tPostgresqlRow_2 = conn_tPostgresqlRow_2
						.createStatement();

				/**
				 * [tPostgresqlRow_2 begin ] stop
				 */

				/**
				 * [tPostgresqlRow_2 main ] start
				 */

				currentComponent = "tPostgresqlRow_2";

				query_tPostgresqlRow_2 = "SELECT pg_catalog.setval('mygov_ente_mygov_ente_id_seq', (select coalesce(max(mygov_ente_id), 1) from mygov_ente), (select count(1) > 0 from mygov_ente));\nSELECT pg_catalog.setval('mygov_ente_tipo_dovuto_mygov_ente_tipo_dovuto_id_seq', (select coalesce(max(mygov_ente_tipo_dovuto_id), 1) from mygov_ente_tipo_dovuto), (select count(1) > 0 from mygov_ente_tipo_dovuto));\nSELECT pg_catalog.setval('mygov_entepsp_mygov_entepsp_id_seq', (select coalesce(max(mygov_entepsp_id), 1) from mygov_entepsp), (select count(1) > 0 from mygov_entepsp));\nSELECT pg_catalog.setval('mygov_utente_mygov_utente_id_seq', (select coalesce(max(mygov_utente_id), 1) from mygov_utente), (select count(1) > 0 from mygov_utente));\nSELECT pg_catalog.setval('mygov_op_ente_tipo_dovuto_mygov_op_ente_tipo_dovuto_id_seq', (select coalesce(max(mygov_operatore_ente_tipo_dovuto_id), 1) from mygov_operatore_ente_tipo_dovuto), (select count(1) > 0 from mygov_operatore_ente_tipo_dovuto));\n";
				whetherReject_tPostgresqlRow_2 = false;
				globalMap.put("tPostgresqlRow_2_QUERY", query_tPostgresqlRow_2);
				try {
					stmt_tPostgresqlRow_2.execute(query_tPostgresqlRow_2);

				} catch (java.lang.Exception e) {
					whetherReject_tPostgresqlRow_2 = true;

					throw (e);

				}

				tos_count_tPostgresqlRow_2++;

				/**
				 * [tPostgresqlRow_2 main ] stop
				 */

				/**
				 * [tPostgresqlRow_2 end ] start
				 */

				currentComponent = "tPostgresqlRow_2";

				stmt_tPostgresqlRow_2.close();

				ok_Hash.put("tPostgresqlRow_2", true);
				end_Hash.put("tPostgresqlRow_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlRow_2",
						end_Hash.get("tPostgresqlRow_2")
								- start_Hash.get("tPostgresqlRow_2"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlRow_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlRow_2 finally ] start
				 */

				currentComponent = "tPostgresqlRow_2";

				/**
				 * [tPostgresqlRow_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlRow_2_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlRow_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlRow_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlRow_1", false);
				start_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlRow_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlRow_1";

				int tos_count_tPostgresqlRow_1 = 0;

				java.sql.Connection conn_tPostgresqlRow_1 = null;
				String query_tPostgresqlRow_1 = "";
				boolean whetherReject_tPostgresqlRow_1 = false;
				conn_tPostgresqlRow_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");

				java.sql.Statement stmt_tPostgresqlRow_1 = conn_tPostgresqlRow_1
						.createStatement();

				/**
				 * [tPostgresqlRow_1 begin ] stop
				 */

				/**
				 * [tPostgresqlRow_1 main ] start
				 */

				currentComponent = "tPostgresqlRow_1";

				query_tPostgresqlRow_1 = "SELECT pg_catalog.setval('applications_id_seq', (select coalesce(max(id_application), 1) from application), (select count(1) > 0 from application));\nSELECT pg_catalog.setval('permissions_id_seq', (select coalesce(max(id_permission), 1) from permission), (select count(1) > 0 from permission));\nSELECT pg_catalog.setval('roles_id_seq', (select coalesce(max(id_role), 1) from role), (select count(1) > 0 from role));\nSELECT pg_catalog.setval('tenants_id_seq', (select coalesce(max(id_tenant), 1) from tenant), (select count(1) > 0 from tenant));\nSELECT pg_catalog.setval('userroleappltenant_id_seq', (select coalesce(max(id_user_role_appl_tenant), 1) from user_role_appl_tenant), (select count(1) > 0 from user_role_appl_tenant));\nSELECT pg_catalog.setval('users_id_seq', (select coalesce(max(id_user), 1) from \"user\"), (select count(1) > 0 from \"user\"));";
				whetherReject_tPostgresqlRow_1 = false;
				globalMap.put("tPostgresqlRow_1_QUERY", query_tPostgresqlRow_1);
				try {
					stmt_tPostgresqlRow_1.execute(query_tPostgresqlRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tPostgresqlRow_1 = true;

					throw (e);

				}

				tos_count_tPostgresqlRow_1++;

				/**
				 * [tPostgresqlRow_1 main ] stop
				 */

				/**
				 * [tPostgresqlRow_1 end ] start
				 */

				currentComponent = "tPostgresqlRow_1";

				stmt_tPostgresqlRow_1.close();

				ok_Hash.put("tPostgresqlRow_1", true);
				end_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlRow_1",
						end_Hash.get("tPostgresqlRow_1")
								- start_Hash.get("tPostgresqlRow_1"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlRow_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlRow_1 finally ] start
				 */

				currentComponent = "tPostgresqlRow_1";

				/**
				 * [tPostgresqlRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_2");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				if ("failure".equalsIgnoreCase(status)) {
					globalMap.put("errorAllinea", true);
				}

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_2",
						end_Hash.get("tJava_2") - start_Hash.get("tJava_2"));
				tStatCatcher_1Process(globalMap);
				if (!(Boolean) globalMap.get("errorAllinea")) {

					tRowGenerator_1Process(globalMap);
				}

				/**
				 * [tJava_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public static class MAPPING_MYPIVOTStruct implements
			routines.system.IPersistableRow<MAPPING_MYPIVOTStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id_application;

		public long getId_application() {
			return this.id_application;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		public String application_code;

		public String getApplication_code() {
			return this.application_code;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_application;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final MAPPING_MYPIVOTStruct other = (MAPPING_MYPIVOTStruct) obj;

			if (this.id_application != other.id_application)
				return false;

			return true;
		}

		public void copyDataTo(MAPPING_MYPIVOTStruct other) {

			other.id_application = this.id_application;
			other.version = this.version;
			other.application_code = this.application_code;
			other.description = this.description;

		}

		public void copyKeysDataTo(MAPPING_MYPIVOTStruct other) {

			other.id_application = this.id_application;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.id_application = dis.readLong();

					this.version = dis.readInt();

					this.application_code = readString(dis);

					this.description = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id_application);

				// int

				dos.writeInt(this.version);

				// String

				writeString(this.application_code, dos);

				// String

				writeString(this.description, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_application=" + String.valueOf(id_application));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",application_code=" + application_code);
			sb.append(",description=" + description);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(MAPPING_MYPIVOTStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_application,
					other.id_application);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public String application_code;

		public String getApplication_code() {
			return this.application_code;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.application_code = readString(dis);

					this.description = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.application_code, dos);

				// String

				writeString(this.description, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("application_code=" + application_code);
			sb.append(",description=" + description);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				MAPPING_MYPIVOTStruct MAPPING_MYPIVOT = new MAPPING_MYPIVOTStruct();

				/**
				 * [tPostgresqlOutput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_1", false);
				start_Hash.put("tPostgresqlOutput_1",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlOutput_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlOutput_1";

				int tos_count_tPostgresqlOutput_1 = 0;

				String dbschema_tPostgresqlOutput_1 = null;
				dbschema_tPostgresqlOutput_1 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_4");

				String tableName_tPostgresqlOutput_1 = null;
				if (dbschema_tPostgresqlOutput_1 == null
						|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
					tableName_tPostgresqlOutput_1 = "application";
				} else {
					tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1
							+ "\".\"" + "application";
				}

				int updateKeyCount_tPostgresqlOutput_1 = 1;
				if (updateKeyCount_tPostgresqlOutput_1 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_1 = 0;
				int nb_line_update_tPostgresqlOutput_1 = 0;
				int nb_line_inserted_tPostgresqlOutput_1 = 0;
				int nb_line_deleted_tPostgresqlOutput_1 = 0;
				int nb_line_rejected_tPostgresqlOutput_1 = 0;

				int deletedCount_tPostgresqlOutput_1 = 0;
				int updatedCount_tPostgresqlOutput_1 = 0;
				int insertedCount_tPostgresqlOutput_1 = 0;
				int rejectedCount_tPostgresqlOutput_1 = 0;

				boolean whetherReject_tPostgresqlOutput_1 = false;

				java.sql.Connection conn_tPostgresqlOutput_1 = null;

				conn_tPostgresqlOutput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");

				int batchSize_tPostgresqlOutput_1 = 10000;
				int batchSizeCounter_tPostgresqlOutput_1 = 0;

				int count_tPostgresqlOutput_1 = 0;
				String update_tPostgresqlOutput_1 = "UPDATE \""
						+ tableName_tPostgresqlOutput_1
						+ "\" SET \"description\" = ? WHERE \"application_code\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(update_tPostgresqlOutput_1);
				String insert_tPostgresqlOutput_1 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_1
						+ "\" (\""
						+ "id_application"
						+ "\",\"version\",\"application_code\",\"description\") VALUES ("
						+ "nextval('applications_id_seq')" + ",?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(insert_tPostgresqlOutput_1);

				/**
				 * [tPostgresqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				MAPPING_MYPIVOTStruct MAPPING_MYPIVOT_tmp = new MAPPING_MYPIVOTStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tRowGenerator_1 begin ] start
				 */

				ok_Hash.put("tRowGenerator_1", false);
				start_Hash.put("tRowGenerator_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tRowGenerator_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tRowGenerator_1";

				int tos_count_tRowGenerator_1 = 0;

				int nb_line_tRowGenerator_1 = 0;
				int nb_max_row_tRowGenerator_1 = 1;

				class tRowGenerator_1Randomizer {
					public String getRandomapplication_code() {

						return "MY_PIVOT";

					}

					public String getRandomdescription() {

						return "MY PIVOT";

					}
				}
				tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();

				for (int itRowGenerator_1 = 0; itRowGenerator_1 < nb_max_row_tRowGenerator_1; itRowGenerator_1++) {
					row1.application_code = randtRowGenerator_1
							.getRandomapplication_code();
					row1.description = randtRowGenerator_1
							.getRandomdescription();
					nb_line_tRowGenerator_1++;

					/**
					 * [tRowGenerator_1 begin ] stop
					 */

					/**
					 * [tRowGenerator_1 main ] start
					 */

					currentComponent = "tRowGenerator_1";

					tos_count_tRowGenerator_1++;

					/**
					 * [tRowGenerator_1 main ] stop
					 */

					/**
					 * [tMap_2 main ] start
					 */

					currentComponent = "tMap_2";

					boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_2 = false;
					boolean mainRowRejected_tMap_2 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
						// ###############################
						// # Output tables

						MAPPING_MYPIVOT = null;

						// # Output table : 'MAPPING_MYPIVOT'
						MAPPING_MYPIVOT_tmp.id_application = 0;
						MAPPING_MYPIVOT_tmp.version = 0;
						MAPPING_MYPIVOT_tmp.application_code = row1.application_code;
						MAPPING_MYPIVOT_tmp.description = row1.description;
						MAPPING_MYPIVOT = MAPPING_MYPIVOT_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_2 = false;

					tos_count_tMap_2++;

					/**
					 * [tMap_2 main ] stop
					 */
					// Start of branch "MAPPING_MYPIVOT"
					if (MAPPING_MYPIVOT != null) {

						/**
						 * [tPostgresqlOutput_1 main ] start
						 */

						currentComponent = "tPostgresqlOutput_1";

						whetherReject_tPostgresqlOutput_1 = false;
						int updateFlag_tPostgresqlOutput_1 = 0;
						if (MAPPING_MYPIVOT.description == null) {
							pstmtUpdate_tPostgresqlOutput_1.setNull(1,
									java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tPostgresqlOutput_1.setString(1,
									MAPPING_MYPIVOT.description);
						}

						if (MAPPING_MYPIVOT.application_code == null) {
							pstmtUpdate_tPostgresqlOutput_1.setNull(
									2 + count_tPostgresqlOutput_1,
									java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tPostgresqlOutput_1.setString(
									2 + count_tPostgresqlOutput_1,
									MAPPING_MYPIVOT.application_code);
						}

						try {

							updateFlag_tPostgresqlOutput_1 = pstmtUpdate_tPostgresqlOutput_1
									.executeUpdate();
							updatedCount_tPostgresqlOutput_1 = updatedCount_tPostgresqlOutput_1
									+ updateFlag_tPostgresqlOutput_1;

							if (updateFlag_tPostgresqlOutput_1 == 0) {

								pstmtInsert_tPostgresqlOutput_1.setInt(1,
										MAPPING_MYPIVOT.version);

								if (MAPPING_MYPIVOT.application_code == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1
											.setString(
													2,
													MAPPING_MYPIVOT.application_code);
								}

								if (MAPPING_MYPIVOT.description == null) {
									pstmtInsert_tPostgresqlOutput_1.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_1.setString(
											3, MAPPING_MYPIVOT.description);
								}

								insertedCount_tPostgresqlOutput_1 = insertedCount_tPostgresqlOutput_1
										+ pstmtInsert_tPostgresqlOutput_1
												.executeUpdate();
								nb_line_tPostgresqlOutput_1++;

							} else {
								nb_line_tPostgresqlOutput_1++;

							}
						} catch (java.lang.Exception e) {

							whetherReject_tPostgresqlOutput_1 = true;
							throw (e);
						}
						if (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1) {

						}

						tos_count_tPostgresqlOutput_1++;

						/**
						 * [tPostgresqlOutput_1 main ] stop
						 */

					} // End of branch "MAPPING_MYPIVOT"

					/**
					 * [tRowGenerator_1 end ] start
					 */

					currentComponent = "tRowGenerator_1";

				}
				globalMap.put("tRowGenerator_1_NB_LINE",
						nb_line_tRowGenerator_1);

				ok_Hash.put("tRowGenerator_1", true);
				end_Hash.put("tRowGenerator_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tRowGenerator_1",
						end_Hash.get("tRowGenerator_1")
								- start_Hash.get("tRowGenerator_1"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tRowGenerator_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 end ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				if (pstmtUpdate_tPostgresqlOutput_1 != null) {

					pstmtUpdate_tPostgresqlOutput_1.close();

				}
				if (pstmtInsert_tPostgresqlOutput_1 != null) {

					pstmtInsert_tPostgresqlOutput_1.close();

				}

				nb_line_deleted_tPostgresqlOutput_1 = nb_line_deleted_tPostgresqlOutput_1
						+ deletedCount_tPostgresqlOutput_1;
				nb_line_update_tPostgresqlOutput_1 = nb_line_update_tPostgresqlOutput_1
						+ updatedCount_tPostgresqlOutput_1;
				nb_line_inserted_tPostgresqlOutput_1 = nb_line_inserted_tPostgresqlOutput_1
						+ insertedCount_tPostgresqlOutput_1;
				nb_line_rejected_tPostgresqlOutput_1 = nb_line_rejected_tPostgresqlOutput_1
						+ rejectedCount_tPostgresqlOutput_1;

				globalMap.put("tPostgresqlOutput_1_NB_LINE",
						nb_line_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_1);

				ok_Hash.put("tPostgresqlOutput_1", true);
				end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlOutput_1",
						end_Hash.get("tPostgresqlOutput_1")
								- start_Hash.get("tPostgresqlOutput_1"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlOutput_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tRowGenerator_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tRowGenerator_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRowGenerator_1 finally ] start
				 */

				currentComponent = "tRowGenerator_1";

				/**
				 * [tRowGenerator_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				/**
				 * [tPostgresqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}

	public static class MAPPING_MYPAYStruct implements
			routines.system.IPersistableRow<MAPPING_MYPAYStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id_application;

		public long getId_application() {
			return this.id_application;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		public String application_code;

		public String getApplication_code() {
			return this.application_code;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_application;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final MAPPING_MYPAYStruct other = (MAPPING_MYPAYStruct) obj;

			if (this.id_application != other.id_application)
				return false;

			return true;
		}

		public void copyDataTo(MAPPING_MYPAYStruct other) {

			other.id_application = this.id_application;
			other.version = this.version;
			other.application_code = this.application_code;
			other.description = this.description;

		}

		public void copyKeysDataTo(MAPPING_MYPAYStruct other) {

			other.id_application = this.id_application;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.id_application = dis.readLong();

					this.version = dis.readInt();

					this.application_code = readString(dis);

					this.description = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id_application);

				// int

				dos.writeInt(this.version);

				// String

				writeString(this.application_code, dos);

				// String

				writeString(this.description, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_application=" + String.valueOf(id_application));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",application_code=" + application_code);
			sb.append(",description=" + description);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(MAPPING_MYPAYStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_application,
					other.id_application);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public String application_code;

		public String getApplication_code() {
			return this.application_code;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.application_code = readString(dis);

					this.description = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.application_code, dos);

				// String

				writeString(this.description, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("application_code=" + application_code);
			sb.append(",description=" + description);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRowGenerator_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();
				MAPPING_MYPAYStruct MAPPING_MYPAY = new MAPPING_MYPAYStruct();

				/**
				 * [tPostgresqlOutput_11 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_11", false);
				start_Hash.put("tPostgresqlOutput_11",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlOutput_11");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlOutput_11";

				int tos_count_tPostgresqlOutput_11 = 0;

				String dbschema_tPostgresqlOutput_11 = null;
				dbschema_tPostgresqlOutput_11 = (String) globalMap
						.get("schema_" + "tPostgresqlConnection_4");

				String tableName_tPostgresqlOutput_11 = null;
				if (dbschema_tPostgresqlOutput_11 == null
						|| dbschema_tPostgresqlOutput_11.trim().length() == 0) {
					tableName_tPostgresqlOutput_11 = "application";
				} else {
					tableName_tPostgresqlOutput_11 = dbschema_tPostgresqlOutput_11
							+ "\".\"" + "application";
				}

				int updateKeyCount_tPostgresqlOutput_11 = 1;
				if (updateKeyCount_tPostgresqlOutput_11 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_11 = 0;
				int nb_line_update_tPostgresqlOutput_11 = 0;
				int nb_line_inserted_tPostgresqlOutput_11 = 0;
				int nb_line_deleted_tPostgresqlOutput_11 = 0;
				int nb_line_rejected_tPostgresqlOutput_11 = 0;

				int deletedCount_tPostgresqlOutput_11 = 0;
				int updatedCount_tPostgresqlOutput_11 = 0;
				int insertedCount_tPostgresqlOutput_11 = 0;
				int rejectedCount_tPostgresqlOutput_11 = 0;

				boolean whetherReject_tPostgresqlOutput_11 = false;

				java.sql.Connection conn_tPostgresqlOutput_11 = null;

				conn_tPostgresqlOutput_11 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");

				int batchSize_tPostgresqlOutput_11 = 10000;
				int batchSizeCounter_tPostgresqlOutput_11 = 0;

				int count_tPostgresqlOutput_11 = 0;
				String update_tPostgresqlOutput_11 = "UPDATE \""
						+ tableName_tPostgresqlOutput_11
						+ "\" SET \"description\" = ? WHERE \"application_code\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_11 = conn_tPostgresqlOutput_11
						.prepareStatement(update_tPostgresqlOutput_11);
				String insert_tPostgresqlOutput_11 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_11
						+ "\" (\""
						+ "id_application"
						+ "\",\"version\",\"application_code\",\"description\") VALUES ("
						+ "nextval('applications_id_seq')" + ",?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_11 = conn_tPostgresqlOutput_11
						.prepareStatement(insert_tPostgresqlOutput_11);

				/**
				 * [tPostgresqlOutput_11 begin ] stop
				 */

				/**
				 * [tMap_18 begin ] start
				 */

				ok_Hash.put("tMap_18", false);
				start_Hash.put("tMap_18", System.currentTimeMillis());

				currentComponent = "tMap_18";

				int tos_count_tMap_18 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_18__Struct {
				}
				Var__tMap_18__Struct Var__tMap_18 = new Var__tMap_18__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				MAPPING_MYPAYStruct MAPPING_MYPAY_tmp = new MAPPING_MYPAYStruct();
				// ###############################

				/**
				 * [tMap_18 begin ] stop
				 */

				/**
				 * [tRowGenerator_3 begin ] start
				 */

				ok_Hash.put("tRowGenerator_3", false);
				start_Hash.put("tRowGenerator_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tRowGenerator_3");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tRowGenerator_3";

				int tos_count_tRowGenerator_3 = 0;

				int nb_line_tRowGenerator_3 = 0;
				int nb_max_row_tRowGenerator_3 = 1;

				class tRowGenerator_3Randomizer {
					public String getRandomapplication_code() {

						return "MY_PAY";

					}

					public String getRandomdescription() {

						return "MY PAY";

					}
				}
				tRowGenerator_3Randomizer randtRowGenerator_3 = new tRowGenerator_3Randomizer();

				for (int itRowGenerator_3 = 0; itRowGenerator_3 < nb_max_row_tRowGenerator_3; itRowGenerator_3++) {
					row12.application_code = randtRowGenerator_3
							.getRandomapplication_code();
					row12.description = randtRowGenerator_3
							.getRandomdescription();
					nb_line_tRowGenerator_3++;

					/**
					 * [tRowGenerator_3 begin ] stop
					 */

					/**
					 * [tRowGenerator_3 main ] start
					 */

					currentComponent = "tRowGenerator_3";

					tos_count_tRowGenerator_3++;

					/**
					 * [tRowGenerator_3 main ] stop
					 */

					/**
					 * [tMap_18 main ] start
					 */

					currentComponent = "tMap_18";

					boolean hasCasePrimitiveKeyWithNull_tMap_18 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_18 = false;
					boolean mainRowRejected_tMap_18 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_18__Struct Var = Var__tMap_18;// ###############################
						// ###############################
						// # Output tables

						MAPPING_MYPAY = null;

						// # Output table : 'MAPPING_MYPAY'
						MAPPING_MYPAY_tmp.id_application = 0;
						MAPPING_MYPAY_tmp.version = 0;
						MAPPING_MYPAY_tmp.application_code = row12.application_code;
						MAPPING_MYPAY_tmp.description = row12.description;
						MAPPING_MYPAY = MAPPING_MYPAY_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_18 = false;

					tos_count_tMap_18++;

					/**
					 * [tMap_18 main ] stop
					 */
					// Start of branch "MAPPING_MYPAY"
					if (MAPPING_MYPAY != null) {

						/**
						 * [tPostgresqlOutput_11 main ] start
						 */

						currentComponent = "tPostgresqlOutput_11";

						whetherReject_tPostgresqlOutput_11 = false;
						int updateFlag_tPostgresqlOutput_11 = 0;
						if (MAPPING_MYPAY.description == null) {
							pstmtUpdate_tPostgresqlOutput_11.setNull(1,
									java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tPostgresqlOutput_11.setString(1,
									MAPPING_MYPAY.description);
						}

						if (MAPPING_MYPAY.application_code == null) {
							pstmtUpdate_tPostgresqlOutput_11.setNull(
									2 + count_tPostgresqlOutput_11,
									java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tPostgresqlOutput_11.setString(
									2 + count_tPostgresqlOutput_11,
									MAPPING_MYPAY.application_code);
						}

						try {

							updateFlag_tPostgresqlOutput_11 = pstmtUpdate_tPostgresqlOutput_11
									.executeUpdate();
							updatedCount_tPostgresqlOutput_11 = updatedCount_tPostgresqlOutput_11
									+ updateFlag_tPostgresqlOutput_11;

							if (updateFlag_tPostgresqlOutput_11 == 0) {

								pstmtInsert_tPostgresqlOutput_11.setInt(1,
										MAPPING_MYPAY.version);

								if (MAPPING_MYPAY.application_code == null) {
									pstmtInsert_tPostgresqlOutput_11.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_11.setString(
											2, MAPPING_MYPAY.application_code);
								}

								if (MAPPING_MYPAY.description == null) {
									pstmtInsert_tPostgresqlOutput_11.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_11.setString(
											3, MAPPING_MYPAY.description);
								}

								insertedCount_tPostgresqlOutput_11 = insertedCount_tPostgresqlOutput_11
										+ pstmtInsert_tPostgresqlOutput_11
												.executeUpdate();
								nb_line_tPostgresqlOutput_11++;

							} else {
								nb_line_tPostgresqlOutput_11++;

							}
						} catch (java.lang.Exception e) {

							whetherReject_tPostgresqlOutput_11 = true;
							throw (e);
						}
						if (batchSize_tPostgresqlOutput_11 <= batchSizeCounter_tPostgresqlOutput_11) {

						}

						tos_count_tPostgresqlOutput_11++;

						/**
						 * [tPostgresqlOutput_11 main ] stop
						 */

					} // End of branch "MAPPING_MYPAY"

					/**
					 * [tRowGenerator_3 end ] start
					 */

					currentComponent = "tRowGenerator_3";

				}
				globalMap.put("tRowGenerator_3_NB_LINE",
						nb_line_tRowGenerator_3);

				ok_Hash.put("tRowGenerator_3", true);
				end_Hash.put("tRowGenerator_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tRowGenerator_3",
						end_Hash.get("tRowGenerator_3")
								- start_Hash.get("tRowGenerator_3"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tRowGenerator_3 end ] stop
				 */

				/**
				 * [tMap_18 end ] start
				 */

				currentComponent = "tMap_18";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_18", true);
				end_Hash.put("tMap_18", System.currentTimeMillis());

				/**
				 * [tMap_18 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_11 end ] start
				 */

				currentComponent = "tPostgresqlOutput_11";

				if (pstmtUpdate_tPostgresqlOutput_11 != null) {

					pstmtUpdate_tPostgresqlOutput_11.close();

				}
				if (pstmtInsert_tPostgresqlOutput_11 != null) {

					pstmtInsert_tPostgresqlOutput_11.close();

				}

				nb_line_deleted_tPostgresqlOutput_11 = nb_line_deleted_tPostgresqlOutput_11
						+ deletedCount_tPostgresqlOutput_11;
				nb_line_update_tPostgresqlOutput_11 = nb_line_update_tPostgresqlOutput_11
						+ updatedCount_tPostgresqlOutput_11;
				nb_line_inserted_tPostgresqlOutput_11 = nb_line_inserted_tPostgresqlOutput_11
						+ insertedCount_tPostgresqlOutput_11;
				nb_line_rejected_tPostgresqlOutput_11 = nb_line_rejected_tPostgresqlOutput_11
						+ rejectedCount_tPostgresqlOutput_11;

				globalMap.put("tPostgresqlOutput_11_NB_LINE",
						nb_line_tPostgresqlOutput_11);
				globalMap.put("tPostgresqlOutput_11_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_11);
				globalMap.put("tPostgresqlOutput_11_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_11);
				globalMap.put("tPostgresqlOutput_11_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_11);
				globalMap.put("tPostgresqlOutput_11_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_11);

				ok_Hash.put("tPostgresqlOutput_11", true);
				end_Hash.put("tPostgresqlOutput_11", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlOutput_11",
						end_Hash.get("tPostgresqlOutput_11")
								- start_Hash.get("tPostgresqlOutput_11"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlOutput_11 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRowGenerator_3 finally ] start
				 */

				currentComponent = "tRowGenerator_3";

				/**
				 * [tRowGenerator_3 finally ] stop
				 */

				/**
				 * [tMap_18 finally ] start
				 */

				currentComponent = "tMap_18";

				/**
				 * [tMap_18 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_11 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_11";

				/**
				 * [tPostgresqlOutput_11 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRowGenerator_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_3");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				if ("failure".equalsIgnoreCase(status)) {
					globalMap.put("errorAllinea", true);
				}

				List<String> listaRole = new ArrayList<String>();
				listaRole.add("ROLE_VISUAL");
				listaRole.add("ROLE_ADMIN");

				globalMap.put("listaRole", listaRole);

				Numeric.removeSequence("prog");

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_3",
						end_Hash.get("tJava_3") - start_Hash.get("tJava_3"));
				tStatCatcher_1Process(globalMap);
				if (!(Boolean) globalMap.get("errorAllinea")) {

					tRowGenerator_2Process(globalMap);
				}

				/**
				 * [tJava_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public static class MAPPING_ROLEStruct implements
			routines.system.IPersistableRow<MAPPING_ROLEStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id_role;

		public long getId_role() {
			return this.id_role;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		public String role_name;

		public String getRole_name() {
			return this.role_name;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_role;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final MAPPING_ROLEStruct other = (MAPPING_ROLEStruct) obj;

			if (this.id_role != other.id_role)
				return false;

			return true;
		}

		public void copyDataTo(MAPPING_ROLEStruct other) {

			other.id_role = this.id_role;
			other.version = this.version;
			other.role_name = this.role_name;

		}

		public void copyKeysDataTo(MAPPING_ROLEStruct other) {

			other.id_role = this.id_role;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.id_role = dis.readLong();

					this.version = dis.readInt();

					this.role_name = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id_role);

				// int

				dos.writeInt(this.version);

				// String

				writeString(this.role_name, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_role=" + String.valueOf(id_role));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",role_name=" + role_name);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(MAPPING_ROLEStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_role, other.id_role);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements
			routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public Integer sequence;

		public Integer getSequence() {
			return this.sequence;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.sequence = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.sequence, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("sequence=" + String.valueOf(sequence));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();
				MAPPING_ROLEStruct MAPPING_ROLE = new MAPPING_ROLEStruct();

				/**
				 * [tPostgresqlOutput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_2", false);
				start_Hash.put("tPostgresqlOutput_2",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlOutput_2");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlOutput_2";

				int tos_count_tPostgresqlOutput_2 = 0;

				String dbschema_tPostgresqlOutput_2 = null;
				dbschema_tPostgresqlOutput_2 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_4");

				String tableName_tPostgresqlOutput_2 = null;
				if (dbschema_tPostgresqlOutput_2 == null
						|| dbschema_tPostgresqlOutput_2.trim().length() == 0) {
					tableName_tPostgresqlOutput_2 = "role";
				} else {
					tableName_tPostgresqlOutput_2 = dbschema_tPostgresqlOutput_2
							+ "\".\"" + "role";
				}

				int updateKeyCount_tPostgresqlOutput_2 = 1;
				if (updateKeyCount_tPostgresqlOutput_2 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_2 = 0;
				int nb_line_update_tPostgresqlOutput_2 = 0;
				int nb_line_inserted_tPostgresqlOutput_2 = 0;
				int nb_line_deleted_tPostgresqlOutput_2 = 0;
				int nb_line_rejected_tPostgresqlOutput_2 = 0;

				int deletedCount_tPostgresqlOutput_2 = 0;
				int updatedCount_tPostgresqlOutput_2 = 0;
				int insertedCount_tPostgresqlOutput_2 = 0;
				int rejectedCount_tPostgresqlOutput_2 = 0;

				boolean whetherReject_tPostgresqlOutput_2 = false;

				java.sql.Connection conn_tPostgresqlOutput_2 = null;

				conn_tPostgresqlOutput_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");

				int batchSize_tPostgresqlOutput_2 = 10000;
				int batchSizeCounter_tPostgresqlOutput_2 = 0;

				int count_tPostgresqlOutput_2 = 0;
				String update_tPostgresqlOutput_2 = "UPDATE \""
						+ tableName_tPostgresqlOutput_2
						+ "\" SET \"role_name\" = ? WHERE \"role_name\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2
						.prepareStatement(update_tPostgresqlOutput_2);
				String insert_tPostgresqlOutput_2 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_2 + "\" (\"" + "id_role"
						+ "\",\"version\",\"role_name\") VALUES ("
						+ "nextval('roles_id_seq')" + ",?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2
						.prepareStatement(insert_tPostgresqlOutput_2);

				/**
				 * [tPostgresqlOutput_2 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tMap_3");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
					String role_name;
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				MAPPING_ROLEStruct MAPPING_ROLE_tmp = new MAPPING_ROLEStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tRowGenerator_2 begin ] start
				 */

				ok_Hash.put("tRowGenerator_2", false);
				start_Hash.put("tRowGenerator_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tRowGenerator_2");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tRowGenerator_2";

				int tos_count_tRowGenerator_2 = 0;

				int nb_line_tRowGenerator_2 = 0;
				int nb_max_row_tRowGenerator_2 = 2;

				class tRowGenerator_2Randomizer {
					public Integer getRandomsequence() {

						return Numeric.sequence("prog", 0, 1);

					}
				}
				tRowGenerator_2Randomizer randtRowGenerator_2 = new tRowGenerator_2Randomizer();

				for (int itRowGenerator_2 = 0; itRowGenerator_2 < nb_max_row_tRowGenerator_2; itRowGenerator_2++) {
					row11.sequence = randtRowGenerator_2.getRandomsequence();
					nb_line_tRowGenerator_2++;

					/**
					 * [tRowGenerator_2 begin ] stop
					 */

					/**
					 * [tRowGenerator_2 main ] start
					 */

					currentComponent = "tRowGenerator_2";

					tos_count_tRowGenerator_2++;

					/**
					 * [tRowGenerator_2 main ] stop
					 */

					/**
					 * [tMap_3 main ] start
					 */

					currentComponent = "tMap_3";

					boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_3 = false;
					boolean mainRowRejected_tMap_3 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_3__Struct Var = Var__tMap_3;
						Var.role_name = ((List<String>) globalMap
								.get("listaRole")).get(row11.sequence);// ###############################
						// ###############################
						// # Output tables

						MAPPING_ROLE = null;

						// # Output table : 'MAPPING_ROLE'
						MAPPING_ROLE_tmp.id_role = 0;
						MAPPING_ROLE_tmp.version = 0;
						MAPPING_ROLE_tmp.role_name = Var.role_name;
						MAPPING_ROLE = MAPPING_ROLE_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_3 = false;

					tos_count_tMap_3++;

					/**
					 * [tMap_3 main ] stop
					 */
					// Start of branch "MAPPING_ROLE"
					if (MAPPING_ROLE != null) {

						/**
						 * [tPostgresqlOutput_2 main ] start
						 */

						currentComponent = "tPostgresqlOutput_2";

						whetherReject_tPostgresqlOutput_2 = false;
						int updateFlag_tPostgresqlOutput_2 = 0;
						if (MAPPING_ROLE.role_name == null) {
							pstmtUpdate_tPostgresqlOutput_2.setNull(1,
									java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tPostgresqlOutput_2.setString(1,
									MAPPING_ROLE.role_name);
						}

						if (MAPPING_ROLE.role_name == null) {
							pstmtUpdate_tPostgresqlOutput_2.setNull(
									2 + count_tPostgresqlOutput_2,
									java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tPostgresqlOutput_2.setString(
									2 + count_tPostgresqlOutput_2,
									MAPPING_ROLE.role_name);
						}

						try {

							updateFlag_tPostgresqlOutput_2 = pstmtUpdate_tPostgresqlOutput_2
									.executeUpdate();
							updatedCount_tPostgresqlOutput_2 = updatedCount_tPostgresqlOutput_2
									+ updateFlag_tPostgresqlOutput_2;

							if (updateFlag_tPostgresqlOutput_2 == 0) {

								pstmtInsert_tPostgresqlOutput_2.setInt(1,
										MAPPING_ROLE.version);

								if (MAPPING_ROLE.role_name == null) {
									pstmtInsert_tPostgresqlOutput_2.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_2.setString(
											2, MAPPING_ROLE.role_name);
								}

								insertedCount_tPostgresqlOutput_2 = insertedCount_tPostgresqlOutput_2
										+ pstmtInsert_tPostgresqlOutput_2
												.executeUpdate();
								nb_line_tPostgresqlOutput_2++;

							} else {
								nb_line_tPostgresqlOutput_2++;

							}
						} catch (java.lang.Exception e) {

							whetherReject_tPostgresqlOutput_2 = true;
							throw (e);
						}
						if (batchSize_tPostgresqlOutput_2 <= batchSizeCounter_tPostgresqlOutput_2) {

						}

						tos_count_tPostgresqlOutput_2++;

						/**
						 * [tPostgresqlOutput_2 main ] stop
						 */

					} // End of branch "MAPPING_ROLE"

					/**
					 * [tRowGenerator_2 end ] start
					 */

					currentComponent = "tRowGenerator_2";

				}
				globalMap.put("tRowGenerator_2_NB_LINE",
						nb_line_tRowGenerator_2);

				ok_Hash.put("tRowGenerator_2", true);
				end_Hash.put("tRowGenerator_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tRowGenerator_2",
						end_Hash.get("tRowGenerator_2")
								- start_Hash.get("tRowGenerator_2"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tRowGenerator_2 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tMap_3",
						end_Hash.get("tMap_3") - start_Hash.get("tMap_3"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_2 end ] start
				 */

				currentComponent = "tPostgresqlOutput_2";

				if (pstmtUpdate_tPostgresqlOutput_2 != null) {

					pstmtUpdate_tPostgresqlOutput_2.close();

				}
				if (pstmtInsert_tPostgresqlOutput_2 != null) {

					pstmtInsert_tPostgresqlOutput_2.close();

				}

				nb_line_deleted_tPostgresqlOutput_2 = nb_line_deleted_tPostgresqlOutput_2
						+ deletedCount_tPostgresqlOutput_2;
				nb_line_update_tPostgresqlOutput_2 = nb_line_update_tPostgresqlOutput_2
						+ updatedCount_tPostgresqlOutput_2;
				nb_line_inserted_tPostgresqlOutput_2 = nb_line_inserted_tPostgresqlOutput_2
						+ insertedCount_tPostgresqlOutput_2;
				nb_line_rejected_tPostgresqlOutput_2 = nb_line_rejected_tPostgresqlOutput_2
						+ rejectedCount_tPostgresqlOutput_2;

				globalMap.put("tPostgresqlOutput_2_NB_LINE",
						nb_line_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_2);

				ok_Hash.put("tPostgresqlOutput_2", true);
				end_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlOutput_2",
						end_Hash.get("tPostgresqlOutput_2")
								- start_Hash.get("tPostgresqlOutput_2"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRowGenerator_2 finally ] start
				 */

				currentComponent = "tRowGenerator_2";

				/**
				 * [tRowGenerator_2 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_2 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_2";

				/**
				 * [tPostgresqlOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRowGenerator_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_4");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				if ("failure".equalsIgnoreCase(status)) {
					globalMap.put("errorAllinea", true);
				}

				/**
				 * [tJava_4 begin ] stop
				 */

				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */

				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_4",
						end_Hash.get("tJava_4") - start_Hash.get("tJava_4"));
				tStatCatcher_1Process(globalMap);
				if (!(Boolean) globalMap.get("errorAllinea")) {

					tRowGenerator_4Process(globalMap);
				}

				/**
				 * [tJava_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_4 finally ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public static class copyOfout1Struct implements
			routines.system.IPersistableRow<copyOfout1Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id_tenant;

		public long getId_tenant() {
			return this.id_tenant;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		public String tenant_code;

		public String getTenant_code() {
			return this.tenant_code;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_tenant;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final copyOfout1Struct other = (copyOfout1Struct) obj;

			if (this.id_tenant != other.id_tenant)
				return false;

			return true;
		}

		public void copyDataTo(copyOfout1Struct other) {

			other.id_tenant = this.id_tenant;
			other.version = this.version;
			other.tenant_code = this.tenant_code;
			other.description = this.description;

		}

		public void copyKeysDataTo(copyOfout1Struct other) {

			other.id_tenant = this.id_tenant;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.id_tenant = dis.readLong();

					this.version = dis.readInt();

					this.tenant_code = readString(dis);

					this.description = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id_tenant);

				// int

				dos.writeInt(this.version);

				// String

				writeString(this.tenant_code, dos);

				// String

				writeString(this.description, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_tenant=" + String.valueOf(id_tenant));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",tenant_code=" + tenant_code);
			sb.append(",description=" + description);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfout1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_tenant, other.id_tenant);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		public String de_nome_ente;

		public String getDe_nome_ente() {
			return this.de_nome_ente;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.cod_ipa_ente = readString(dis);

					this.de_nome_ente = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.cod_ipa_ente, dos);

				// String

				writeString(this.de_nome_ente, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("cod_ipa_ente=" + cod_ipa_ente);
			sb.append(",de_nome_ente=" + de_nome_ente);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRowGenerator_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				copyOfout1Struct copyOfout1 = new copyOfout1Struct();

				/**
				 * [tPostgresqlOutput_12 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_12", false);
				start_Hash.put("tPostgresqlOutput_12",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlOutput_12");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlOutput_12";

				int tos_count_tPostgresqlOutput_12 = 0;

				String dbschema_tPostgresqlOutput_12 = null;
				dbschema_tPostgresqlOutput_12 = (String) globalMap
						.get("schema_" + "tPostgresqlConnection_4");

				String tableName_tPostgresqlOutput_12 = null;
				if (dbschema_tPostgresqlOutput_12 == null
						|| dbschema_tPostgresqlOutput_12.trim().length() == 0) {
					tableName_tPostgresqlOutput_12 = "tenant";
				} else {
					tableName_tPostgresqlOutput_12 = dbschema_tPostgresqlOutput_12
							+ "\".\"" + "tenant";
				}

				int updateKeyCount_tPostgresqlOutput_12 = 1;
				if (updateKeyCount_tPostgresqlOutput_12 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_12 = 0;
				int nb_line_update_tPostgresqlOutput_12 = 0;
				int nb_line_inserted_tPostgresqlOutput_12 = 0;
				int nb_line_deleted_tPostgresqlOutput_12 = 0;
				int nb_line_rejected_tPostgresqlOutput_12 = 0;

				int deletedCount_tPostgresqlOutput_12 = 0;
				int updatedCount_tPostgresqlOutput_12 = 0;
				int insertedCount_tPostgresqlOutput_12 = 0;
				int rejectedCount_tPostgresqlOutput_12 = 0;

				boolean whetherReject_tPostgresqlOutput_12 = false;

				java.sql.Connection conn_tPostgresqlOutput_12 = null;

				conn_tPostgresqlOutput_12 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");

				int batchSize_tPostgresqlOutput_12 = 10000;
				int batchSizeCounter_tPostgresqlOutput_12 = 0;

				int count_tPostgresqlOutput_12 = 0;
				String update_tPostgresqlOutput_12 = "UPDATE \""
						+ tableName_tPostgresqlOutput_12
						+ "\" SET \"description\" = ? WHERE \"tenant_code\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_12 = conn_tPostgresqlOutput_12
						.prepareStatement(update_tPostgresqlOutput_12);
				String insert_tPostgresqlOutput_12 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_12
						+ "\" (\""
						+ "id_tenant"
						+ "\",\"version\",\"tenant_code\",\"description\") VALUES ("
						+ "nextval('tenants_id_seq')" + ",?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_12 = conn_tPostgresqlOutput_12
						.prepareStatement(insert_tPostgresqlOutput_12);

				/**
				 * [tPostgresqlOutput_12 begin ] stop
				 */

				/**
				 * [tMap_19 begin ] start
				 */

				ok_Hash.put("tMap_19", false);
				start_Hash.put("tMap_19", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tMap_19");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tMap_19";

				int tos_count_tMap_19 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_19__Struct {
				}
				Var__tMap_19__Struct Var__tMap_19 = new Var__tMap_19__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				copyOfout1Struct copyOfout1_tmp = new copyOfout1Struct();
				// ###############################

				/**
				 * [tMap_19 begin ] stop
				 */

				/**
				 * [tRowGenerator_4 begin ] start
				 */

				ok_Hash.put("tRowGenerator_4", false);
				start_Hash.put("tRowGenerator_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tRowGenerator_4");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tRowGenerator_4";

				int tos_count_tRowGenerator_4 = 0;

				int nb_line_tRowGenerator_4 = 0;
				int nb_max_row_tRowGenerator_4 = 1;

				class tRowGenerator_4Randomizer {
					public String getRandomcod_ipa_ente() {

						return "R_VENETO";

					}

					public String getRandomde_nome_ente() {

						return "Regione Veneto";

					}
				}
				tRowGenerator_4Randomizer randtRowGenerator_4 = new tRowGenerator_4Randomizer();

				for (int itRowGenerator_4 = 0; itRowGenerator_4 < nb_max_row_tRowGenerator_4; itRowGenerator_4++) {
					row3.cod_ipa_ente = randtRowGenerator_4
							.getRandomcod_ipa_ente();
					row3.de_nome_ente = randtRowGenerator_4
							.getRandomde_nome_ente();
					nb_line_tRowGenerator_4++;

					/**
					 * [tRowGenerator_4 begin ] stop
					 */

					/**
					 * [tRowGenerator_4 main ] start
					 */

					currentComponent = "tRowGenerator_4";

					tos_count_tRowGenerator_4++;

					/**
					 * [tRowGenerator_4 main ] stop
					 */

					/**
					 * [tMap_19 main ] start
					 */

					currentComponent = "tMap_19";

					boolean hasCasePrimitiveKeyWithNull_tMap_19 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_19 = false;
					boolean mainRowRejected_tMap_19 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_19__Struct Var = Var__tMap_19;// ###############################
						// ###############################
						// # Output tables

						copyOfout1 = null;

						// # Output table : 'copyOfout1'
						copyOfout1_tmp.id_tenant = 0;
						copyOfout1_tmp.version = 0;
						copyOfout1_tmp.tenant_code = row3.cod_ipa_ente;
						copyOfout1_tmp.description = row3.de_nome_ente;
						copyOfout1 = copyOfout1_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_19 = false;

					tos_count_tMap_19++;

					/**
					 * [tMap_19 main ] stop
					 */
					// Start of branch "copyOfout1"
					if (copyOfout1 != null) {

						/**
						 * [tPostgresqlOutput_12 main ] start
						 */

						currentComponent = "tPostgresqlOutput_12";

						whetherReject_tPostgresqlOutput_12 = false;
						int updateFlag_tPostgresqlOutput_12 = 0;
						if (copyOfout1.description == null) {
							pstmtUpdate_tPostgresqlOutput_12.setNull(1,
									java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tPostgresqlOutput_12.setString(1,
									copyOfout1.description);
						}

						if (copyOfout1.tenant_code == null) {
							pstmtUpdate_tPostgresqlOutput_12.setNull(
									2 + count_tPostgresqlOutput_12,
									java.sql.Types.VARCHAR);
						} else {
							pstmtUpdate_tPostgresqlOutput_12.setString(
									2 + count_tPostgresqlOutput_12,
									copyOfout1.tenant_code);
						}

						try {

							updateFlag_tPostgresqlOutput_12 = pstmtUpdate_tPostgresqlOutput_12
									.executeUpdate();
							updatedCount_tPostgresqlOutput_12 = updatedCount_tPostgresqlOutput_12
									+ updateFlag_tPostgresqlOutput_12;

							if (updateFlag_tPostgresqlOutput_12 == 0) {

								pstmtInsert_tPostgresqlOutput_12.setInt(1,
										copyOfout1.version);

								if (copyOfout1.tenant_code == null) {
									pstmtInsert_tPostgresqlOutput_12.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_12.setString(
											2, copyOfout1.tenant_code);
								}

								if (copyOfout1.description == null) {
									pstmtInsert_tPostgresqlOutput_12.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmtInsert_tPostgresqlOutput_12.setString(
											3, copyOfout1.description);
								}

								insertedCount_tPostgresqlOutput_12 = insertedCount_tPostgresqlOutput_12
										+ pstmtInsert_tPostgresqlOutput_12
												.executeUpdate();
								nb_line_tPostgresqlOutput_12++;

							} else {
								nb_line_tPostgresqlOutput_12++;

							}
						} catch (java.lang.Exception e) {

							whetherReject_tPostgresqlOutput_12 = true;
							throw (e);
						}
						if (batchSize_tPostgresqlOutput_12 <= batchSizeCounter_tPostgresqlOutput_12) {

						}

						tos_count_tPostgresqlOutput_12++;

						/**
						 * [tPostgresqlOutput_12 main ] stop
						 */

					} // End of branch "copyOfout1"

					/**
					 * [tRowGenerator_4 end ] start
					 */

					currentComponent = "tRowGenerator_4";

				}
				globalMap.put("tRowGenerator_4_NB_LINE",
						nb_line_tRowGenerator_4);

				ok_Hash.put("tRowGenerator_4", true);
				end_Hash.put("tRowGenerator_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tRowGenerator_4",
						end_Hash.get("tRowGenerator_4")
								- start_Hash.get("tRowGenerator_4"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tRowGenerator_4 end ] stop
				 */

				/**
				 * [tMap_19 end ] start
				 */

				currentComponent = "tMap_19";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_19", true);
				end_Hash.put("tMap_19", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tMap_19",
						end_Hash.get("tMap_19") - start_Hash.get("tMap_19"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tMap_19 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_12 end ] start
				 */

				currentComponent = "tPostgresqlOutput_12";

				if (pstmtUpdate_tPostgresqlOutput_12 != null) {

					pstmtUpdate_tPostgresqlOutput_12.close();

				}
				if (pstmtInsert_tPostgresqlOutput_12 != null) {

					pstmtInsert_tPostgresqlOutput_12.close();

				}

				nb_line_deleted_tPostgresqlOutput_12 = nb_line_deleted_tPostgresqlOutput_12
						+ deletedCount_tPostgresqlOutput_12;
				nb_line_update_tPostgresqlOutput_12 = nb_line_update_tPostgresqlOutput_12
						+ updatedCount_tPostgresqlOutput_12;
				nb_line_inserted_tPostgresqlOutput_12 = nb_line_inserted_tPostgresqlOutput_12
						+ insertedCount_tPostgresqlOutput_12;
				nb_line_rejected_tPostgresqlOutput_12 = nb_line_rejected_tPostgresqlOutput_12
						+ rejectedCount_tPostgresqlOutput_12;

				globalMap.put("tPostgresqlOutput_12_NB_LINE",
						nb_line_tPostgresqlOutput_12);
				globalMap.put("tPostgresqlOutput_12_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_12);
				globalMap.put("tPostgresqlOutput_12_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_12);
				globalMap.put("tPostgresqlOutput_12_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_12);
				globalMap.put("tPostgresqlOutput_12_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_12);

				ok_Hash.put("tPostgresqlOutput_12", true);
				end_Hash.put("tPostgresqlOutput_12", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlOutput_12",
						end_Hash.get("tPostgresqlOutput_12")
								- start_Hash.get("tPostgresqlOutput_12"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlOutput_12 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tRowGenerator_4:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tPostgresqlInput_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRowGenerator_4 finally ] start
				 */

				currentComponent = "tRowGenerator_4";

				/**
				 * [tRowGenerator_4 finally ] stop
				 */

				/**
				 * [tMap_19 finally ] start
				 */

				currentComponent = "tMap_19";

				/**
				 * [tMap_19 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_12 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_12";

				/**
				 * [tPostgresqlOutput_12 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRowGenerator_4_SUBPROCESS_STATE", 1);
	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id_tenant;

		public long getId_tenant() {
			return this.id_tenant;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		public String tenant_code;

		public String getTenant_code() {
			return this.tenant_code;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_tenant;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final out1Struct other = (out1Struct) obj;

			if (this.id_tenant != other.id_tenant)
				return false;

			return true;
		}

		public void copyDataTo(out1Struct other) {

			other.id_tenant = this.id_tenant;
			other.version = this.version;
			other.tenant_code = this.tenant_code;
			other.description = this.description;

		}

		public void copyKeysDataTo(out1Struct other) {

			other.id_tenant = this.id_tenant;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.id_tenant = dis.readLong();

					this.version = dis.readInt();

					this.tenant_code = readString(dis);

					this.description = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id_tenant);

				// int

				dos.writeInt(this.version);

				// String

				writeString(this.tenant_code, dos);

				// String

				writeString(this.description, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_tenant=" + String.valueOf(id_tenant));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",tenant_code=" + tenant_code);
			sb.append(",description=" + description);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_tenant, other.id_tenant);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		public String de_nome_ente;

		public String getDe_nome_ente() {
			return this.de_nome_ente;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.cod_ipa_ente = readString(dis);

					this.de_nome_ente = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.cod_ipa_ente, dos);

				// String

				writeString(this.de_nome_ente, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("cod_ipa_ente=" + cod_ipa_ente);
			sb.append(",de_nome_ente=" + de_nome_ente);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tPostgresqlOutput_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_3", false);
				start_Hash.put("tPostgresqlOutput_3",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlOutput_3");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlOutput_3";

				int tos_count_tPostgresqlOutput_3 = 0;

				String dbschema_tPostgresqlOutput_3 = null;
				dbschema_tPostgresqlOutput_3 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_4");

				String tableName_tPostgresqlOutput_3 = null;
				if (dbschema_tPostgresqlOutput_3 == null
						|| dbschema_tPostgresqlOutput_3.trim().length() == 0) {
					tableName_tPostgresqlOutput_3 = "tenant";
				} else {
					tableName_tPostgresqlOutput_3 = dbschema_tPostgresqlOutput_3
							+ "\".\"" + "tenant";
				}

				int updateKeyCount_tPostgresqlOutput_3 = 1;
				if (updateKeyCount_tPostgresqlOutput_3 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_3 = 0;
				int nb_line_update_tPostgresqlOutput_3 = 0;
				int nb_line_inserted_tPostgresqlOutput_3 = 0;
				int nb_line_deleted_tPostgresqlOutput_3 = 0;
				int nb_line_rejected_tPostgresqlOutput_3 = 0;

				int deletedCount_tPostgresqlOutput_3 = 0;
				int updatedCount_tPostgresqlOutput_3 = 0;
				int insertedCount_tPostgresqlOutput_3 = 0;
				int rejectedCount_tPostgresqlOutput_3 = 0;

				boolean whetherReject_tPostgresqlOutput_3 = false;

				java.sql.Connection conn_tPostgresqlOutput_3 = null;

				conn_tPostgresqlOutput_3 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");

				int batchSize_tPostgresqlOutput_3 = 10000;
				int batchSizeCounter_tPostgresqlOutput_3 = 0;

				int count_tPostgresqlOutput_3 = 0;
				String update_tPostgresqlOutput_3 = "UPDATE \""
						+ tableName_tPostgresqlOutput_3
						+ "\" SET \"description\" = ? WHERE \"tenant_code\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3
						.prepareStatement(update_tPostgresqlOutput_3);
				String insert_tPostgresqlOutput_3 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_3
						+ "\" (\""
						+ "id_tenant"
						+ "\",\"version\",\"tenant_code\",\"description\") VALUES ("
						+ "nextval('tenants_id_seq')" + ",?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3
						.prepareStatement(insert_tPostgresqlOutput_3);

				/**
				 * [tPostgresqlOutput_3 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tMap_4");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_2", false);
				start_Hash
						.put("tPostgresqlInput_2", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_2";

				int tos_count_tPostgresqlInput_2 = 0;

				int nb_line_tPostgresqlInput_2 = 0;
				java.sql.Connection conn_tPostgresqlInput_2 = null;
				conn_tPostgresqlInput_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2
						.createStatement();

				String dbquery_tPostgresqlInput_2 = "SELECT \n  \"mygov_ente\".\"cod_ipa_ente\", \n  \"mygov_ente\".\"de_nome_ente\"\nFROM \"mygov_ente\"";

				globalMap.put("tPostgresqlInput_2_QUERY",
						dbquery_tPostgresqlInput_2);
				java.sql.ResultSet rs_tPostgresqlInput_2 = null;
				try {
					rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2
							.executeQuery(dbquery_tPostgresqlInput_2);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2
							.getColumnCount();

					String tmpContent_tPostgresqlInput_2 = null;

					while (rs_tPostgresqlInput_2.next()) {
						nb_line_tPostgresqlInput_2++;

						if (colQtyInRs_tPostgresqlInput_2 < 1) {
							row2.cod_ipa_ente = null;
						} else {

							tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
									.getString(1);
							if (tmpContent_tPostgresqlInput_2 != null) {
								row2.cod_ipa_ente = tmpContent_tPostgresqlInput_2;
							} else {
								row2.cod_ipa_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 2) {
							row2.de_nome_ente = null;
						} else {

							tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
									.getString(2);
							if (tmpContent_tPostgresqlInput_2 != null) {
								row2.de_nome_ente = tmpContent_tPostgresqlInput_2;
							} else {
								row2.de_nome_ente = null;
							}
						}

						/**
						 * [tPostgresqlInput_2 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_2 main ] start
						 */

						currentComponent = "tPostgresqlInput_2";

						tos_count_tPostgresqlInput_2++;

						/**
						 * [tPostgresqlInput_2 main ] stop
						 */

						/**
						 * [tMap_4 main ] start
						 */

						currentComponent = "tMap_4";

						boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_4 = false;
						boolean mainRowRejected_tMap_4 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
							// ###############################
							// # Output tables

							out1 = null;

							// # Output table : 'out1'
							out1_tmp.id_tenant = 0;
							out1_tmp.version = 0;
							out1_tmp.tenant_code = row2.cod_ipa_ente;
							out1_tmp.description = row2.de_nome_ente;
							out1 = out1_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_4 = false;

						tos_count_tMap_4++;

						/**
						 * [tMap_4 main ] stop
						 */
						// Start of branch "out1"
						if (out1 != null) {

							/**
							 * [tPostgresqlOutput_3 main ] start
							 */

							currentComponent = "tPostgresqlOutput_3";

							whetherReject_tPostgresqlOutput_3 = false;
							int updateFlag_tPostgresqlOutput_3 = 0;
							if (out1.description == null) {
								pstmtUpdate_tPostgresqlOutput_3.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_3.setString(1,
										out1.description);
							}

							if (out1.tenant_code == null) {
								pstmtUpdate_tPostgresqlOutput_3.setNull(
										2 + count_tPostgresqlOutput_3,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_3.setString(
										2 + count_tPostgresqlOutput_3,
										out1.tenant_code);
							}

							try {

								updateFlag_tPostgresqlOutput_3 = pstmtUpdate_tPostgresqlOutput_3
										.executeUpdate();
								updatedCount_tPostgresqlOutput_3 = updatedCount_tPostgresqlOutput_3
										+ updateFlag_tPostgresqlOutput_3;

								if (updateFlag_tPostgresqlOutput_3 == 0) {

									pstmtInsert_tPostgresqlOutput_3.setInt(1,
											out1.version);

									if (out1.tenant_code == null) {
										pstmtInsert_tPostgresqlOutput_3
												.setNull(2,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_3
												.setString(2, out1.tenant_code);
									}

									if (out1.description == null) {
										pstmtInsert_tPostgresqlOutput_3
												.setNull(3,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_3
												.setString(3, out1.description);
									}

									insertedCount_tPostgresqlOutput_3 = insertedCount_tPostgresqlOutput_3
											+ pstmtInsert_tPostgresqlOutput_3
													.executeUpdate();
									nb_line_tPostgresqlOutput_3++;

								} else {
									nb_line_tPostgresqlOutput_3++;

								}
							} catch (java.lang.Exception e) {

								whetherReject_tPostgresqlOutput_3 = true;
								throw (e);
							}
							if (batchSize_tPostgresqlOutput_3 <= batchSizeCounter_tPostgresqlOutput_3) {

							}

							tos_count_tPostgresqlOutput_3++;

							/**
							 * [tPostgresqlOutput_3 main ] stop
							 */

						} // End of branch "out1"

						/**
						 * [tPostgresqlInput_2 end ] start
						 */

						currentComponent = "tPostgresqlInput_2";

					}
				} finally {
					stmt_tPostgresqlInput_2.close();

				}
				globalMap.put("tPostgresqlInput_2_NB_LINE",
						nb_line_tPostgresqlInput_2);

				ok_Hash.put("tPostgresqlInput_2", true);
				end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_2 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tMap_4",
						end_Hash.get("tMap_4") - start_Hash.get("tMap_4"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_3 end ] start
				 */

				currentComponent = "tPostgresqlOutput_3";

				if (pstmtUpdate_tPostgresqlOutput_3 != null) {

					pstmtUpdate_tPostgresqlOutput_3.close();

				}
				if (pstmtInsert_tPostgresqlOutput_3 != null) {

					pstmtInsert_tPostgresqlOutput_3.close();

				}

				nb_line_deleted_tPostgresqlOutput_3 = nb_line_deleted_tPostgresqlOutput_3
						+ deletedCount_tPostgresqlOutput_3;
				nb_line_update_tPostgresqlOutput_3 = nb_line_update_tPostgresqlOutput_3
						+ updatedCount_tPostgresqlOutput_3;
				nb_line_inserted_tPostgresqlOutput_3 = nb_line_inserted_tPostgresqlOutput_3
						+ insertedCount_tPostgresqlOutput_3;
				nb_line_rejected_tPostgresqlOutput_3 = nb_line_rejected_tPostgresqlOutput_3
						+ rejectedCount_tPostgresqlOutput_3;

				globalMap.put("tPostgresqlOutput_3_NB_LINE",
						nb_line_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_3);

				ok_Hash.put("tPostgresqlOutput_3", true);
				end_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlOutput_3",
						end_Hash.get("tPostgresqlOutput_3")
								- start_Hash.get("tPostgresqlOutput_3"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_2 finally ] start
				 */

				currentComponent = "tPostgresqlInput_2";

				/**
				 * [tPostgresqlInput_2 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_3 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_3";

				/**
				 * [tPostgresqlOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_5");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				if ("failure".equalsIgnoreCase(status)) {
					globalMap.put("errorAllinea", true);
				}

				/**
				 * [tJava_5 begin ] stop
				 */

				/**
				 * [tJava_5 main ] start
				 */

				currentComponent = "tJava_5";

				tos_count_tJava_5++;

				/**
				 * [tJava_5 main ] stop
				 */

				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_5",
						end_Hash.get("tJava_5") - start_Hash.get("tJava_5"));
				tStatCatcher_1Process(globalMap);
				if (!(Boolean) globalMap.get("errorAllinea")) {

					tPostgresqlInput_4Process(globalMap);
				}

				/**
				 * [tJava_5 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_5 finally ] start
				 */

				currentComponent = "tJava_5";

				/**
				 * [tJava_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}

	public static class USER_MYPIVOTStruct implements
			routines.system.IPersistableRow<USER_MYPIVOTStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id_user;

		public long getId_user() {
			return this.id_user;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		public String user_code;

		public String getUser_code() {
			return this.user_code;
		}

		public String user_last_name;

		public String getUser_last_name() {
			return this.user_last_name;
		}

		public String user_name;

		public String getUser_name() {
			return this.user_name;
		}

		public String user_tax_code;

		public String getUser_tax_code() {
			return this.user_tax_code;
		}

		public String user_domain;

		public String getUser_domain() {
			return this.user_domain;
		}

		public String user_mail;

		public String getUser_mail() {
			return this.user_mail;
		}

		public String user_address;

		public String getUser_address() {
			return this.user_address;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_user;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final USER_MYPIVOTStruct other = (USER_MYPIVOTStruct) obj;

			if (this.id_user != other.id_user)
				return false;

			return true;
		}

		public void copyDataTo(USER_MYPIVOTStruct other) {

			other.id_user = this.id_user;
			other.version = this.version;
			other.user_code = this.user_code;
			other.user_last_name = this.user_last_name;
			other.user_name = this.user_name;
			other.user_tax_code = this.user_tax_code;
			other.user_domain = this.user_domain;
			other.user_mail = this.user_mail;
			other.user_address = this.user_address;

		}

		public void copyKeysDataTo(USER_MYPIVOTStruct other) {

			other.id_user = this.id_user;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.id_user = dis.readLong();

					this.version = dis.readInt();

					this.user_code = readString(dis);

					this.user_last_name = readString(dis);

					this.user_name = readString(dis);

					this.user_tax_code = readString(dis);

					this.user_domain = readString(dis);

					this.user_mail = readString(dis);

					this.user_address = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id_user);

				// int

				dos.writeInt(this.version);

				// String

				writeString(this.user_code, dos);

				// String

				writeString(this.user_last_name, dos);

				// String

				writeString(this.user_name, dos);

				// String

				writeString(this.user_tax_code, dos);

				// String

				writeString(this.user_domain, dos);

				// String

				writeString(this.user_mail, dos);

				// String

				writeString(this.user_address, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_user=" + String.valueOf(id_user));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",user_code=" + user_code);
			sb.append(",user_last_name=" + user_last_name);
			sb.append(",user_name=" + user_name);
			sb.append(",user_tax_code=" + user_tax_code);
			sb.append(",user_domain=" + user_domain);
			sb.append(",user_mail=" + user_mail);
			sb.append(",user_address=" + user_address);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(USER_MYPIVOTStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_user, other.id_user);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class USER_TENANTStruct implements
			routines.system.IPersistableRow<USER_TENANTStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public long id_user;

		public long getId_user() {
			return this.id_user;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		public String user_code;

		public String getUser_code() {
			return this.user_code;
		}

		public String user_last_name;

		public String getUser_last_name() {
			return this.user_last_name;
		}

		public String user_name;

		public String getUser_name() {
			return this.user_name;
		}

		public String user_tax_code;

		public String getUser_tax_code() {
			return this.user_tax_code;
		}

		public String user_domain;

		public String getUser_domain() {
			return this.user_domain;
		}

		public String user_mail;

		public String getUser_mail() {
			return this.user_mail;
		}

		public Long comune_id;

		public Long getComune_id() {
			return this.comune_id;
		}

		public String indirizzo;

		public String getIndirizzo() {
			return this.indirizzo;
		}

		public String civico;

		public String getCivico() {
			return this.civico;
		}

		public String cap;

		public String getCap() {
			return this.cap;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.id_user = dis.readLong();

					this.version = dis.readInt();

					this.user_code = readString(dis);

					this.user_last_name = readString(dis);

					this.user_name = readString(dis);

					this.user_tax_code = readString(dis);

					this.user_domain = readString(dis);

					this.user_mail = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.comune_id = null;
					} else {
						this.comune_id = dis.readLong();
					}

					this.indirizzo = readString(dis);

					this.civico = readString(dis);

					this.cap = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id_user);

				// int

				dos.writeInt(this.version);

				// String

				writeString(this.user_code, dos);

				// String

				writeString(this.user_last_name, dos);

				// String

				writeString(this.user_name, dos);

				// String

				writeString(this.user_tax_code, dos);

				// String

				writeString(this.user_domain, dos);

				// String

				writeString(this.user_mail, dos);

				// Long

				if (this.comune_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.comune_id);
				}

				// String

				writeString(this.indirizzo, dos);

				// String

				writeString(this.civico, dos);

				// String

				writeString(this.cap, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_user=" + String.valueOf(id_user));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",user_code=" + user_code);
			sb.append(",user_last_name=" + user_last_name);
			sb.append(",user_name=" + user_name);
			sb.append(",user_tax_code=" + user_tax_code);
			sb.append(",user_domain=" + user_domain);
			sb.append(",user_mail=" + user_mail);
			sb.append(",comune_id=" + String.valueOf(comune_id));
			sb.append(",indirizzo=" + indirizzo);
			sb.append(",civico=" + civico);
			sb.append(",cap=" + cap);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(USER_TENANTStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_operatore_id;

		public long getMygov_operatore_id() {
			return this.mygov_operatore_id;
		}

		public String ruolo;

		public String getRuolo() {
			return this.ruolo;
		}

		public String cod_fed_user_id;

		public String getCod_fed_user_id() {
			return this.cod_fed_user_id;
		}

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.cod_fed_user_id == null) ? 0
								: this.cod_fed_user_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.cod_fed_user_id == null) {
				if (other.cod_fed_user_id != null)
					return false;

			} else if (!this.cod_fed_user_id.equals(other.cod_fed_user_id))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.mygov_operatore_id = this.mygov_operatore_id;
			other.ruolo = this.ruolo;
			other.cod_fed_user_id = this.cod_fed_user_id;
			other.cod_ipa_ente = this.cod_ipa_ente;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.cod_fed_user_id = this.cod_fed_user_id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.cod_fed_user_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.cod_fed_user_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.mygov_operatore_id = dis.readLong();

				this.ruolo = readString(dis, ois);

				this.cod_ipa_ente = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.mygov_operatore_id);

				writeString(this.ruolo, dos, oos);

				writeString(this.cod_ipa_ente, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_operatore_id="
					+ String.valueOf(mygov_operatore_id));
			sb.append(",ruolo=" + ruolo);
			sb.append(",cod_fed_user_id=" + cod_fed_user_id);
			sb.append(",cod_ipa_ente=" + cod_ipa_ente);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.cod_fed_user_id,
					other.cod_fed_user_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tPostgresqlInput_4Struct implements
			routines.system.IPersistableRow<after_tPostgresqlInput_4Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_operatore_id;

		public long getMygov_operatore_id() {
			return this.mygov_operatore_id;
		}

		public String ruolo;

		public String getRuolo() {
			return this.ruolo;
		}

		public String cod_fed_user_id;

		public String getCod_fed_user_id() {
			return this.cod_fed_user_id;
		}

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.mygov_operatore_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tPostgresqlInput_4Struct other = (after_tPostgresqlInput_4Struct) obj;

			if (this.mygov_operatore_id != other.mygov_operatore_id)
				return false;

			return true;
		}

		public void copyDataTo(after_tPostgresqlInput_4Struct other) {

			other.mygov_operatore_id = this.mygov_operatore_id;
			other.ruolo = this.ruolo;
			other.cod_fed_user_id = this.cod_fed_user_id;
			other.cod_ipa_ente = this.cod_ipa_ente;

		}

		public void copyKeysDataTo(after_tPostgresqlInput_4Struct other) {

			other.mygov_operatore_id = this.mygov_operatore_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_operatore_id = dis.readLong();

					this.ruolo = readString(dis);

					this.cod_fed_user_id = readString(dis);

					this.cod_ipa_ente = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_operatore_id);

				// String

				writeString(this.ruolo, dos);

				// String

				writeString(this.cod_fed_user_id, dos);

				// String

				writeString(this.cod_ipa_ente, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_operatore_id="
					+ String.valueOf(mygov_operatore_id));
			sb.append(",ruolo=" + ruolo);
			sb.append(",cod_fed_user_id=" + cod_fed_user_id);
			sb.append(",cod_ipa_ente=" + cod_ipa_ente);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tPostgresqlInput_4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.mygov_operatore_id,
					other.mygov_operatore_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_5Process(globalMap);
				tPostgresqlInput_6Process(globalMap);
				tPostgresqlInput_7Process(globalMap);

				row5Struct row5 = new row5Struct();
				USER_TENANTStruct USER_TENANT = new USER_TENANTStruct();
				USER_MYPIVOTStruct USER_MYPIVOT = new USER_MYPIVOTStruct();

				/**
				 * [tPostgresqlOutput_4 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_4", false);
				start_Hash.put("tPostgresqlOutput_4",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlOutput_4");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlOutput_4";

				int tos_count_tPostgresqlOutput_4 = 0;

				String dbschema_tPostgresqlOutput_4 = null;
				dbschema_tPostgresqlOutput_4 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_4");

				String tableName_tPostgresqlOutput_4 = null;
				if (dbschema_tPostgresqlOutput_4 == null
						|| dbschema_tPostgresqlOutput_4.trim().length() == 0) {
					tableName_tPostgresqlOutput_4 = "user";
				} else {
					tableName_tPostgresqlOutput_4 = dbschema_tPostgresqlOutput_4
							+ "\".\"" + "user";
				}

				int updateKeyCount_tPostgresqlOutput_4 = 1;
				if (updateKeyCount_tPostgresqlOutput_4 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_4 = 0;
				int nb_line_update_tPostgresqlOutput_4 = 0;
				int nb_line_inserted_tPostgresqlOutput_4 = 0;
				int nb_line_deleted_tPostgresqlOutput_4 = 0;
				int nb_line_rejected_tPostgresqlOutput_4 = 0;

				int deletedCount_tPostgresqlOutput_4 = 0;
				int updatedCount_tPostgresqlOutput_4 = 0;
				int insertedCount_tPostgresqlOutput_4 = 0;
				int rejectedCount_tPostgresqlOutput_4 = 0;

				boolean whetherReject_tPostgresqlOutput_4 = false;

				java.sql.Connection conn_tPostgresqlOutput_4 = null;

				conn_tPostgresqlOutput_4 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");

				int count_tPostgresqlOutput_4 = 0;
				String update_tPostgresqlOutput_4 = "UPDATE \""
						+ tableName_tPostgresqlOutput_4
						+ "\" SET \"user_code\" = ?,\"user_last_name\" = ?,\"user_name\" = ?,\"user_tax_code\" = ?,\"user_domain\" = ?,\"user_mail\" = ?,\"user_address\" = ? WHERE \"user_code\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4
						.prepareStatement(update_tPostgresqlOutput_4);
				String insert_tPostgresqlOutput_4 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_4
						+ "\" (\""
						+ "id_user"
						+ "\",\"version\",\"user_code\",\"user_last_name\",\"user_name\",\"user_tax_code\",\"user_domain\",\"user_mail\",\"user_address\") VALUES ("
						+ "nextval('users_id_seq')" + ",?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_4 = conn_tPostgresqlOutput_4
						.prepareStatement(insert_tPostgresqlOutput_4);

				/**
				 * [tPostgresqlOutput_4 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tMap_6");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tMap_6";

				int tos_count_tMap_6 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) globalMap
						.get("tHash_Lookup_row8"));

				row8Struct row8HashKey = new row8Struct();
				row8Struct row8Default = new row8Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_6__Struct {
					String indirizzo;
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				USER_MYPIVOTStruct USER_MYPIVOT_tmp = new USER_MYPIVOTStruct();
				// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				int tos_count_tMap_5 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) globalMap
						.get("tHash_Lookup_row7"));

				row7Struct row7HashKey = new row7Struct();
				row7Struct row7Default = new row7Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				USER_TENANTStruct USER_TENANT_tmp = new USER_TENANTStruct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_4 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_4", false);
				start_Hash
						.put("tPostgresqlInput_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_4");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_4";

				int tos_count_tPostgresqlInput_4 = 0;

				int nb_line_tPostgresqlInput_4 = 0;
				java.sql.Connection conn_tPostgresqlInput_4 = null;
				conn_tPostgresqlInput_4 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_4 = conn_tPostgresqlInput_4
						.createStatement();

				String dbquery_tPostgresqlInput_4 = "SELECT \n  \"mygov_operatore\".\"mygov_operatore_id\", \n  \"mygov_operatore\".\"ruolo\", \n  \"mygov_operatore\".\"cod_fed_user_id\", \n  \"mygov_operatore\".\"cod_ipa_ente\"\nFROM \"mygov_operatore\"\nWHERE split_part(\"mygov_operatore\".\"cod_fed_user_id\", '-', 2) <> 'WS_USER'\n";

				globalMap.put("tPostgresqlInput_4_QUERY",
						dbquery_tPostgresqlInput_4);
				java.sql.ResultSet rs_tPostgresqlInput_4 = null;
				try {
					rs_tPostgresqlInput_4 = stmt_tPostgresqlInput_4
							.executeQuery(dbquery_tPostgresqlInput_4);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_4 = rs_tPostgresqlInput_4
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_4 = rsmd_tPostgresqlInput_4
							.getColumnCount();

					String tmpContent_tPostgresqlInput_4 = null;

					while (rs_tPostgresqlInput_4.next()) {
						nb_line_tPostgresqlInput_4++;

						if (colQtyInRs_tPostgresqlInput_4 < 1) {
							row5.mygov_operatore_id = 0;
						} else {

							if (rs_tPostgresqlInput_4.getObject(1) != null) {
								row5.mygov_operatore_id = rs_tPostgresqlInput_4
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_4 < 2) {
							row5.ruolo = null;
						} else {

							tmpContent_tPostgresqlInput_4 = rs_tPostgresqlInput_4
									.getString(2);
							if (tmpContent_tPostgresqlInput_4 != null) {
								row5.ruolo = tmpContent_tPostgresqlInput_4
										.trim();
							} else {
								row5.ruolo = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_4 < 3) {
							row5.cod_fed_user_id = null;
						} else {

							tmpContent_tPostgresqlInput_4 = rs_tPostgresqlInput_4
									.getString(3);
							if (tmpContent_tPostgresqlInput_4 != null) {
								row5.cod_fed_user_id = tmpContent_tPostgresqlInput_4
										.trim();
							} else {
								row5.cod_fed_user_id = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_4 < 4) {
							row5.cod_ipa_ente = null;
						} else {

							tmpContent_tPostgresqlInput_4 = rs_tPostgresqlInput_4
									.getString(4);
							if (tmpContent_tPostgresqlInput_4 != null) {
								row5.cod_ipa_ente = tmpContent_tPostgresqlInput_4
										.trim();
							} else {
								row5.cod_ipa_ente = null;
							}
						}

						/**
						 * [tPostgresqlInput_4 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_4 main ] start
						 */

						currentComponent = "tPostgresqlInput_4";

						tos_count_tPostgresqlInput_4++;

						/**
						 * [tPostgresqlInput_4 main ] stop
						 */

						/**
						 * [tMap_5 main ] start
						 */

						currentComponent = "tMap_5";

						boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_5 = false;
						boolean mainRowRejected_tMap_5 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row6"
						// /////////////////////////////////////////////

						boolean forceLooprow6 = false;

						row6Struct row6ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_5 = false;

							row6HashKey.cod_fed_user_id = row5.cod_fed_user_id;

							row6HashKey.hashCodeDirty = true;

							tHash_Lookup_row6.lookup(row6HashKey);

							if (!tHash_Lookup_row6.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_5 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.cod_fed_user_id = '"
							// + row6HashKey.cod_fed_user_id + "'");
						} // G 071

						row6Struct row6 = null;

						row6Struct fromLookup_row6 = null;
						row6 = row6Default;

						if (tHash_Lookup_row6 != null
								&& tHash_Lookup_row6.hasNext()) { // G 099

							fromLookup_row6 = tHash_Lookup_row6.next();

						} // G 099

						if (fromLookup_row6 != null) {
							row6 = fromLookup_row6;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row7"
						// /////////////////////////////////////////////

						boolean forceLooprow7 = false;

						row7Struct row7ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_5 = false;

							row7HashKey.tenant_code = row5.cod_ipa_ente;

							row7HashKey.hashCodeDirty = true;

							tHash_Lookup_row7.lookup(row7HashKey);

							if (!tHash_Lookup_row7.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_5 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row7 != null
								&& tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.tenant_code = '"
							// + row7HashKey.tenant_code + "'");
						} // G 071

						row7Struct row7 = null;

						row7Struct fromLookup_row7 = null;
						row7 = row7Default;

						if (tHash_Lookup_row7 != null
								&& tHash_Lookup_row7.hasNext()) { // G 099

							fromLookup_row7 = tHash_Lookup_row7.next();

						} // G 099

						if (fromLookup_row7 != null) {
							row7 = fromLookup_row7;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
							// ###############################
							// # Output tables

							USER_TENANT = null;

							if (!rejectedInnerJoin_tMap_5) {

								// # Output table : 'USER_TENANT'
								USER_TENANT_tmp.id_user = 0;
								USER_TENANT_tmp.version = 0;
								USER_TENANT_tmp.user_code = row5.cod_fed_user_id;
								USER_TENANT_tmp.user_last_name = row6.de_lastname;
								USER_TENANT_tmp.user_name = row6.de_firstname;
								USER_TENANT_tmp.user_tax_code = row6.cod_codice_fiscale_utente;
								USER_TENANT_tmp.user_domain = row7.description;
								USER_TENANT_tmp.user_mail = row6.de_email_address;
								USER_TENANT_tmp.comune_id = row6.comune_id;
								USER_TENANT_tmp.indirizzo = row6.indirizzo;
								USER_TENANT_tmp.civico = row6.civico;
								USER_TENANT_tmp.cap = row6.cap;
								USER_TENANT = USER_TENANT_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_5 = false;

						tos_count_tMap_5++;

						/**
						 * [tMap_5 main ] stop
						 */
						// Start of branch "USER_TENANT"
						if (USER_TENANT != null) {

							/**
							 * [tMap_6 main ] start
							 */

							currentComponent = "tMap_6";

							boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_6 = false;
							boolean mainRowRejected_tMap_6 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row8"
							// /////////////////////////////////////////////

							boolean forceLooprow8 = false;

							row8Struct row8ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_6 = false;

								Object exprKeyValue_row8__comune_id = USER_TENANT.comune_id;
								if (exprKeyValue_row8__comune_id == null) {
									hasCasePrimitiveKeyWithNull_tMap_6 = true;
								} else {
									row8HashKey.comune_id = (long) (Long) exprKeyValue_row8__comune_id;
								}

								row8HashKey.hashCodeDirty = true;

								if (!hasCasePrimitiveKeyWithNull_tMap_6) { // G_TM_M_091

									tHash_Lookup_row8.lookup(row8HashKey);

								} // G_TM_M_091

							} // G_TM_M_020

							if (tHash_Lookup_row8 != null
									&& tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G
																						// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.comune_id = '"
								// + row8HashKey.comune_id + "'");
							} // G 071

							row8Struct row8 = null;

							row8Struct fromLookup_row8 = null;
							row8 = row8Default;

							if (tHash_Lookup_row8 != null
									&& tHash_Lookup_row8.hasNext()) { // G 099

								fromLookup_row8 = tHash_Lookup_row8.next();

							} // G 099

							if (fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_6__Struct Var = Var__tMap_6;
								Var.indirizzo = (org.apache.commons.lang.StringUtils
										.isNotEmpty(USER_TENANT.indirizzo) ? row6.indirizzo
										+ " "
										: "")
										+ (org.apache.commons.lang.StringUtils
												.isNotEmpty(USER_TENANT.civico) ? row6.civico
												+ ", "
												: "")
										+ (org.apache.commons.lang.StringUtils
												.isNotEmpty(USER_TENANT.cap) ? row6.cap
												+ " "
												: "")
										+ (org.apache.commons.lang.StringUtils
												.isNotEmpty(row8.comune) ? row8.comune
												+ " "
												: "")
										+ (org.apache.commons.lang.StringUtils
												.isNotEmpty(row8.sigla_provincia) ? row8.sigla_provincia
												: "");// ###############################
								// ###############################
								// # Output tables

								USER_MYPIVOT = null;

								// # Output table : 'USER_MYPIVOT'
								USER_MYPIVOT_tmp.id_user = 0;
								USER_MYPIVOT_tmp.version = 0;
								USER_MYPIVOT_tmp.user_code = USER_TENANT.user_code;
								USER_MYPIVOT_tmp.user_last_name = USER_TENANT.user_last_name;
								USER_MYPIVOT_tmp.user_name = USER_TENANT.user_name;
								USER_MYPIVOT_tmp.user_tax_code = USER_TENANT.user_tax_code;
								USER_MYPIVOT_tmp.user_domain = USER_TENANT.user_domain;
								USER_MYPIVOT_tmp.user_mail = USER_TENANT.user_mail;
								USER_MYPIVOT_tmp.user_address = org.apache.commons.lang.StringUtils
										.isNotEmpty(Var.indirizzo) ? Var.indirizzo
										: null;
								USER_MYPIVOT = USER_MYPIVOT_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_6 = false;

							tos_count_tMap_6++;

							/**
							 * [tMap_6 main ] stop
							 */
							// Start of branch "USER_MYPIVOT"
							if (USER_MYPIVOT != null) {

								/**
								 * [tPostgresqlOutput_4 main ] start
								 */

								currentComponent = "tPostgresqlOutput_4";

								whetherReject_tPostgresqlOutput_4 = false;
								int updateFlag_tPostgresqlOutput_4 = 0;
								if (USER_MYPIVOT.user_code == null) {
									pstmtUpdate_tPostgresqlOutput_4.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_4.setString(
											1, USER_MYPIVOT.user_code);
								}

								if (USER_MYPIVOT.user_last_name == null) {
									pstmtUpdate_tPostgresqlOutput_4.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_4.setString(
											2, USER_MYPIVOT.user_last_name);
								}

								if (USER_MYPIVOT.user_name == null) {
									pstmtUpdate_tPostgresqlOutput_4.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_4.setString(
											3, USER_MYPIVOT.user_name);
								}

								if (USER_MYPIVOT.user_tax_code == null) {
									pstmtUpdate_tPostgresqlOutput_4.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_4.setString(
											4, USER_MYPIVOT.user_tax_code);
								}

								if (USER_MYPIVOT.user_domain == null) {
									pstmtUpdate_tPostgresqlOutput_4.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_4.setString(
											5, USER_MYPIVOT.user_domain);
								}

								if (USER_MYPIVOT.user_mail == null) {
									pstmtUpdate_tPostgresqlOutput_4.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_4.setString(
											6, USER_MYPIVOT.user_mail);
								}

								if (USER_MYPIVOT.user_address == null) {
									pstmtUpdate_tPostgresqlOutput_4.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_4.setString(
											7, USER_MYPIVOT.user_address);
								}

								if (USER_MYPIVOT.user_code == null) {
									pstmtUpdate_tPostgresqlOutput_4.setNull(
											8 + count_tPostgresqlOutput_4,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_4.setString(
											8 + count_tPostgresqlOutput_4,
											USER_MYPIVOT.user_code);
								}

								try {

									updateFlag_tPostgresqlOutput_4 = pstmtUpdate_tPostgresqlOutput_4
											.executeUpdate();
									updatedCount_tPostgresqlOutput_4 = updatedCount_tPostgresqlOutput_4
											+ updateFlag_tPostgresqlOutput_4;

									if (updateFlag_tPostgresqlOutput_4 == 0) {

										pstmtInsert_tPostgresqlOutput_4.setInt(
												1, USER_MYPIVOT.version);

										if (USER_MYPIVOT.user_code == null) {
											pstmtInsert_tPostgresqlOutput_4
													.setNull(
															2,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_4
													.setString(
															2,
															USER_MYPIVOT.user_code);
										}

										if (USER_MYPIVOT.user_last_name == null) {
											pstmtInsert_tPostgresqlOutput_4
													.setNull(
															3,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_4
													.setString(
															3,
															USER_MYPIVOT.user_last_name);
										}

										if (USER_MYPIVOT.user_name == null) {
											pstmtInsert_tPostgresqlOutput_4
													.setNull(
															4,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_4
													.setString(
															4,
															USER_MYPIVOT.user_name);
										}

										if (USER_MYPIVOT.user_tax_code == null) {
											pstmtInsert_tPostgresqlOutput_4
													.setNull(
															5,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_4
													.setString(
															5,
															USER_MYPIVOT.user_tax_code);
										}

										if (USER_MYPIVOT.user_domain == null) {
											pstmtInsert_tPostgresqlOutput_4
													.setNull(
															6,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_4
													.setString(
															6,
															USER_MYPIVOT.user_domain);
										}

										if (USER_MYPIVOT.user_mail == null) {
											pstmtInsert_tPostgresqlOutput_4
													.setNull(
															7,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_4
													.setString(
															7,
															USER_MYPIVOT.user_mail);
										}

										if (USER_MYPIVOT.user_address == null) {
											pstmtInsert_tPostgresqlOutput_4
													.setNull(
															8,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_4
													.setString(
															8,
															USER_MYPIVOT.user_address);
										}

										insertedCount_tPostgresqlOutput_4 = insertedCount_tPostgresqlOutput_4
												+ pstmtInsert_tPostgresqlOutput_4
														.executeUpdate();
										nb_line_tPostgresqlOutput_4++;

									} else {
										nb_line_tPostgresqlOutput_4++;

									}
								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_4 = true;
									throw (e);
								}

								tos_count_tPostgresqlOutput_4++;

								/**
								 * [tPostgresqlOutput_4 main ] stop
								 */

							} // End of branch "USER_MYPIVOT"

						} // End of branch "USER_TENANT"

						/**
						 * [tPostgresqlInput_4 end ] start
						 */

						currentComponent = "tPostgresqlInput_4";

					}
				} finally {
					stmt_tPostgresqlInput_4.close();

				}
				globalMap.put("tPostgresqlInput_4_NB_LINE",
						nb_line_tPostgresqlInput_4);

				ok_Hash.put("tPostgresqlInput_4", true);
				end_Hash.put("tPostgresqlInput_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_4",
						end_Hash.get("tPostgresqlInput_4")
								- start_Hash.get("tPostgresqlInput_4"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_4 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

				if (tHash_Lookup_row7 != null) {
					tHash_Lookup_row7.endGet();
				}
				globalMap.remove("tHash_Lookup_row7");

				// ###############################

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row8 != null) {
					tHash_Lookup_row8.endGet();
				}
				globalMap.remove("tHash_Lookup_row8");

				// ###############################

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tMap_6",
						end_Hash.get("tMap_6") - start_Hash.get("tMap_6"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_4 end ] start
				 */

				currentComponent = "tPostgresqlOutput_4";

				if (pstmtUpdate_tPostgresqlOutput_4 != null) {

					pstmtUpdate_tPostgresqlOutput_4.close();

				}
				if (pstmtInsert_tPostgresqlOutput_4 != null) {

					pstmtInsert_tPostgresqlOutput_4.close();

				}

				nb_line_deleted_tPostgresqlOutput_4 = nb_line_deleted_tPostgresqlOutput_4
						+ deletedCount_tPostgresqlOutput_4;
				nb_line_update_tPostgresqlOutput_4 = nb_line_update_tPostgresqlOutput_4
						+ updatedCount_tPostgresqlOutput_4;
				nb_line_inserted_tPostgresqlOutput_4 = nb_line_inserted_tPostgresqlOutput_4
						+ insertedCount_tPostgresqlOutput_4;
				nb_line_rejected_tPostgresqlOutput_4 = nb_line_rejected_tPostgresqlOutput_4
						+ rejectedCount_tPostgresqlOutput_4;

				globalMap.put("tPostgresqlOutput_4_NB_LINE",
						nb_line_tPostgresqlOutput_4);
				globalMap.put("tPostgresqlOutput_4_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_4);
				globalMap.put("tPostgresqlOutput_4_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_4);
				globalMap.put("tPostgresqlOutput_4_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_4);
				globalMap.put("tPostgresqlOutput_4_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_4);

				ok_Hash.put("tPostgresqlOutput_4", true);
				end_Hash.put("tPostgresqlOutput_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlOutput_4",
						end_Hash.get("tPostgresqlOutput_4")
								- start_Hash.get("tPostgresqlOutput_4"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlOutput_4 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tPostgresqlInput_4:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tPostgresqlInput_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_row8");

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_row6");

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_row7");

			try {

				/**
				 * [tPostgresqlInput_4 finally ] start
				 */

				currentComponent = "tPostgresqlInput_4";

				/**
				 * [tPostgresqlInput_4 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_4 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_4";

				/**
				 * [tPostgresqlOutput_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_4_SUBPROCESS_STATE", 1);
	}

	public static class SUPER_ADMIN_MYPAYStruct implements
			routines.system.IPersistableRow<SUPER_ADMIN_MYPAYStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id_user_role_appl_tenant;

		public long getId_user_role_appl_tenant() {
			return this.id_user_role_appl_tenant;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		public long id_user;

		public long getId_user() {
			return this.id_user;
		}

		public long id_role;

		public long getId_role() {
			return this.id_role;
		}

		public long id_application;

		public long getId_application() {
			return this.id_application;
		}

		public long id_tenant;

		public long getId_tenant() {
			return this.id_tenant;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_user_role_appl_tenant;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final SUPER_ADMIN_MYPAYStruct other = (SUPER_ADMIN_MYPAYStruct) obj;

			if (this.id_user_role_appl_tenant != other.id_user_role_appl_tenant)
				return false;

			return true;
		}

		public void copyDataTo(SUPER_ADMIN_MYPAYStruct other) {

			other.id_user_role_appl_tenant = this.id_user_role_appl_tenant;
			other.version = this.version;
			other.id_user = this.id_user;
			other.id_role = this.id_role;
			other.id_application = this.id_application;
			other.id_tenant = this.id_tenant;

		}

		public void copyKeysDataTo(SUPER_ADMIN_MYPAYStruct other) {

			other.id_user_role_appl_tenant = this.id_user_role_appl_tenant;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.id_user_role_appl_tenant = dis.readLong();

					this.version = dis.readInt();

					this.id_user = dis.readLong();

					this.id_role = dis.readLong();

					this.id_application = dis.readLong();

					this.id_tenant = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id_user_role_appl_tenant);

				// int

				dos.writeInt(this.version);

				// long

				dos.writeLong(this.id_user);

				// long

				dos.writeLong(this.id_role);

				// long

				dos.writeLong(this.id_application);

				// long

				dos.writeLong(this.id_tenant);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_user_role_appl_tenant="
					+ String.valueOf(id_user_role_appl_tenant));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",id_role=" + String.valueOf(id_role));
			sb.append(",id_application=" + String.valueOf(id_application));
			sb.append(",id_tenant=" + String.valueOf(id_tenant));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(SUPER_ADMIN_MYPAYStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_user_role_appl_tenant,
					other.id_user_role_appl_tenant);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements
			routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public long mygov_operatore_id;

		public long getMygov_operatore_id() {
			return this.mygov_operatore_id;
		}

		public String ruolo;

		public String getRuolo() {
			return this.ruolo;
		}

		public String cod_fed_user_id;

		public String getCod_fed_user_id() {
			return this.cod_fed_user_id;
		}

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_operatore_id = dis.readLong();

					this.ruolo = readString(dis);

					this.cod_fed_user_id = readString(dis);

					this.cod_ipa_ente = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_operatore_id);

				// String

				writeString(this.ruolo, dos);

				// String

				writeString(this.cod_fed_user_id, dos);

				// String

				writeString(this.cod_ipa_ente, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_operatore_id="
					+ String.valueOf(mygov_operatore_id));
			sb.append(",ruolo=" + ruolo);
			sb.append(",cod_fed_user_id=" + cod_fed_user_id);
			sb.append(",cod_ipa_ente=" + cod_ipa_ente);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tPostgresqlInput_3Struct implements
			routines.system.IPersistableRow<after_tPostgresqlInput_3Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_operatore_id;

		public long getMygov_operatore_id() {
			return this.mygov_operatore_id;
		}

		public String ruolo;

		public String getRuolo() {
			return this.ruolo;
		}

		public String cod_fed_user_id;

		public String getCod_fed_user_id() {
			return this.cod_fed_user_id;
		}

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.mygov_operatore_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tPostgresqlInput_3Struct other = (after_tPostgresqlInput_3Struct) obj;

			if (this.mygov_operatore_id != other.mygov_operatore_id)
				return false;

			return true;
		}

		public void copyDataTo(after_tPostgresqlInput_3Struct other) {

			other.mygov_operatore_id = this.mygov_operatore_id;
			other.ruolo = this.ruolo;
			other.cod_fed_user_id = this.cod_fed_user_id;
			other.cod_ipa_ente = this.cod_ipa_ente;

		}

		public void copyKeysDataTo(after_tPostgresqlInput_3Struct other) {

			other.mygov_operatore_id = this.mygov_operatore_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_operatore_id = dis.readLong();

					this.ruolo = readString(dis);

					this.cod_fed_user_id = readString(dis);

					this.cod_ipa_ente = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_operatore_id);

				// String

				writeString(this.ruolo, dos);

				// String

				writeString(this.cod_fed_user_id, dos);

				// String

				writeString(this.cod_ipa_ente, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_operatore_id="
					+ String.valueOf(mygov_operatore_id));
			sb.append(",ruolo=" + ruolo);
			sb.append(",cod_fed_user_id=" + cod_fed_user_id);
			sb.append(",cod_ipa_ente=" + cod_ipa_ente);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tPostgresqlInput_3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.mygov_operatore_id,
					other.mygov_operatore_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_21Process(globalMap);
				tPostgresqlInput_26Process(globalMap);
				tPostgresqlInput_27Process(globalMap);
				tPostgresqlInput_1Process(globalMap);

				row25Struct row25 = new row25Struct();
				SUPER_ADMIN_MYPAYStruct SUPER_ADMIN_MYPAY = new SUPER_ADMIN_MYPAYStruct();

				/**
				 * [tPostgresqlOutput_14 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_14", false);
				start_Hash.put("tPostgresqlOutput_14",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlOutput_14");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlOutput_14";

				int tos_count_tPostgresqlOutput_14 = 0;

				String dbschema_tPostgresqlOutput_14 = null;
				dbschema_tPostgresqlOutput_14 = (String) globalMap
						.get("schema_" + "tPostgresqlConnection_4");

				String tableName_tPostgresqlOutput_14 = null;
				if (dbschema_tPostgresqlOutput_14 == null
						|| dbschema_tPostgresqlOutput_14.trim().length() == 0) {
					tableName_tPostgresqlOutput_14 = "user_role_appl_tenant";
				} else {
					tableName_tPostgresqlOutput_14 = dbschema_tPostgresqlOutput_14
							+ "\".\"" + "user_role_appl_tenant";
				}

				int updateKeyCount_tPostgresqlOutput_14 = 4;
				if (updateKeyCount_tPostgresqlOutput_14 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_14 = 0;
				int nb_line_update_tPostgresqlOutput_14 = 0;
				int nb_line_inserted_tPostgresqlOutput_14 = 0;
				int nb_line_deleted_tPostgresqlOutput_14 = 0;
				int nb_line_rejected_tPostgresqlOutput_14 = 0;

				int deletedCount_tPostgresqlOutput_14 = 0;
				int updatedCount_tPostgresqlOutput_14 = 0;
				int insertedCount_tPostgresqlOutput_14 = 0;
				int rejectedCount_tPostgresqlOutput_14 = 0;

				boolean whetherReject_tPostgresqlOutput_14 = false;

				java.sql.Connection conn_tPostgresqlOutput_14 = null;

				conn_tPostgresqlOutput_14 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");

				int count_tPostgresqlOutput_14 = 0;
				String update_tPostgresqlOutput_14 = "UPDATE \""
						+ tableName_tPostgresqlOutput_14
						+ "\" SET \"id_user\" = ?,\"id_role\" = ?,\"id_application\" = ?,\"id_tenant\" = ? WHERE \"id_user\" = ? AND \"id_role\" = ? AND \"id_application\" = ? AND \"id_tenant\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_14 = conn_tPostgresqlOutput_14
						.prepareStatement(update_tPostgresqlOutput_14);
				String insert_tPostgresqlOutput_14 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_14
						+ "\" (\""
						+ "id_user_role_appl_tenant"
						+ "\",\"version\",\"id_user\",\"id_role\",\"id_application\",\"id_tenant\") VALUES ("
						+ "nextval('userroleappltenant_id_seq')"
						+ ",?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_14 = conn_tPostgresqlOutput_14
						.prepareStatement(insert_tPostgresqlOutput_14);

				/**
				 * [tPostgresqlOutput_14 begin ] stop
				 */

				/**
				 * [tMap_23 begin ] start
				 */

				ok_Hash.put("tMap_23", false);
				start_Hash.put("tMap_23", System.currentTimeMillis());

				currentComponent = "tMap_23";

				int tos_count_tMap_23 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) globalMap
						.get("tHash_Lookup_row22"));

				row22Struct row22HashKey = new row22Struct();
				row22Struct row22Default = new row22Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) globalMap
						.get("tHash_Lookup_row26"));

				tHash_Lookup_row26.initGet();

				row26Struct row26HashKey = new row26Struct();
				row26Struct row26Default = new row26Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) globalMap
						.get("tHash_Lookup_row30"));

				tHash_Lookup_row30.initGet();

				row30Struct row30HashKey = new row30Struct();
				row30Struct row30Default = new row30Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) globalMap
						.get("tHash_Lookup_row31"));

				tHash_Lookup_row31.initGet();

				row31Struct row31HashKey = new row31Struct();
				row31Struct row31Default = new row31Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_23__Struct {
				}
				Var__tMap_23__Struct Var__tMap_23 = new Var__tMap_23__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				SUPER_ADMIN_MYPAYStruct SUPER_ADMIN_MYPAY_tmp = new SUPER_ADMIN_MYPAYStruct();
				// ###############################

				/**
				 * [tMap_23 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_3", false);
				start_Hash
						.put("tPostgresqlInput_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_3");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_3";

				int tos_count_tPostgresqlInput_3 = 0;

				int nb_line_tPostgresqlInput_3 = 0;
				java.sql.Connection conn_tPostgresqlInput_3 = null;
				conn_tPostgresqlInput_3 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3
						.createStatement();

				String dbquery_tPostgresqlInput_3 = "SELECT \n  \"mygov_operatore\".\"mygov_operatore_id\", \n  \"mygov_operatore\".\"ruolo\", \n  \"mygov_operatore\".\"cod_fed_user_id\", \n  \"mygov_operatore\".\"cod_ipa_ente\"\nFROM \"mygov_operatore\"\nWHERE split_part(\"mygov_operatore\".\"cod_fed_user_id\", '-', 2) <> 'WS_USER'\n       AND cod_ipa_ente = 'R_VENETO'\n       AND ruolo = 'ROLE_ADMIN'\n";

				globalMap.put("tPostgresqlInput_3_QUERY",
						dbquery_tPostgresqlInput_3);
				java.sql.ResultSet rs_tPostgresqlInput_3 = null;
				try {
					rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3
							.executeQuery(dbquery_tPostgresqlInput_3);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3
							.getColumnCount();

					String tmpContent_tPostgresqlInput_3 = null;

					while (rs_tPostgresqlInput_3.next()) {
						nb_line_tPostgresqlInput_3++;

						if (colQtyInRs_tPostgresqlInput_3 < 1) {
							row25.mygov_operatore_id = 0;
						} else {

							if (rs_tPostgresqlInput_3.getObject(1) != null) {
								row25.mygov_operatore_id = rs_tPostgresqlInput_3
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 2) {
							row25.ruolo = null;
						} else {

							tmpContent_tPostgresqlInput_3 = rs_tPostgresqlInput_3
									.getString(2);
							if (tmpContent_tPostgresqlInput_3 != null) {
								row25.ruolo = tmpContent_tPostgresqlInput_3
										.trim();
							} else {
								row25.ruolo = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 3) {
							row25.cod_fed_user_id = null;
						} else {

							tmpContent_tPostgresqlInput_3 = rs_tPostgresqlInput_3
									.getString(3);
							if (tmpContent_tPostgresqlInput_3 != null) {
								row25.cod_fed_user_id = tmpContent_tPostgresqlInput_3
										.trim();
							} else {
								row25.cod_fed_user_id = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 4) {
							row25.cod_ipa_ente = null;
						} else {

							tmpContent_tPostgresqlInput_3 = rs_tPostgresqlInput_3
									.getString(4);
							if (tmpContent_tPostgresqlInput_3 != null) {
								row25.cod_ipa_ente = tmpContent_tPostgresqlInput_3
										.trim();
							} else {
								row25.cod_ipa_ente = null;
							}
						}

						/**
						 * [tPostgresqlInput_3 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_3 main ] start
						 */

						currentComponent = "tPostgresqlInput_3";

						tos_count_tPostgresqlInput_3++;

						/**
						 * [tPostgresqlInput_3 main ] stop
						 */

						/**
						 * [tMap_23 main ] start
						 */

						currentComponent = "tMap_23";

						boolean hasCasePrimitiveKeyWithNull_tMap_23 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_23 = false;
						boolean mainRowRejected_tMap_23 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row22"
						// /////////////////////////////////////////////

						boolean forceLooprow22 = false;

						row22Struct row22ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_23) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_23 = false;

							row22HashKey.user_code = row25.cod_fed_user_id;

							row22HashKey.hashCodeDirty = true;

							tHash_Lookup_row22.lookup(row22HashKey);

							if (!tHash_Lookup_row22.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_23 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row22 != null
								&& tHash_Lookup_row22.getCount(row22HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row22' and it contains more one result from keys :  row22.user_code = '"
							// + row22HashKey.user_code + "'");
						} // G 071

						row22Struct row22 = null;

						row22Struct fromLookup_row22 = null;
						row22 = row22Default;

						if (tHash_Lookup_row22 != null
								&& tHash_Lookup_row22.hasNext()) { // G 099

							fromLookup_row22 = tHash_Lookup_row22.next();

						} // G 099

						if (fromLookup_row22 != null) {
							row22 = fromLookup_row22;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row26"
						// /////////////////////////////////////////////

						boolean forceLooprow26 = false;

						row26Struct row26ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_23) { // G_TM_M_020

							tHash_Lookup_row26.lookup(row26HashKey);

							if (!tHash_Lookup_row26.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_23 = true;

								forceLooprow26 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprow26 = true;
						} // G 21

						row26Struct row26 = null;

						while ((tHash_Lookup_row26 != null && tHash_Lookup_row26
								.hasNext()) || forceLooprow26) { // G_TM_M_043

							// CALL close loop of lookup 'row26'

							row26Struct fromLookup_row26 = null;
							row26 = row26Default;

							if (!forceLooprow26) { // G 46

								fromLookup_row26 = tHash_Lookup_row26.next();

								if (fromLookup_row26 != null) {
									row26 = fromLookup_row26;
								}

							} // G 46

							forceLooprow26 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row30"
							// /////////////////////////////////////////////

							boolean forceLooprow30 = false;

							row30Struct row30ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_23) { // G_TM_M_020

								tHash_Lookup_row30.lookup(row30HashKey);

								if (!tHash_Lookup_row30.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_23 = true;

									forceLooprow30 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLooprow30 = true;
							} // G 21

							row30Struct row30 = null;

							while ((tHash_Lookup_row30 != null && tHash_Lookup_row30
									.hasNext()) || forceLooprow30) { // G_TM_M_043

								// CALL close loop of lookup 'row30'

								row30Struct fromLookup_row30 = null;
								row30 = row30Default;

								if (!forceLooprow30) { // G 46

									fromLookup_row30 = tHash_Lookup_row30
											.next();

									if (fromLookup_row30 != null) {
										row30 = fromLookup_row30;
									}

								} // G 46

								forceLooprow30 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row31"
								// /////////////////////////////////////////////

								boolean forceLooprow31 = false;

								row31Struct row31ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_23) { // G_TM_M_020

									tHash_Lookup_row31.lookup(row31HashKey);

									if (!tHash_Lookup_row31.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_23 = true;

										forceLooprow31 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								else { // G 20 - G 21
									forceLooprow31 = true;
								} // G 21

								row31Struct row31 = null;

								while ((tHash_Lookup_row31 != null && tHash_Lookup_row31
										.hasNext()) || forceLooprow31) { // G_TM_M_043

									// CALL close loop of lookup 'row31'

									row31Struct fromLookup_row31 = null;
									row31 = row31Default;

									if (!forceLooprow31) { // G 46

										fromLookup_row31 = tHash_Lookup_row31
												.next();

										if (fromLookup_row31 != null) {
											row31 = fromLookup_row31;
										}

									} // G 46

									forceLooprow31 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_23__Struct Var = Var__tMap_23;// ###############################
										// ###############################
										// # Output tables

										SUPER_ADMIN_MYPAY = null;

										if (!rejectedInnerJoin_tMap_23) {

											// # Output table :
											// 'SUPER_ADMIN_MYPAY'
											SUPER_ADMIN_MYPAY_tmp.id_user_role_appl_tenant = 0;
											SUPER_ADMIN_MYPAY_tmp.version = 0;
											SUPER_ADMIN_MYPAY_tmp.id_user = row22.id_user;
											SUPER_ADMIN_MYPAY_tmp.id_role = row26.id_role;
											SUPER_ADMIN_MYPAY_tmp.id_application = row30.id_application;
											SUPER_ADMIN_MYPAY_tmp.id_tenant = row31.id_tenant;
											SUPER_ADMIN_MYPAY = SUPER_ADMIN_MYPAY_tmp;
										} // closing inner join bracket (2)
											// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_23 = false;

									tos_count_tMap_23++;

									/**
									 * [tMap_23 main ] stop
									 */
									// Start of branch "SUPER_ADMIN_MYPAY"
									if (SUPER_ADMIN_MYPAY != null) {

										/**
										 * [tPostgresqlOutput_14 main ] start
										 */

										currentComponent = "tPostgresqlOutput_14";

										whetherReject_tPostgresqlOutput_14 = false;
										int updateFlag_tPostgresqlOutput_14 = 0;
										pstmtUpdate_tPostgresqlOutput_14
												.setLong(
														1,
														SUPER_ADMIN_MYPAY.id_user);

										pstmtUpdate_tPostgresqlOutput_14
												.setLong(
														2,
														SUPER_ADMIN_MYPAY.id_role);

										pstmtUpdate_tPostgresqlOutput_14
												.setLong(
														3,
														SUPER_ADMIN_MYPAY.id_application);

										pstmtUpdate_tPostgresqlOutput_14
												.setLong(
														4,
														SUPER_ADMIN_MYPAY.id_tenant);

										pstmtUpdate_tPostgresqlOutput_14
												.setLong(
														5 + count_tPostgresqlOutput_14,
														SUPER_ADMIN_MYPAY.id_user);

										pstmtUpdate_tPostgresqlOutput_14
												.setLong(
														6 + count_tPostgresqlOutput_14,
														SUPER_ADMIN_MYPAY.id_role);

										pstmtUpdate_tPostgresqlOutput_14
												.setLong(
														7 + count_tPostgresqlOutput_14,
														SUPER_ADMIN_MYPAY.id_application);

										pstmtUpdate_tPostgresqlOutput_14
												.setLong(
														8 + count_tPostgresqlOutput_14,
														SUPER_ADMIN_MYPAY.id_tenant);

										try {

											updateFlag_tPostgresqlOutput_14 = pstmtUpdate_tPostgresqlOutput_14
													.executeUpdate();
											updatedCount_tPostgresqlOutput_14 = updatedCount_tPostgresqlOutput_14
													+ updateFlag_tPostgresqlOutput_14;

											if (updateFlag_tPostgresqlOutput_14 == 0) {

												pstmtInsert_tPostgresqlOutput_14
														.setInt(1,
																SUPER_ADMIN_MYPAY.version);

												pstmtInsert_tPostgresqlOutput_14
														.setLong(
																2,
																SUPER_ADMIN_MYPAY.id_user);

												pstmtInsert_tPostgresqlOutput_14
														.setLong(
																3,
																SUPER_ADMIN_MYPAY.id_role);

												pstmtInsert_tPostgresqlOutput_14
														.setLong(
																4,
																SUPER_ADMIN_MYPAY.id_application);

												pstmtInsert_tPostgresqlOutput_14
														.setLong(
																5,
																SUPER_ADMIN_MYPAY.id_tenant);

												insertedCount_tPostgresqlOutput_14 = insertedCount_tPostgresqlOutput_14
														+ pstmtInsert_tPostgresqlOutput_14
																.executeUpdate();
												nb_line_tPostgresqlOutput_14++;

											} else {
												nb_line_tPostgresqlOutput_14++;

											}
										} catch (java.lang.Exception e) {

											whetherReject_tPostgresqlOutput_14 = true;
											throw (e);
										}

										tos_count_tPostgresqlOutput_14++;

										/**
										 * [tPostgresqlOutput_14 main ] stop
										 */

									} // End of branch "SUPER_ADMIN_MYPAY"

								} // close loop of lookup 'row31' // G_TM_M_043

							} // close loop of lookup 'row30' // G_TM_M_043

						} // close loop of lookup 'row26' // G_TM_M_043

						/**
						 * [tPostgresqlInput_3 end ] start
						 */

						currentComponent = "tPostgresqlInput_3";

					}
				} finally {
					stmt_tPostgresqlInput_3.close();

				}
				globalMap.put("tPostgresqlInput_3_NB_LINE",
						nb_line_tPostgresqlInput_3);

				ok_Hash.put("tPostgresqlInput_3", true);
				end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_3",
						end_Hash.get("tPostgresqlInput_3")
								- start_Hash.get("tPostgresqlInput_3"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_3 end ] stop
				 */

				/**
				 * [tMap_23 end ] start
				 */

				currentComponent = "tMap_23";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row22 != null) {
					tHash_Lookup_row22.endGet();
				}
				globalMap.remove("tHash_Lookup_row22");

				if (tHash_Lookup_row26 != null) {
					tHash_Lookup_row26.endGet();
				}
				globalMap.remove("tHash_Lookup_row26");

				if (tHash_Lookup_row30 != null) {
					tHash_Lookup_row30.endGet();
				}
				globalMap.remove("tHash_Lookup_row30");

				if (tHash_Lookup_row31 != null) {
					tHash_Lookup_row31.endGet();
				}
				globalMap.remove("tHash_Lookup_row31");

				// ###############################

				ok_Hash.put("tMap_23", true);
				end_Hash.put("tMap_23", System.currentTimeMillis());

				/**
				 * [tMap_23 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_14 end ] start
				 */

				currentComponent = "tPostgresqlOutput_14";

				if (pstmtUpdate_tPostgresqlOutput_14 != null) {

					pstmtUpdate_tPostgresqlOutput_14.close();

				}
				if (pstmtInsert_tPostgresqlOutput_14 != null) {

					pstmtInsert_tPostgresqlOutput_14.close();

				}

				nb_line_deleted_tPostgresqlOutput_14 = nb_line_deleted_tPostgresqlOutput_14
						+ deletedCount_tPostgresqlOutput_14;
				nb_line_update_tPostgresqlOutput_14 = nb_line_update_tPostgresqlOutput_14
						+ updatedCount_tPostgresqlOutput_14;
				nb_line_inserted_tPostgresqlOutput_14 = nb_line_inserted_tPostgresqlOutput_14
						+ insertedCount_tPostgresqlOutput_14;
				nb_line_rejected_tPostgresqlOutput_14 = nb_line_rejected_tPostgresqlOutput_14
						+ rejectedCount_tPostgresqlOutput_14;

				globalMap.put("tPostgresqlOutput_14_NB_LINE",
						nb_line_tPostgresqlOutput_14);
				globalMap.put("tPostgresqlOutput_14_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_14);
				globalMap.put("tPostgresqlOutput_14_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_14);
				globalMap.put("tPostgresqlOutput_14_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_14);
				globalMap.put("tPostgresqlOutput_14_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_14);

				ok_Hash.put("tPostgresqlOutput_14", true);
				end_Hash.put("tPostgresqlOutput_14", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlOutput_14",
						end_Hash.get("tPostgresqlOutput_14")
								- start_Hash.get("tPostgresqlOutput_14"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlOutput_14 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tPostgresqlInput_3:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tPostgresqlInput_8Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_23"
			globalMap.remove("tHash_Lookup_row26");

			// free memory for "tMap_23"
			globalMap.remove("tHash_Lookup_row30");

			// free memory for "tMap_23"
			globalMap.remove("tHash_Lookup_row31");

			// free memory for "tMap_23"
			globalMap.remove("tHash_Lookup_row22");

			try {

				/**
				 * [tPostgresqlInput_3 finally ] start
				 */

				currentComponent = "tPostgresqlInput_3";

				/**
				 * [tPostgresqlInput_3 finally ] stop
				 */

				/**
				 * [tMap_23 finally ] start
				 */

				currentComponent = "tMap_23";

				/**
				 * [tMap_23 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_14 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_14";

				/**
				 * [tPostgresqlOutput_14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}

	public static class USER_ROLE_MYPIVOTStruct implements
			routines.system.IPersistableRow<USER_ROLE_MYPIVOTStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id_user_role_appl_tenant;

		public long getId_user_role_appl_tenant() {
			return this.id_user_role_appl_tenant;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		public long id_user;

		public long getId_user() {
			return this.id_user;
		}

		public long id_role;

		public long getId_role() {
			return this.id_role;
		}

		public long id_application;

		public long getId_application() {
			return this.id_application;
		}

		public long id_tenant;

		public long getId_tenant() {
			return this.id_tenant;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_user_role_appl_tenant;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final USER_ROLE_MYPIVOTStruct other = (USER_ROLE_MYPIVOTStruct) obj;

			if (this.id_user_role_appl_tenant != other.id_user_role_appl_tenant)
				return false;

			return true;
		}

		public void copyDataTo(USER_ROLE_MYPIVOTStruct other) {

			other.id_user_role_appl_tenant = this.id_user_role_appl_tenant;
			other.version = this.version;
			other.id_user = this.id_user;
			other.id_role = this.id_role;
			other.id_application = this.id_application;
			other.id_tenant = this.id_tenant;

		}

		public void copyKeysDataTo(USER_ROLE_MYPIVOTStruct other) {

			other.id_user_role_appl_tenant = this.id_user_role_appl_tenant;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.id_user_role_appl_tenant = dis.readLong();

					this.version = dis.readInt();

					this.id_user = dis.readLong();

					this.id_role = dis.readLong();

					this.id_application = dis.readLong();

					this.id_tenant = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id_user_role_appl_tenant);

				// int

				dos.writeInt(this.version);

				// long

				dos.writeLong(this.id_user);

				// long

				dos.writeLong(this.id_role);

				// long

				dos.writeLong(this.id_application);

				// long

				dos.writeLong(this.id_tenant);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_user_role_appl_tenant="
					+ String.valueOf(id_user_role_appl_tenant));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",id_user=" + String.valueOf(id_user));
			sb.append(",id_role=" + String.valueOf(id_role));
			sb.append(",id_application=" + String.valueOf(id_application));
			sb.append(",id_tenant=" + String.valueOf(id_tenant));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(USER_ROLE_MYPIVOTStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_user_role_appl_tenant,
					other.id_user_role_appl_tenant);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements
			routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public long mygov_operatore_id;

		public long getMygov_operatore_id() {
			return this.mygov_operatore_id;
		}

		public String ruolo;

		public String getRuolo() {
			return this.ruolo;
		}

		public String cod_fed_user_id;

		public String getCod_fed_user_id() {
			return this.cod_fed_user_id;
		}

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_operatore_id = dis.readLong();

					this.ruolo = readString(dis);

					this.cod_fed_user_id = readString(dis);

					this.cod_ipa_ente = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_operatore_id);

				// String

				writeString(this.ruolo, dos);

				// String

				writeString(this.cod_fed_user_id, dos);

				// String

				writeString(this.cod_ipa_ente, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_operatore_id="
					+ String.valueOf(mygov_operatore_id));
			sb.append(",ruolo=" + ruolo);
			sb.append(",cod_fed_user_id=" + cod_fed_user_id);
			sb.append(",cod_ipa_ente=" + cod_ipa_ente);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tPostgresqlInput_8Struct implements
			routines.system.IPersistableRow<after_tPostgresqlInput_8Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_operatore_id;

		public long getMygov_operatore_id() {
			return this.mygov_operatore_id;
		}

		public String ruolo;

		public String getRuolo() {
			return this.ruolo;
		}

		public String cod_fed_user_id;

		public String getCod_fed_user_id() {
			return this.cod_fed_user_id;
		}

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.mygov_operatore_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tPostgresqlInput_8Struct other = (after_tPostgresqlInput_8Struct) obj;

			if (this.mygov_operatore_id != other.mygov_operatore_id)
				return false;

			return true;
		}

		public void copyDataTo(after_tPostgresqlInput_8Struct other) {

			other.mygov_operatore_id = this.mygov_operatore_id;
			other.ruolo = this.ruolo;
			other.cod_fed_user_id = this.cod_fed_user_id;
			other.cod_ipa_ente = this.cod_ipa_ente;

		}

		public void copyKeysDataTo(after_tPostgresqlInput_8Struct other) {

			other.mygov_operatore_id = this.mygov_operatore_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_operatore_id = dis.readLong();

					this.ruolo = readString(dis);

					this.cod_fed_user_id = readString(dis);

					this.cod_ipa_ente = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_operatore_id);

				// String

				writeString(this.ruolo, dos);

				// String

				writeString(this.cod_fed_user_id, dos);

				// String

				writeString(this.cod_ipa_ente, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_operatore_id="
					+ String.valueOf(mygov_operatore_id));
			sb.append(",ruolo=" + ruolo);
			sb.append(",cod_fed_user_id=" + cod_fed_user_id);
			sb.append(",cod_ipa_ente=" + cod_ipa_ente);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tPostgresqlInput_8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.mygov_operatore_id,
					other.mygov_operatore_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_8Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_10Process(globalMap);
				tPostgresqlInput_17Process(globalMap);
				tPostgresqlInput_18Process(globalMap);
				tPostgresqlInput_19Process(globalMap);

				row9Struct row9 = new row9Struct();
				USER_ROLE_MYPIVOTStruct USER_ROLE_MYPIVOT = new USER_ROLE_MYPIVOTStruct();

				/**
				 * [tPostgresqlOutput_5 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_5", false);
				start_Hash.put("tPostgresqlOutput_5",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlOutput_5");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlOutput_5";

				int tos_count_tPostgresqlOutput_5 = 0;

				String dbschema_tPostgresqlOutput_5 = null;
				dbschema_tPostgresqlOutput_5 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_4");

				String tableName_tPostgresqlOutput_5 = null;
				if (dbschema_tPostgresqlOutput_5 == null
						|| dbschema_tPostgresqlOutput_5.trim().length() == 0) {
					tableName_tPostgresqlOutput_5 = "user_role_appl_tenant";
				} else {
					tableName_tPostgresqlOutput_5 = dbschema_tPostgresqlOutput_5
							+ "\".\"" + "user_role_appl_tenant";
				}

				int updateKeyCount_tPostgresqlOutput_5 = 4;
				if (updateKeyCount_tPostgresqlOutput_5 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_5 = 0;
				int nb_line_update_tPostgresqlOutput_5 = 0;
				int nb_line_inserted_tPostgresqlOutput_5 = 0;
				int nb_line_deleted_tPostgresqlOutput_5 = 0;
				int nb_line_rejected_tPostgresqlOutput_5 = 0;

				int deletedCount_tPostgresqlOutput_5 = 0;
				int updatedCount_tPostgresqlOutput_5 = 0;
				int insertedCount_tPostgresqlOutput_5 = 0;
				int rejectedCount_tPostgresqlOutput_5 = 0;

				boolean whetherReject_tPostgresqlOutput_5 = false;

				java.sql.Connection conn_tPostgresqlOutput_5 = null;

				conn_tPostgresqlOutput_5 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");

				int count_tPostgresqlOutput_5 = 0;
				String update_tPostgresqlOutput_5 = "UPDATE \""
						+ tableName_tPostgresqlOutput_5
						+ "\" SET \"id_user\" = ?,\"id_role\" = ?,\"id_application\" = ?,\"id_tenant\" = ? WHERE \"id_user\" = ? AND \"id_role\" = ? AND \"id_application\" = ? AND \"id_tenant\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5
						.prepareStatement(update_tPostgresqlOutput_5);
				String insert_tPostgresqlOutput_5 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_5
						+ "\" (\""
						+ "id_user_role_appl_tenant"
						+ "\",\"version\",\"id_user\",\"id_role\",\"id_application\",\"id_tenant\") VALUES ("
						+ "nextval('userroleappltenant_id_seq')"
						+ ",?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_5 = conn_tPostgresqlOutput_5
						.prepareStatement(insert_tPostgresqlOutput_5);

				/**
				 * [tPostgresqlOutput_5 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				int tos_count_tMap_7 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) globalMap
						.get("tHash_Lookup_row24"));

				row24Struct row24HashKey = new row24Struct();
				row24Struct row24Default = new row24Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) globalMap
						.get("tHash_Lookup_row14"));

				tHash_Lookup_row14.initGet();

				row14Struct row14HashKey = new row14Struct();
				row14Struct row14Default = new row14Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) globalMap
						.get("tHash_Lookup_row21"));

				tHash_Lookup_row21.initGet();

				row21Struct row21HashKey = new row21Struct();
				row21Struct row21Default = new row21Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) globalMap
						.get("tHash_Lookup_row13"));

				row13Struct row13HashKey = new row13Struct();
				row13Struct row13Default = new row13Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				USER_ROLE_MYPIVOTStruct USER_ROLE_MYPIVOT_tmp = new USER_ROLE_MYPIVOTStruct();
				// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_8 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_8", false);
				start_Hash
						.put("tPostgresqlInput_8", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_8");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_8";

				int tos_count_tPostgresqlInput_8 = 0;

				int nb_line_tPostgresqlInput_8 = 0;
				java.sql.Connection conn_tPostgresqlInput_8 = null;
				conn_tPostgresqlInput_8 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_8 = conn_tPostgresqlInput_8
						.createStatement();

				String dbquery_tPostgresqlInput_8 = "SELECT \n  \"mygov_operatore\".\"mygov_operatore_id\", \n  \"mygov_operatore\".\"ruolo\", \n  \"mygov_operatore\".\"cod_fed_user_id\", \n  \"mygov_operatore\".\"cod_ipa_ente\"\nFROM \"mygov_operatore\"\nWHERE split_part(\"mygov_operatore\".\"cod_fed_user_id\", '-', 2) <> 'WS_USER'\n";

				globalMap.put("tPostgresqlInput_8_QUERY",
						dbquery_tPostgresqlInput_8);
				java.sql.ResultSet rs_tPostgresqlInput_8 = null;
				try {
					rs_tPostgresqlInput_8 = stmt_tPostgresqlInput_8
							.executeQuery(dbquery_tPostgresqlInput_8);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_8 = rs_tPostgresqlInput_8
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_8 = rsmd_tPostgresqlInput_8
							.getColumnCount();

					String tmpContent_tPostgresqlInput_8 = null;

					while (rs_tPostgresqlInput_8.next()) {
						nb_line_tPostgresqlInput_8++;

						if (colQtyInRs_tPostgresqlInput_8 < 1) {
							row9.mygov_operatore_id = 0;
						} else {

							if (rs_tPostgresqlInput_8.getObject(1) != null) {
								row9.mygov_operatore_id = rs_tPostgresqlInput_8
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_8 < 2) {
							row9.ruolo = null;
						} else {

							tmpContent_tPostgresqlInput_8 = rs_tPostgresqlInput_8
									.getString(2);
							if (tmpContent_tPostgresqlInput_8 != null) {
								row9.ruolo = tmpContent_tPostgresqlInput_8
										.trim();
							} else {
								row9.ruolo = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_8 < 3) {
							row9.cod_fed_user_id = null;
						} else {

							tmpContent_tPostgresqlInput_8 = rs_tPostgresqlInput_8
									.getString(3);
							if (tmpContent_tPostgresqlInput_8 != null) {
								row9.cod_fed_user_id = tmpContent_tPostgresqlInput_8
										.trim();
							} else {
								row9.cod_fed_user_id = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_8 < 4) {
							row9.cod_ipa_ente = null;
						} else {

							tmpContent_tPostgresqlInput_8 = rs_tPostgresqlInput_8
									.getString(4);
							if (tmpContent_tPostgresqlInput_8 != null) {
								row9.cod_ipa_ente = tmpContent_tPostgresqlInput_8
										.trim();
							} else {
								row9.cod_ipa_ente = null;
							}
						}

						/**
						 * [tPostgresqlInput_8 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_8 main ] start
						 */

						currentComponent = "tPostgresqlInput_8";

						tos_count_tPostgresqlInput_8++;

						/**
						 * [tPostgresqlInput_8 main ] stop
						 */

						/**
						 * [tMap_7 main ] start
						 */

						currentComponent = "tMap_7";

						boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_7 = false;
						boolean mainRowRejected_tMap_7 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row24"
						// /////////////////////////////////////////////

						boolean forceLooprow24 = false;

						row24Struct row24ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_7 = false;

							row24HashKey.user_code = row9.cod_fed_user_id;

							row24HashKey.hashCodeDirty = true;

							tHash_Lookup_row24.lookup(row24HashKey);

							if (!tHash_Lookup_row24.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_7 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row24 != null
								&& tHash_Lookup_row24.getCount(row24HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row24' and it contains more one result from keys :  row24.user_code = '"
							// + row24HashKey.user_code + "'");
						} // G 071

						row24Struct row24 = null;

						row24Struct fromLookup_row24 = null;
						row24 = row24Default;

						if (tHash_Lookup_row24 != null
								&& tHash_Lookup_row24.hasNext()) { // G 099

							fromLookup_row24 = tHash_Lookup_row24.next();

						} // G 099

						if (fromLookup_row24 != null) {
							row24 = fromLookup_row24;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "row14"
						// /////////////////////////////////////////////

						boolean forceLooprow14 = false;

						row14Struct row14ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

							tHash_Lookup_row14.lookup(row14HashKey);

							if (!tHash_Lookup_row14.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_7 = true;

								forceLooprow14 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						else { // G 20 - G 21
							forceLooprow14 = true;
						} // G 21

						row14Struct row14 = null;

						while ((tHash_Lookup_row14 != null && tHash_Lookup_row14
								.hasNext()) || forceLooprow14) { // G_TM_M_043

							// CALL close loop of lookup 'row14'

							row14Struct fromLookup_row14 = null;
							row14 = row14Default;

							if (!forceLooprow14) { // G 46

								fromLookup_row14 = tHash_Lookup_row14.next();

								if (fromLookup_row14 != null) {
									row14 = fromLookup_row14;
								}

							} // G 46

							forceLooprow14 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row21"
							// /////////////////////////////////////////////

							boolean forceLooprow21 = false;

							row21Struct row21ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								tHash_Lookup_row21.lookup(row21HashKey);

								if (!tHash_Lookup_row21.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_7 = true;

									forceLooprow21 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLooprow21 = true;
							} // G 21

							row21Struct row21 = null;

							while ((tHash_Lookup_row21 != null && tHash_Lookup_row21
									.hasNext()) || forceLooprow21) { // G_TM_M_043

								// CALL close loop of lookup 'row21'

								row21Struct fromLookup_row21 = null;
								row21 = row21Default;

								if (!forceLooprow21) { // G 46

									fromLookup_row21 = tHash_Lookup_row21
											.next();

									if (fromLookup_row21 != null) {
										row21 = fromLookup_row21;
									}

								} // G 46

								forceLooprow21 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row13"
								// /////////////////////////////////////////////

								boolean forceLooprow13 = false;

								row13Struct row13ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_7) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_7 = false;

									row13HashKey.tenant_code = row9.cod_ipa_ente;

									row13HashKey.hashCodeDirty = true;

									tHash_Lookup_row13.lookup(row13HashKey);

									if (!tHash_Lookup_row13.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_7 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_row13 != null
										&& tHash_Lookup_row13
												.getCount(row13HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.tenant_code = '"
									// + row13HashKey.tenant_code + "'");
								} // G 071

								row13Struct row13 = null;

								row13Struct fromLookup_row13 = null;
								row13 = row13Default;

								if (tHash_Lookup_row13 != null
										&& tHash_Lookup_row13.hasNext()) { // G
																			// 099

									fromLookup_row13 = tHash_Lookup_row13
											.next();

								} // G 099

								if (fromLookup_row13 != null) {
									row13 = fromLookup_row13;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
									// ###############################
									// # Output tables

									USER_ROLE_MYPIVOT = null;

									if (!rejectedInnerJoin_tMap_7) {

										// # Output table : 'USER_ROLE_MYPIVOT'
										USER_ROLE_MYPIVOT_tmp.id_user_role_appl_tenant = 0;
										USER_ROLE_MYPIVOT_tmp.version = 0;
										USER_ROLE_MYPIVOT_tmp.id_user = row24.id_user;
										USER_ROLE_MYPIVOT_tmp.id_role = row14.id_role;
										USER_ROLE_MYPIVOT_tmp.id_application = row21.id_application;
										USER_ROLE_MYPIVOT_tmp.id_tenant = row13.id_tenant;
										USER_ROLE_MYPIVOT = USER_ROLE_MYPIVOT_tmp;
									} // closing inner join bracket (2)
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_7 = false;

								tos_count_tMap_7++;

								/**
								 * [tMap_7 main ] stop
								 */
								// Start of branch "USER_ROLE_MYPIVOT"
								if (USER_ROLE_MYPIVOT != null) {

									/**
									 * [tPostgresqlOutput_5 main ] start
									 */

									currentComponent = "tPostgresqlOutput_5";

									whetherReject_tPostgresqlOutput_5 = false;
									int updateFlag_tPostgresqlOutput_5 = 0;
									pstmtUpdate_tPostgresqlOutput_5.setLong(1,
											USER_ROLE_MYPIVOT.id_user);

									pstmtUpdate_tPostgresqlOutput_5.setLong(2,
											USER_ROLE_MYPIVOT.id_role);

									pstmtUpdate_tPostgresqlOutput_5.setLong(3,
											USER_ROLE_MYPIVOT.id_application);

									pstmtUpdate_tPostgresqlOutput_5.setLong(4,
											USER_ROLE_MYPIVOT.id_tenant);

									pstmtUpdate_tPostgresqlOutput_5.setLong(
											5 + count_tPostgresqlOutput_5,
											USER_ROLE_MYPIVOT.id_user);

									pstmtUpdate_tPostgresqlOutput_5.setLong(
											6 + count_tPostgresqlOutput_5,
											USER_ROLE_MYPIVOT.id_role);

									pstmtUpdate_tPostgresqlOutput_5.setLong(
											7 + count_tPostgresqlOutput_5,
											USER_ROLE_MYPIVOT.id_application);

									pstmtUpdate_tPostgresqlOutput_5.setLong(
											8 + count_tPostgresqlOutput_5,
											USER_ROLE_MYPIVOT.id_tenant);

									try {

										updateFlag_tPostgresqlOutput_5 = pstmtUpdate_tPostgresqlOutput_5
												.executeUpdate();
										updatedCount_tPostgresqlOutput_5 = updatedCount_tPostgresqlOutput_5
												+ updateFlag_tPostgresqlOutput_5;

										if (updateFlag_tPostgresqlOutput_5 == 0) {

											pstmtInsert_tPostgresqlOutput_5
													.setInt(1,
															USER_ROLE_MYPIVOT.version);

											pstmtInsert_tPostgresqlOutput_5
													.setLong(
															2,
															USER_ROLE_MYPIVOT.id_user);

											pstmtInsert_tPostgresqlOutput_5
													.setLong(
															3,
															USER_ROLE_MYPIVOT.id_role);

											pstmtInsert_tPostgresqlOutput_5
													.setLong(
															4,
															USER_ROLE_MYPIVOT.id_application);

											pstmtInsert_tPostgresqlOutput_5
													.setLong(
															5,
															USER_ROLE_MYPIVOT.id_tenant);

											insertedCount_tPostgresqlOutput_5 = insertedCount_tPostgresqlOutput_5
													+ pstmtInsert_tPostgresqlOutput_5
															.executeUpdate();
											nb_line_tPostgresqlOutput_5++;

										} else {
											nb_line_tPostgresqlOutput_5++;

										}
									} catch (java.lang.Exception e) {

										whetherReject_tPostgresqlOutput_5 = true;
										throw (e);
									}

									tos_count_tPostgresqlOutput_5++;

									/**
									 * [tPostgresqlOutput_5 main ] stop
									 */

								} // End of branch "USER_ROLE_MYPIVOT"

							} // close loop of lookup 'row21' // G_TM_M_043

						} // close loop of lookup 'row14' // G_TM_M_043

						/**
						 * [tPostgresqlInput_8 end ] start
						 */

						currentComponent = "tPostgresqlInput_8";

					}
				} finally {
					stmt_tPostgresqlInput_8.close();

				}
				globalMap.put("tPostgresqlInput_8_NB_LINE",
						nb_line_tPostgresqlInput_8);

				ok_Hash.put("tPostgresqlInput_8", true);
				end_Hash.put("tPostgresqlInput_8", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_8",
						end_Hash.get("tPostgresqlInput_8")
								- start_Hash.get("tPostgresqlInput_8"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_8 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row24 != null) {
					tHash_Lookup_row24.endGet();
				}
				globalMap.remove("tHash_Lookup_row24");

				if (tHash_Lookup_row14 != null) {
					tHash_Lookup_row14.endGet();
				}
				globalMap.remove("tHash_Lookup_row14");

				if (tHash_Lookup_row21 != null) {
					tHash_Lookup_row21.endGet();
				}
				globalMap.remove("tHash_Lookup_row21");

				if (tHash_Lookup_row13 != null) {
					tHash_Lookup_row13.endGet();
				}
				globalMap.remove("tHash_Lookup_row13");

				// ###############################

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_5 end ] start
				 */

				currentComponent = "tPostgresqlOutput_5";

				if (pstmtUpdate_tPostgresqlOutput_5 != null) {

					pstmtUpdate_tPostgresqlOutput_5.close();

				}
				if (pstmtInsert_tPostgresqlOutput_5 != null) {

					pstmtInsert_tPostgresqlOutput_5.close();

				}

				nb_line_deleted_tPostgresqlOutput_5 = nb_line_deleted_tPostgresqlOutput_5
						+ deletedCount_tPostgresqlOutput_5;
				nb_line_update_tPostgresqlOutput_5 = nb_line_update_tPostgresqlOutput_5
						+ updatedCount_tPostgresqlOutput_5;
				nb_line_inserted_tPostgresqlOutput_5 = nb_line_inserted_tPostgresqlOutput_5
						+ insertedCount_tPostgresqlOutput_5;
				nb_line_rejected_tPostgresqlOutput_5 = nb_line_rejected_tPostgresqlOutput_5
						+ rejectedCount_tPostgresqlOutput_5;

				globalMap.put("tPostgresqlOutput_5_NB_LINE",
						nb_line_tPostgresqlOutput_5);
				globalMap.put("tPostgresqlOutput_5_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_5);
				globalMap.put("tPostgresqlOutput_5_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_5);
				globalMap.put("tPostgresqlOutput_5_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_5);
				globalMap.put("tPostgresqlOutput_5_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_5);

				ok_Hash.put("tPostgresqlOutput_5", true);
				end_Hash.put("tPostgresqlOutput_5", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlOutput_5",
						end_Hash.get("tPostgresqlOutput_5")
								- start_Hash.get("tPostgresqlOutput_5"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlOutput_5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_row13");

			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_row14");

			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_row21");

			// free memory for "tMap_7"
			globalMap.remove("tHash_Lookup_row24");

			try {

				/**
				 * [tPostgresqlInput_8 finally ] start
				 */

				currentComponent = "tPostgresqlInput_8";

				/**
				 * [tPostgresqlInput_8 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_5 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_5";

				/**
				 * [tPostgresqlOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_8_SUBPROCESS_STATE", 1);
	}

	public void tJava_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_6");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				if ("failure".equalsIgnoreCase(status)) {
					globalMap.put("errorAllinea", true);
				}

				/**
				 * [tJava_6 begin ] stop
				 */

				/**
				 * [tJava_6 main ] start
				 */

				currentComponent = "tJava_6";

				tos_count_tJava_6++;

				/**
				 * [tJava_6 main ] stop
				 */

				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_6",
						end_Hash.get("tJava_6") - start_Hash.get("tJava_6"));
				tStatCatcher_1Process(globalMap);
				if (!(Boolean) globalMap.get("errorAllinea")) {

					tPostgresqlInput_11Process(globalMap);
				}

				/**
				 * [tJava_6 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_6 finally ] start
				 */

				currentComponent = "tJava_6";

				/**
				 * [tJava_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}

	public static class MAPPING_ENTE_E45_4Struct implements
			routines.system.IPersistableRow<MAPPING_ENTE_E45_4Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_ente_id;

		public long getMygov_ente_id() {
			return this.mygov_ente_id;
		}

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		public String codice_fiscale_ente;

		public String getCodice_fiscale_ente() {
			return this.codice_fiscale_ente;
		}

		public String de_nome_ente;

		public String getDe_nome_ente() {
			return this.de_nome_ente;
		}

		public String email_amministratore;

		public String getEmail_amministratore() {
			return this.email_amministratore;
		}

		public java.util.Date dt_creazione;

		public java.util.Date getDt_creazione() {
			return this.dt_creazione;
		}

		public java.util.Date dt_ultima_modifica;

		public java.util.Date getDt_ultima_modifica() {
			return this.dt_ultima_modifica;
		}

		public String mybox_client_key;

		public String getMybox_client_key() {
			return this.mybox_client_key;
		}

		public String mybox_client_secret;

		public String getMybox_client_secret() {
			return this.mybox_client_secret;
		}

		public int num_giorni_pagamento_presunti;

		public int getNum_giorni_pagamento_presunti() {
			return this.num_giorni_pagamento_presunti;
		}

		public String de_password;

		public String getDe_password() {
			return this.de_password;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.cod_ipa_ente == null) ? 0 : this.cod_ipa_ente
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final MAPPING_ENTE_E45_4Struct other = (MAPPING_ENTE_E45_4Struct) obj;

			if (this.cod_ipa_ente == null) {
				if (other.cod_ipa_ente != null)
					return false;

			} else if (!this.cod_ipa_ente.equals(other.cod_ipa_ente))

				return false;

			return true;
		}

		public void copyDataTo(MAPPING_ENTE_E45_4Struct other) {

			other.mygov_ente_id = this.mygov_ente_id;
			other.cod_ipa_ente = this.cod_ipa_ente;
			other.codice_fiscale_ente = this.codice_fiscale_ente;
			other.de_nome_ente = this.de_nome_ente;
			other.email_amministratore = this.email_amministratore;
			other.dt_creazione = this.dt_creazione;
			other.dt_ultima_modifica = this.dt_ultima_modifica;
			other.mybox_client_key = this.mybox_client_key;
			other.mybox_client_secret = this.mybox_client_secret;
			other.num_giorni_pagamento_presunti = this.num_giorni_pagamento_presunti;
			other.de_password = this.de_password;

		}

		public void copyKeysDataTo(MAPPING_ENTE_E45_4Struct other) {

			other.cod_ipa_ente = this.cod_ipa_ente;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_ente_id = dis.readLong();

					this.cod_ipa_ente = readString(dis);

					this.codice_fiscale_ente = readString(dis);

					this.de_nome_ente = readString(dis);

					this.email_amministratore = readString(dis);

					this.dt_creazione = readDate(dis);

					this.dt_ultima_modifica = readDate(dis);

					this.mybox_client_key = readString(dis);

					this.mybox_client_secret = readString(dis);

					this.num_giorni_pagamento_presunti = dis.readInt();

					this.de_password = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_ente_id);

				// String

				writeString(this.cod_ipa_ente, dos);

				// String

				writeString(this.codice_fiscale_ente, dos);

				// String

				writeString(this.de_nome_ente, dos);

				// String

				writeString(this.email_amministratore, dos);

				// java.util.Date

				writeDate(this.dt_creazione, dos);

				// java.util.Date

				writeDate(this.dt_ultima_modifica, dos);

				// String

				writeString(this.mybox_client_key, dos);

				// String

				writeString(this.mybox_client_secret, dos);

				// int

				dos.writeInt(this.num_giorni_pagamento_presunti);

				// String

				writeString(this.de_password, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_ente_id=" + String.valueOf(mygov_ente_id));
			sb.append(",cod_ipa_ente=" + cod_ipa_ente);
			sb.append(",codice_fiscale_ente=" + codice_fiscale_ente);
			sb.append(",de_nome_ente=" + de_nome_ente);
			sb.append(",email_amministratore=" + email_amministratore);
			sb.append(",dt_creazione=" + String.valueOf(dt_creazione));
			sb.append(",dt_ultima_modifica="
					+ String.valueOf(dt_ultima_modifica));
			sb.append(",mybox_client_key=" + mybox_client_key);
			sb.append(",mybox_client_secret=" + mybox_client_secret);
			sb.append(",num_giorni_pagamento_presunti="
					+ String.valueOf(num_giorni_pagamento_presunti));
			sb.append(",de_password=" + de_password);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(MAPPING_ENTE_E45_4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.cod_ipa_ente,
					other.cod_ipa_ente);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public long mygov_ente_id;

		public long getMygov_ente_id() {
			return this.mygov_ente_id;
		}

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		public String codice_fiscale_ente;

		public String getCodice_fiscale_ente() {
			return this.codice_fiscale_ente;
		}

		public String de_nome_ente;

		public String getDe_nome_ente() {
			return this.de_nome_ente;
		}

		public String email_amministratore;

		public String getEmail_amministratore() {
			return this.email_amministratore;
		}

		public java.util.Date dt_creazione;

		public java.util.Date getDt_creazione() {
			return this.dt_creazione;
		}

		public java.util.Date dt_ultima_modifica;

		public java.util.Date getDt_ultima_modifica() {
			return this.dt_ultima_modifica;
		}

		public String cod_rp_dati_vers_tipo_versamento;

		public String getCod_rp_dati_vers_tipo_versamento() {
			return this.cod_rp_dati_vers_tipo_versamento;
		}

		public Double num_rp_dati_vers_dati_sing_vers_commissione_carico_pa;

		public Double getNum_rp_dati_vers_dati_sing_vers_commissione_carico_pa() {
			return this.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa;
		}

		public String cod_rp_dati_vers_dati_sing_vers_iban_accredito;

		public String getCod_rp_dati_vers_dati_sing_vers_iban_accredito() {
			return this.cod_rp_dati_vers_dati_sing_vers_iban_accredito;
		}

		public String cod_rp_dati_vers_dati_sing_vers_bic_accredito;

		public String getCod_rp_dati_vers_dati_sing_vers_bic_accredito() {
			return this.cod_rp_dati_vers_dati_sing_vers_bic_accredito;
		}

		public String cod_rp_dati_vers_dati_sing_vers_iban_appoggio;

		public String getCod_rp_dati_vers_dati_sing_vers_iban_appoggio() {
			return this.cod_rp_dati_vers_dati_sing_vers_iban_appoggio;
		}

		public String cod_rp_dati_vers_dati_sing_vers_bic_appoggio;

		public String getCod_rp_dati_vers_dati_sing_vers_bic_appoggio() {
			return this.cod_rp_dati_vers_dati_sing_vers_bic_appoggio;
		}

		public String mybox_client_key;

		public String getMybox_client_key() {
			return this.mybox_client_key;
		}

		public String mybox_client_secret;

		public String getMybox_client_secret() {
			return this.mybox_client_secret;
		}

		public String ente_sil_invia_risposta_pagamento_url;

		public String getEnte_sil_invia_risposta_pagamento_url() {
			return this.ente_sil_invia_risposta_pagamento_url;
		}

		public String cod_global_location_number;

		public String getCod_global_location_number() {
			return this.cod_global_location_number;
		}

		public String de_password;

		public String getDe_password() {
			return this.de_password;
		}

		public String de_rp_ente_benef_denominazione_beneficiario;

		public String getDe_rp_ente_benef_denominazione_beneficiario() {
			return this.de_rp_ente_benef_denominazione_beneficiario;
		}

		public String de_rp_ente_benef_indirizzo_beneficiario;

		public String getDe_rp_ente_benef_indirizzo_beneficiario() {
			return this.de_rp_ente_benef_indirizzo_beneficiario;
		}

		public String de_rp_ente_benef_civico_beneficiario;

		public String getDe_rp_ente_benef_civico_beneficiario() {
			return this.de_rp_ente_benef_civico_beneficiario;
		}

		public String cod_rp_ente_benef_cap_beneficiario;

		public String getCod_rp_ente_benef_cap_beneficiario() {
			return this.cod_rp_ente_benef_cap_beneficiario;
		}

		public String de_rp_ente_benef_localita_beneficiario;

		public String getDe_rp_ente_benef_localita_beneficiario() {
			return this.de_rp_ente_benef_localita_beneficiario;
		}

		public String de_rp_ente_benef_provincia_beneficiario;

		public String getDe_rp_ente_benef_provincia_beneficiario() {
			return this.de_rp_ente_benef_provincia_beneficiario;
		}

		public String cod_rp_ente_benef_nazione_beneficiario;

		public String getCod_rp_ente_benef_nazione_beneficiario() {
			return this.cod_rp_ente_benef_nazione_beneficiario;
		}

		public String de_rp_ente_benef_telefono_beneficiario;

		public String getDe_rp_ente_benef_telefono_beneficiario() {
			return this.de_rp_ente_benef_telefono_beneficiario;
		}

		public String de_rp_ente_benef_sito_web_beneficiario;

		public String getDe_rp_ente_benef_sito_web_beneficiario() {
			return this.de_rp_ente_benef_sito_web_beneficiario;
		}

		public String de_rp_ente_benef_email_beneficiario;

		public String getDe_rp_ente_benef_email_beneficiario() {
			return this.de_rp_ente_benef_email_beneficiario;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_ente_id = dis.readLong();

					this.cod_ipa_ente = readString(dis);

					this.codice_fiscale_ente = readString(dis);

					this.de_nome_ente = readString(dis);

					this.email_amministratore = readString(dis);

					this.dt_creazione = readDate(dis);

					this.dt_ultima_modifica = readDate(dis);

					this.cod_rp_dati_vers_tipo_versamento = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa = null;
					} else {
						this.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa = dis
								.readDouble();
					}

					this.cod_rp_dati_vers_dati_sing_vers_iban_accredito = readString(dis);

					this.cod_rp_dati_vers_dati_sing_vers_bic_accredito = readString(dis);

					this.cod_rp_dati_vers_dati_sing_vers_iban_appoggio = readString(dis);

					this.cod_rp_dati_vers_dati_sing_vers_bic_appoggio = readString(dis);

					this.mybox_client_key = readString(dis);

					this.mybox_client_secret = readString(dis);

					this.ente_sil_invia_risposta_pagamento_url = readString(dis);

					this.cod_global_location_number = readString(dis);

					this.de_password = readString(dis);

					this.de_rp_ente_benef_denominazione_beneficiario = readString(dis);

					this.de_rp_ente_benef_indirizzo_beneficiario = readString(dis);

					this.de_rp_ente_benef_civico_beneficiario = readString(dis);

					this.cod_rp_ente_benef_cap_beneficiario = readString(dis);

					this.de_rp_ente_benef_localita_beneficiario = readString(dis);

					this.de_rp_ente_benef_provincia_beneficiario = readString(dis);

					this.cod_rp_ente_benef_nazione_beneficiario = readString(dis);

					this.de_rp_ente_benef_telefono_beneficiario = readString(dis);

					this.de_rp_ente_benef_sito_web_beneficiario = readString(dis);

					this.de_rp_ente_benef_email_beneficiario = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_ente_id);

				// String

				writeString(this.cod_ipa_ente, dos);

				// String

				writeString(this.codice_fiscale_ente, dos);

				// String

				writeString(this.de_nome_ente, dos);

				// String

				writeString(this.email_amministratore, dos);

				// java.util.Date

				writeDate(this.dt_creazione, dos);

				// java.util.Date

				writeDate(this.dt_ultima_modifica, dos);

				// String

				writeString(this.cod_rp_dati_vers_tipo_versamento, dos);

				// Double

				if (this.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa);
				}

				// String

				writeString(
						this.cod_rp_dati_vers_dati_sing_vers_iban_accredito,
						dos);

				// String

				writeString(this.cod_rp_dati_vers_dati_sing_vers_bic_accredito,
						dos);

				// String

				writeString(this.cod_rp_dati_vers_dati_sing_vers_iban_appoggio,
						dos);

				// String

				writeString(this.cod_rp_dati_vers_dati_sing_vers_bic_appoggio,
						dos);

				// String

				writeString(this.mybox_client_key, dos);

				// String

				writeString(this.mybox_client_secret, dos);

				// String

				writeString(this.ente_sil_invia_risposta_pagamento_url, dos);

				// String

				writeString(this.cod_global_location_number, dos);

				// String

				writeString(this.de_password, dos);

				// String

				writeString(this.de_rp_ente_benef_denominazione_beneficiario,
						dos);

				// String

				writeString(this.de_rp_ente_benef_indirizzo_beneficiario, dos);

				// String

				writeString(this.de_rp_ente_benef_civico_beneficiario, dos);

				// String

				writeString(this.cod_rp_ente_benef_cap_beneficiario, dos);

				// String

				writeString(this.de_rp_ente_benef_localita_beneficiario, dos);

				// String

				writeString(this.de_rp_ente_benef_provincia_beneficiario, dos);

				// String

				writeString(this.cod_rp_ente_benef_nazione_beneficiario, dos);

				// String

				writeString(this.de_rp_ente_benef_telefono_beneficiario, dos);

				// String

				writeString(this.de_rp_ente_benef_sito_web_beneficiario, dos);

				// String

				writeString(this.de_rp_ente_benef_email_beneficiario, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_ente_id=" + String.valueOf(mygov_ente_id));
			sb.append(",cod_ipa_ente=" + cod_ipa_ente);
			sb.append(",codice_fiscale_ente=" + codice_fiscale_ente);
			sb.append(",de_nome_ente=" + de_nome_ente);
			sb.append(",email_amministratore=" + email_amministratore);
			sb.append(",dt_creazione=" + String.valueOf(dt_creazione));
			sb.append(",dt_ultima_modifica="
					+ String.valueOf(dt_ultima_modifica));
			sb.append(",cod_rp_dati_vers_tipo_versamento="
					+ cod_rp_dati_vers_tipo_versamento);
			sb.append(",num_rp_dati_vers_dati_sing_vers_commissione_carico_pa="
					+ String.valueOf(num_rp_dati_vers_dati_sing_vers_commissione_carico_pa));
			sb.append(",cod_rp_dati_vers_dati_sing_vers_iban_accredito="
					+ cod_rp_dati_vers_dati_sing_vers_iban_accredito);
			sb.append(",cod_rp_dati_vers_dati_sing_vers_bic_accredito="
					+ cod_rp_dati_vers_dati_sing_vers_bic_accredito);
			sb.append(",cod_rp_dati_vers_dati_sing_vers_iban_appoggio="
					+ cod_rp_dati_vers_dati_sing_vers_iban_appoggio);
			sb.append(",cod_rp_dati_vers_dati_sing_vers_bic_appoggio="
					+ cod_rp_dati_vers_dati_sing_vers_bic_appoggio);
			sb.append(",mybox_client_key=" + mybox_client_key);
			sb.append(",mybox_client_secret=" + mybox_client_secret);
			sb.append(",ente_sil_invia_risposta_pagamento_url="
					+ ente_sil_invia_risposta_pagamento_url);
			sb.append(",cod_global_location_number="
					+ cod_global_location_number);
			sb.append(",de_password=" + de_password);
			sb.append(",de_rp_ente_benef_denominazione_beneficiario="
					+ de_rp_ente_benef_denominazione_beneficiario);
			sb.append(",de_rp_ente_benef_indirizzo_beneficiario="
					+ de_rp_ente_benef_indirizzo_beneficiario);
			sb.append(",de_rp_ente_benef_civico_beneficiario="
					+ de_rp_ente_benef_civico_beneficiario);
			sb.append(",cod_rp_ente_benef_cap_beneficiario="
					+ cod_rp_ente_benef_cap_beneficiario);
			sb.append(",de_rp_ente_benef_localita_beneficiario="
					+ de_rp_ente_benef_localita_beneficiario);
			sb.append(",de_rp_ente_benef_provincia_beneficiario="
					+ de_rp_ente_benef_provincia_beneficiario);
			sb.append(",cod_rp_ente_benef_nazione_beneficiario="
					+ cod_rp_ente_benef_nazione_beneficiario);
			sb.append(",de_rp_ente_benef_telefono_beneficiario="
					+ de_rp_ente_benef_telefono_beneficiario);
			sb.append(",de_rp_ente_benef_sito_web_beneficiario="
					+ de_rp_ente_benef_sito_web_beneficiario);
			sb.append(",de_rp_ente_benef_email_beneficiario="
					+ de_rp_ente_benef_email_beneficiario);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row15Struct row15 = new row15Struct();
				MAPPING_ENTE_E45_4Struct MAPPING_ENTE_E45_4 = new MAPPING_ENTE_E45_4Struct();

				/**
				 * [tPostgresqlOutput_6 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_6", false);
				start_Hash.put("tPostgresqlOutput_6",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlOutput_6");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlOutput_6";

				int tos_count_tPostgresqlOutput_6 = 0;

				String dbschema_tPostgresqlOutput_6 = null;
				dbschema_tPostgresqlOutput_6 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_3");

				String tableName_tPostgresqlOutput_6 = null;
				if (dbschema_tPostgresqlOutput_6 == null
						|| dbschema_tPostgresqlOutput_6.trim().length() == 0) {
					tableName_tPostgresqlOutput_6 = "mygov_ente";
				} else {
					tableName_tPostgresqlOutput_6 = dbschema_tPostgresqlOutput_6
							+ "\".\"" + "mygov_ente";
				}

				int updateKeyCount_tPostgresqlOutput_6 = 1;
				if (updateKeyCount_tPostgresqlOutput_6 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_6 = 0;
				int nb_line_update_tPostgresqlOutput_6 = 0;
				int nb_line_inserted_tPostgresqlOutput_6 = 0;
				int nb_line_deleted_tPostgresqlOutput_6 = 0;
				int nb_line_rejected_tPostgresqlOutput_6 = 0;

				int deletedCount_tPostgresqlOutput_6 = 0;
				int updatedCount_tPostgresqlOutput_6 = 0;
				int insertedCount_tPostgresqlOutput_6 = 0;
				int rejectedCount_tPostgresqlOutput_6 = 0;

				boolean whetherReject_tPostgresqlOutput_6 = false;

				java.sql.Connection conn_tPostgresqlOutput_6 = null;

				conn_tPostgresqlOutput_6 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_3");

				int count_tPostgresqlOutput_6 = 0;
				String update_tPostgresqlOutput_6 = "UPDATE \""
						+ tableName_tPostgresqlOutput_6
						+ "\" SET \"codice_fiscale_ente\" = ?,\"de_nome_ente\" = ?,\"email_amministratore\" = ?,\"mybox_client_key\" = ?,\"mybox_client_secret\" = ?,\"de_password\" = ? WHERE \"cod_ipa_ente\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_6 = conn_tPostgresqlOutput_6
						.prepareStatement(update_tPostgresqlOutput_6);
				String insert_tPostgresqlOutput_6 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_6
						+ "\" (\""
						+ "mygov_ente_id"
						+ "\",\"cod_ipa_ente\",\"codice_fiscale_ente\",\"de_nome_ente\",\"email_amministratore\",\"dt_creazione\",\"dt_ultima_modifica\",\"mybox_client_key\",\"mybox_client_secret\",\"num_giorni_pagamento_presunti\",\"de_password\") VALUES ("
						+ "nextval('mygov_ente_mygov_ente_id_seq')"
						+ ",?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_6 = conn_tPostgresqlOutput_6
						.prepareStatement(insert_tPostgresqlOutput_6);

				/**
				 * [tPostgresqlOutput_6 begin ] stop
				 */

				/**
				 * [tMap_11 begin ] start
				 */

				ok_Hash.put("tMap_11", false);
				start_Hash.put("tMap_11", System.currentTimeMillis());

				currentComponent = "tMap_11";

				int tos_count_tMap_11 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_11__Struct {
				}
				Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				MAPPING_ENTE_E45_4Struct MAPPING_ENTE_E45_4_tmp = new MAPPING_ENTE_E45_4Struct();
				// ###############################

				/**
				 * [tMap_11 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_11 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_11", false);
				start_Hash.put("tPostgresqlInput_11",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_11");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_11";

				int tos_count_tPostgresqlInput_11 = 0;

				int nb_line_tPostgresqlInput_11 = 0;
				java.sql.Connection conn_tPostgresqlInput_11 = null;
				conn_tPostgresqlInput_11 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_11 = conn_tPostgresqlInput_11
						.createStatement();

				String dbquery_tPostgresqlInput_11 = "SELECT \n  \"mygov_ente\".\"mygov_ente_id\", \n  \"mygov_ente\".\"cod_ipa_ente\", \n  \"mygov_ente\".\"codice_fiscale_ente\", \n  \"mygov_ente\".\"de_nome_ente\", \n  \"mygov_ente\".\"email_amministratore\", \n  \"mygov_ente\".\"dt_creazione\", \n  \"mygov_ente\".\"dt_ultima_modifica\", \n  \"mygov_ente\".\"cod_rp_dati_vers_tipo_versamento\",  \n  \"mygov_ente\".\"num_rp_dati_vers_dati_sing_vers_commissione_carico_pa\",  \n  \"mygov_ente\".\"cod_rp_dati_vers_dati_sing_vers_iban_accredito\", \n  \"mygov_ente\".\"cod_rp_dati_vers_dati_sing_vers_bic_accredito\",   \n  \"mygov_ente\".\"cod_rp_dati_vers_dati_sing_vers_iban_appoggio\",  \n  \"mygov_ente\".\"cod_rp_dati_vers_dati_sing_vers_bic_appoggio\", \n  \"mygov_ente\".\"mybox_client_key\", \n  \"mygov_ente\".\"mybox_client_secret\", \n  \"mygov_ente\".\"ente_sil_invia_risposta_pagamento_url\", \n  \"mygov_ente\".\"cod_global_location_number\", \n  \"mygov_ente\".\"de_password\", \n  \"mygov_ente\".\"de_rp_ente_benef_denominazione_beneficiario\", \n  \"mygov_ente\".\"de_rp_ente_benef_indirizzo_beneficiario\", \n  \"mygov_ente\".\"de_rp_ente_benef_civico_beneficiario\", \n  \"mygov_ente\".\"cod_rp_ente_benef_cap_beneficiario\", \n  \"mygov_ente\".\"de_rp_ente_benef_localita_beneficiario\", \n  \"mygov_ente\".\"de_rp_ente_benef_provincia_beneficiario\", \n  \"mygov_ente\".\"cod_rp_ente_benef_nazione_beneficiario\", \n  \"mygov_ente\".\"de_rp_ente_benef_telefono_beneficiario\", \n  \"mygov_ente\".\"de_rp_ente_benef_sito_web_beneficiario\", \n  \"mygov_ente\".\"de_rp_ente_benef_email_beneficiario\"\nFROM \"mygov_ente\"";

				globalMap.put("tPostgresqlInput_11_QUERY",
						dbquery_tPostgresqlInput_11);
				java.sql.ResultSet rs_tPostgresqlInput_11 = null;
				try {
					rs_tPostgresqlInput_11 = stmt_tPostgresqlInput_11
							.executeQuery(dbquery_tPostgresqlInput_11);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_11 = rs_tPostgresqlInput_11
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_11 = rsmd_tPostgresqlInput_11
							.getColumnCount();

					String tmpContent_tPostgresqlInput_11 = null;

					while (rs_tPostgresqlInput_11.next()) {
						nb_line_tPostgresqlInput_11++;

						if (colQtyInRs_tPostgresqlInput_11 < 1) {
							row15.mygov_ente_id = 0;
						} else {

							if (rs_tPostgresqlInput_11.getObject(1) != null) {
								row15.mygov_ente_id = rs_tPostgresqlInput_11
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 2) {
							row15.cod_ipa_ente = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(2);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.cod_ipa_ente = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.cod_ipa_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 3) {
							row15.codice_fiscale_ente = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(3);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.codice_fiscale_ente = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.codice_fiscale_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 4) {
							row15.de_nome_ente = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(4);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.de_nome_ente = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.de_nome_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 5) {
							row15.email_amministratore = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(5);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.email_amministratore = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.email_amministratore = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 6) {
							row15.dt_creazione = null;
						} else {

							if (rs_tPostgresqlInput_11.getTimestamp(6) != null) {
								row15.dt_creazione = new java.util.Date(
										rs_tPostgresqlInput_11.getTimestamp(6)
												.getTime());
							} else {
								row15.dt_creazione = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 7) {
							row15.dt_ultima_modifica = null;
						} else {

							if (rs_tPostgresqlInput_11.getTimestamp(7) != null) {
								row15.dt_ultima_modifica = new java.util.Date(
										rs_tPostgresqlInput_11.getTimestamp(7)
												.getTime());
							} else {
								row15.dt_ultima_modifica = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 8) {
							row15.cod_rp_dati_vers_tipo_versamento = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(8);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.cod_rp_dati_vers_tipo_versamento = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.cod_rp_dati_vers_tipo_versamento = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 9) {
							row15.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa = null;
						} else {

							if (rs_tPostgresqlInput_11.getObject(9) != null) {
								row15.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa = rs_tPostgresqlInput_11
										.getDouble(9);
							} else {
								row15.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 10) {
							row15.cod_rp_dati_vers_dati_sing_vers_iban_accredito = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(10);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.cod_rp_dati_vers_dati_sing_vers_iban_accredito = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.cod_rp_dati_vers_dati_sing_vers_iban_accredito = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 11) {
							row15.cod_rp_dati_vers_dati_sing_vers_bic_accredito = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(11);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.cod_rp_dati_vers_dati_sing_vers_bic_accredito = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.cod_rp_dati_vers_dati_sing_vers_bic_accredito = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 12) {
							row15.cod_rp_dati_vers_dati_sing_vers_iban_appoggio = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(12);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.cod_rp_dati_vers_dati_sing_vers_iban_appoggio = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.cod_rp_dati_vers_dati_sing_vers_iban_appoggio = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 13) {
							row15.cod_rp_dati_vers_dati_sing_vers_bic_appoggio = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(13);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.cod_rp_dati_vers_dati_sing_vers_bic_appoggio = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.cod_rp_dati_vers_dati_sing_vers_bic_appoggio = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 14) {
							row15.mybox_client_key = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(14);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.mybox_client_key = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.mybox_client_key = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 15) {
							row15.mybox_client_secret = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(15);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.mybox_client_secret = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.mybox_client_secret = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 16) {
							row15.ente_sil_invia_risposta_pagamento_url = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(16);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.ente_sil_invia_risposta_pagamento_url = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.ente_sil_invia_risposta_pagamento_url = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 17) {
							row15.cod_global_location_number = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(17);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.cod_global_location_number = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.cod_global_location_number = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 18) {
							row15.de_password = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(18);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.de_password = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.de_password = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 19) {
							row15.de_rp_ente_benef_denominazione_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(19);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.de_rp_ente_benef_denominazione_beneficiario = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.de_rp_ente_benef_denominazione_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 20) {
							row15.de_rp_ente_benef_indirizzo_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(20);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.de_rp_ente_benef_indirizzo_beneficiario = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.de_rp_ente_benef_indirizzo_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 21) {
							row15.de_rp_ente_benef_civico_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(21);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.de_rp_ente_benef_civico_beneficiario = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.de_rp_ente_benef_civico_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 22) {
							row15.cod_rp_ente_benef_cap_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(22);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.cod_rp_ente_benef_cap_beneficiario = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.cod_rp_ente_benef_cap_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 23) {
							row15.de_rp_ente_benef_localita_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(23);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.de_rp_ente_benef_localita_beneficiario = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.de_rp_ente_benef_localita_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 24) {
							row15.de_rp_ente_benef_provincia_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(24);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.de_rp_ente_benef_provincia_beneficiario = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.de_rp_ente_benef_provincia_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 25) {
							row15.cod_rp_ente_benef_nazione_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(25);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.cod_rp_ente_benef_nazione_beneficiario = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.cod_rp_ente_benef_nazione_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 26) {
							row15.de_rp_ente_benef_telefono_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(26);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.de_rp_ente_benef_telefono_beneficiario = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.de_rp_ente_benef_telefono_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 27) {
							row15.de_rp_ente_benef_sito_web_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(27);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.de_rp_ente_benef_sito_web_beneficiario = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.de_rp_ente_benef_sito_web_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 28) {
							row15.de_rp_ente_benef_email_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(28);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.de_rp_ente_benef_email_beneficiario = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.de_rp_ente_benef_email_beneficiario = null;
							}
						}

						/**
						 * [tPostgresqlInput_11 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_11 main ] start
						 */

						currentComponent = "tPostgresqlInput_11";

						tos_count_tPostgresqlInput_11++;

						/**
						 * [tPostgresqlInput_11 main ] stop
						 */

						/**
						 * [tMap_11 main ] start
						 */

						currentComponent = "tMap_11";

						boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_11 = false;
						boolean mainRowRejected_tMap_11 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
							// ###############################
							// # Output tables

							MAPPING_ENTE_E45_4 = null;

							// # Output table : 'MAPPING_ENTE_E45_4'
							MAPPING_ENTE_E45_4_tmp.mygov_ente_id = 0;
							MAPPING_ENTE_E45_4_tmp.cod_ipa_ente = row15.cod_ipa_ente;
							MAPPING_ENTE_E45_4_tmp.codice_fiscale_ente = row15.codice_fiscale_ente;
							MAPPING_ENTE_E45_4_tmp.de_nome_ente = row15.de_nome_ente;
							MAPPING_ENTE_E45_4_tmp.email_amministratore = row15.email_amministratore;
							MAPPING_ENTE_E45_4_tmp.dt_creazione = TalendDate
									.getCurrentDate();
							MAPPING_ENTE_E45_4_tmp.dt_ultima_modifica = TalendDate
									.getCurrentDate();
							MAPPING_ENTE_E45_4_tmp.mybox_client_key = row15.mybox_client_key;
							MAPPING_ENTE_E45_4_tmp.mybox_client_secret = row15.mybox_client_secret;
							MAPPING_ENTE_E45_4_tmp.num_giorni_pagamento_presunti = 3;
							MAPPING_ENTE_E45_4_tmp.de_password = row15.de_password;
							MAPPING_ENTE_E45_4 = MAPPING_ENTE_E45_4_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_11 = false;

						tos_count_tMap_11++;

						/**
						 * [tMap_11 main ] stop
						 */
						// Start of branch "MAPPING_ENTE_E45_4"
						if (MAPPING_ENTE_E45_4 != null) {

							/**
							 * [tPostgresqlOutput_6 main ] start
							 */

							currentComponent = "tPostgresqlOutput_6";

							whetherReject_tPostgresqlOutput_6 = false;
							int updateFlag_tPostgresqlOutput_6 = 0;
							if (MAPPING_ENTE_E45_4.codice_fiscale_ente == null) {
								pstmtUpdate_tPostgresqlOutput_6.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_6.setString(1,
										MAPPING_ENTE_E45_4.codice_fiscale_ente);
							}

							if (MAPPING_ENTE_E45_4.de_nome_ente == null) {
								pstmtUpdate_tPostgresqlOutput_6.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_6.setString(2,
										MAPPING_ENTE_E45_4.de_nome_ente);
							}

							if (MAPPING_ENTE_E45_4.email_amministratore == null) {
								pstmtUpdate_tPostgresqlOutput_6.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_6
										.setString(
												3,
												MAPPING_ENTE_E45_4.email_amministratore);
							}

							if (MAPPING_ENTE_E45_4.mybox_client_key == null) {
								pstmtUpdate_tPostgresqlOutput_6.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_6.setString(4,
										MAPPING_ENTE_E45_4.mybox_client_key);
							}

							if (MAPPING_ENTE_E45_4.mybox_client_secret == null) {
								pstmtUpdate_tPostgresqlOutput_6.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_6.setString(5,
										MAPPING_ENTE_E45_4.mybox_client_secret);
							}

							if (MAPPING_ENTE_E45_4.de_password == null) {
								pstmtUpdate_tPostgresqlOutput_6.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_6.setString(6,
										MAPPING_ENTE_E45_4.de_password);
							}

							if (MAPPING_ENTE_E45_4.cod_ipa_ente == null) {
								pstmtUpdate_tPostgresqlOutput_6.setNull(
										7 + count_tPostgresqlOutput_6,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_6.setString(
										7 + count_tPostgresqlOutput_6,
										MAPPING_ENTE_E45_4.cod_ipa_ente);
							}

							try {

								updateFlag_tPostgresqlOutput_6 = pstmtUpdate_tPostgresqlOutput_6
										.executeUpdate();
								updatedCount_tPostgresqlOutput_6 = updatedCount_tPostgresqlOutput_6
										+ updateFlag_tPostgresqlOutput_6;

								if (updateFlag_tPostgresqlOutput_6 == 0) {

									if (MAPPING_ENTE_E45_4.cod_ipa_ente == null) {
										pstmtInsert_tPostgresqlOutput_6
												.setNull(1,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_6
												.setString(
														1,
														MAPPING_ENTE_E45_4.cod_ipa_ente);
									}

									if (MAPPING_ENTE_E45_4.codice_fiscale_ente == null) {
										pstmtInsert_tPostgresqlOutput_6
												.setNull(2,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_6
												.setString(
														2,
														MAPPING_ENTE_E45_4.codice_fiscale_ente);
									}

									if (MAPPING_ENTE_E45_4.de_nome_ente == null) {
										pstmtInsert_tPostgresqlOutput_6
												.setNull(3,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_6
												.setString(
														3,
														MAPPING_ENTE_E45_4.de_nome_ente);
									}

									if (MAPPING_ENTE_E45_4.email_amministratore == null) {
										pstmtInsert_tPostgresqlOutput_6
												.setNull(4,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_6
												.setString(
														4,
														MAPPING_ENTE_E45_4.email_amministratore);
									}

									if (MAPPING_ENTE_E45_4.dt_creazione != null) {
										pstmtInsert_tPostgresqlOutput_6
												.setTimestamp(
														5,
														new java.sql.Timestamp(
																MAPPING_ENTE_E45_4.dt_creazione
																		.getTime()));
									} else {
										pstmtInsert_tPostgresqlOutput_6
												.setNull(
														5,
														java.sql.Types.TIMESTAMP);
									}

									if (MAPPING_ENTE_E45_4.dt_ultima_modifica != null) {
										pstmtInsert_tPostgresqlOutput_6
												.setTimestamp(
														6,
														new java.sql.Timestamp(
																MAPPING_ENTE_E45_4.dt_ultima_modifica
																		.getTime()));
									} else {
										pstmtInsert_tPostgresqlOutput_6
												.setNull(
														6,
														java.sql.Types.TIMESTAMP);
									}

									if (MAPPING_ENTE_E45_4.mybox_client_key == null) {
										pstmtInsert_tPostgresqlOutput_6
												.setNull(7,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_6
												.setString(
														7,
														MAPPING_ENTE_E45_4.mybox_client_key);
									}

									if (MAPPING_ENTE_E45_4.mybox_client_secret == null) {
										pstmtInsert_tPostgresqlOutput_6
												.setNull(8,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_6
												.setString(
														8,
														MAPPING_ENTE_E45_4.mybox_client_secret);
									}

									pstmtInsert_tPostgresqlOutput_6
											.setInt(9,
													MAPPING_ENTE_E45_4.num_giorni_pagamento_presunti);

									if (MAPPING_ENTE_E45_4.de_password == null) {
										pstmtInsert_tPostgresqlOutput_6
												.setNull(10,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_6
												.setString(
														10,
														MAPPING_ENTE_E45_4.de_password);
									}

									insertedCount_tPostgresqlOutput_6 = insertedCount_tPostgresqlOutput_6
											+ pstmtInsert_tPostgresqlOutput_6
													.executeUpdate();
									nb_line_tPostgresqlOutput_6++;

								} else {
									nb_line_tPostgresqlOutput_6++;

								}
							} catch (java.lang.Exception e) {

								whetherReject_tPostgresqlOutput_6 = true;
								throw (e);
							}

							tos_count_tPostgresqlOutput_6++;

							/**
							 * [tPostgresqlOutput_6 main ] stop
							 */

						} // End of branch "MAPPING_ENTE_E45_4"

						/**
						 * [tPostgresqlInput_11 end ] start
						 */

						currentComponent = "tPostgresqlInput_11";

					}
				} finally {
					stmt_tPostgresqlInput_11.close();

				}
				globalMap.put("tPostgresqlInput_11_NB_LINE",
						nb_line_tPostgresqlInput_11);

				ok_Hash.put("tPostgresqlInput_11", true);
				end_Hash.put("tPostgresqlInput_11", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_11",
						end_Hash.get("tPostgresqlInput_11")
								- start_Hash.get("tPostgresqlInput_11"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_11 end ] stop
				 */

				/**
				 * [tMap_11 end ] start
				 */

				currentComponent = "tMap_11";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_11", true);
				end_Hash.put("tMap_11", System.currentTimeMillis());

				/**
				 * [tMap_11 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_6 end ] start
				 */

				currentComponent = "tPostgresqlOutput_6";

				if (pstmtUpdate_tPostgresqlOutput_6 != null) {

					pstmtUpdate_tPostgresqlOutput_6.close();

				}
				if (pstmtInsert_tPostgresqlOutput_6 != null) {

					pstmtInsert_tPostgresqlOutput_6.close();

				}

				nb_line_deleted_tPostgresqlOutput_6 = nb_line_deleted_tPostgresqlOutput_6
						+ deletedCount_tPostgresqlOutput_6;
				nb_line_update_tPostgresqlOutput_6 = nb_line_update_tPostgresqlOutput_6
						+ updatedCount_tPostgresqlOutput_6;
				nb_line_inserted_tPostgresqlOutput_6 = nb_line_inserted_tPostgresqlOutput_6
						+ insertedCount_tPostgresqlOutput_6;
				nb_line_rejected_tPostgresqlOutput_6 = nb_line_rejected_tPostgresqlOutput_6
						+ rejectedCount_tPostgresqlOutput_6;

				globalMap.put("tPostgresqlOutput_6_NB_LINE",
						nb_line_tPostgresqlOutput_6);
				globalMap.put("tPostgresqlOutput_6_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_6);
				globalMap.put("tPostgresqlOutput_6_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_6);
				globalMap.put("tPostgresqlOutput_6_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_6);
				globalMap.put("tPostgresqlOutput_6_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_6);

				ok_Hash.put("tPostgresqlOutput_6", true);
				end_Hash.put("tPostgresqlOutput_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlOutput_6",
						end_Hash.get("tPostgresqlOutput_6")
								- start_Hash.get("tPostgresqlOutput_6"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlOutput_6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_11 finally ] start
				 */

				currentComponent = "tPostgresqlInput_11";

				/**
				 * [tPostgresqlInput_11 finally ] stop
				 */

				/**
				 * [tMap_11 finally ] start
				 */

				currentComponent = "tMap_11";

				/**
				 * [tMap_11 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_6 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_6";

				/**
				 * [tPostgresqlOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_11_SUBPROCESS_STATE", 1);
	}

	public void tJava_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_7 begin ] start
				 */

				ok_Hash.put("tJava_7", false);
				start_Hash.put("tJava_7", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_7");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_7";

				int tos_count_tJava_7 = 0;

				if ("failure".equalsIgnoreCase(status)) {
					globalMap.put("errorAllinea", true);
				}

				/**
				 * [tJava_7 begin ] stop
				 */

				/**
				 * [tJava_7 main ] start
				 */

				currentComponent = "tJava_7";

				tos_count_tJava_7++;

				/**
				 * [tJava_7 main ] stop
				 */

				/**
				 * [tJava_7 end ] start
				 */

				currentComponent = "tJava_7";

				ok_Hash.put("tJava_7", true);
				end_Hash.put("tJava_7", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_7",
						end_Hash.get("tJava_7") - start_Hash.get("tJava_7"));
				tStatCatcher_1Process(globalMap);
				if (!(Boolean) globalMap.get("errorAllinea")) {

					tPostgresqlInput_12Process(globalMap);
				}

				/**
				 * [tJava_7 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_7 finally ] start
				 */

				currentComponent = "tJava_7";

				/**
				 * [tJava_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}

	public static class MAPPING_ENTE_TIPO_DOVUTOStruct implements
			routines.system.IPersistableRow<MAPPING_ENTE_TIPO_DOVUTOStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_ente_tipo_dovuto_id;

		public long getMygov_ente_tipo_dovuto_id() {
			return this.mygov_ente_tipo_dovuto_id;
		}

		public long mygov_ente_id;

		public long getMygov_ente_id() {
			return this.mygov_ente_id;
		}

		public String cod_tipo;

		public String getCod_tipo() {
			return this.cod_tipo;
		}

		public String de_tipo;

		public String getDe_tipo() {
			return this.de_tipo;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.mygov_ente_tipo_dovuto_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final MAPPING_ENTE_TIPO_DOVUTOStruct other = (MAPPING_ENTE_TIPO_DOVUTOStruct) obj;

			if (this.mygov_ente_tipo_dovuto_id != other.mygov_ente_tipo_dovuto_id)
				return false;

			return true;
		}

		public void copyDataTo(MAPPING_ENTE_TIPO_DOVUTOStruct other) {

			other.mygov_ente_tipo_dovuto_id = this.mygov_ente_tipo_dovuto_id;
			other.mygov_ente_id = this.mygov_ente_id;
			other.cod_tipo = this.cod_tipo;
			other.de_tipo = this.de_tipo;

		}

		public void copyKeysDataTo(MAPPING_ENTE_TIPO_DOVUTOStruct other) {

			other.mygov_ente_tipo_dovuto_id = this.mygov_ente_tipo_dovuto_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_ente_tipo_dovuto_id = dis.readLong();

					this.mygov_ente_id = dis.readLong();

					this.cod_tipo = readString(dis);

					this.de_tipo = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_ente_tipo_dovuto_id);

				// long

				dos.writeLong(this.mygov_ente_id);

				// String

				writeString(this.cod_tipo, dos);

				// String

				writeString(this.de_tipo, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_ente_tipo_dovuto_id="
					+ String.valueOf(mygov_ente_tipo_dovuto_id));
			sb.append(",mygov_ente_id=" + String.valueOf(mygov_ente_id));
			sb.append(",cod_tipo=" + cod_tipo);
			sb.append(",de_tipo=" + de_tipo);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(MAPPING_ENTE_TIPO_DOVUTOStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.mygov_ente_tipo_dovuto_id,
					other.mygov_ente_tipo_dovuto_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ENTE_TIPOStruct implements
			routines.system.IPersistableRow<ENTE_TIPOStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public String cod_tipo;

		public String getCod_tipo() {
			return this.cod_tipo;
		}

		public String de_tipo;

		public String getDe_tipo() {
			return this.de_tipo;
		}

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.cod_tipo = readString(dis);

					this.de_tipo = readString(dis);

					this.cod_ipa_ente = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.cod_tipo, dos);

				// String

				writeString(this.de_tipo, dos);

				// String

				writeString(this.cod_ipa_ente, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("cod_tipo=" + cod_tipo);
			sb.append(",de_tipo=" + de_tipo);
			sb.append(",cod_ipa_ente=" + cod_ipa_ente);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ENTE_TIPOStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements
			routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public long mygov_ente_tipo_dovuto_id;

		public long getMygov_ente_tipo_dovuto_id() {
			return this.mygov_ente_tipo_dovuto_id;
		}

		public long mygov_ente_id;

		public long getMygov_ente_id() {
			return this.mygov_ente_id;
		}

		public String cod_tipo;

		public String getCod_tipo() {
			return this.cod_tipo;
		}

		public String de_tipo;

		public String getDe_tipo() {
			return this.de_tipo;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_ente_tipo_dovuto_id = dis.readLong();

					this.mygov_ente_id = dis.readLong();

					this.cod_tipo = readString(dis);

					this.de_tipo = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_ente_tipo_dovuto_id);

				// long

				dos.writeLong(this.mygov_ente_id);

				// String

				writeString(this.cod_tipo, dos);

				// String

				writeString(this.de_tipo, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_ente_tipo_dovuto_id="
					+ String.valueOf(mygov_ente_tipo_dovuto_id));
			sb.append(",mygov_ente_id=" + String.valueOf(mygov_ente_id));
			sb.append(",cod_tipo=" + cod_tipo);
			sb.append(",de_tipo=" + de_tipo);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tPostgresqlInput_12Struct implements
			routines.system.IPersistableRow<after_tPostgresqlInput_12Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_ente_tipo_dovuto_id;

		public long getMygov_ente_tipo_dovuto_id() {
			return this.mygov_ente_tipo_dovuto_id;
		}

		public long mygov_ente_id;

		public long getMygov_ente_id() {
			return this.mygov_ente_id;
		}

		public String cod_tipo;

		public String getCod_tipo() {
			return this.cod_tipo;
		}

		public String de_tipo;

		public String getDe_tipo() {
			return this.de_tipo;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.mygov_ente_tipo_dovuto_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tPostgresqlInput_12Struct other = (after_tPostgresqlInput_12Struct) obj;

			if (this.mygov_ente_tipo_dovuto_id != other.mygov_ente_tipo_dovuto_id)
				return false;

			return true;
		}

		public void copyDataTo(after_tPostgresqlInput_12Struct other) {

			other.mygov_ente_tipo_dovuto_id = this.mygov_ente_tipo_dovuto_id;
			other.mygov_ente_id = this.mygov_ente_id;
			other.cod_tipo = this.cod_tipo;
			other.de_tipo = this.de_tipo;

		}

		public void copyKeysDataTo(after_tPostgresqlInput_12Struct other) {

			other.mygov_ente_tipo_dovuto_id = this.mygov_ente_tipo_dovuto_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_ente_tipo_dovuto_id = dis.readLong();

					this.mygov_ente_id = dis.readLong();

					this.cod_tipo = readString(dis);

					this.de_tipo = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_ente_tipo_dovuto_id);

				// long

				dos.writeLong(this.mygov_ente_id);

				// String

				writeString(this.cod_tipo, dos);

				// String

				writeString(this.de_tipo, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_ente_tipo_dovuto_id="
					+ String.valueOf(mygov_ente_tipo_dovuto_id));
			sb.append(",mygov_ente_id=" + String.valueOf(mygov_ente_id));
			sb.append(",cod_tipo=" + cod_tipo);
			sb.append(",de_tipo=" + de_tipo);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tPostgresqlInput_12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.mygov_ente_tipo_dovuto_id,
					other.mygov_ente_tipo_dovuto_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_12Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_13Process(globalMap);
				tPostgresqlInput_14Process(globalMap);

				row16Struct row16 = new row16Struct();
				ENTE_TIPOStruct ENTE_TIPO = new ENTE_TIPOStruct();
				MAPPING_ENTE_TIPO_DOVUTOStruct MAPPING_ENTE_TIPO_DOVUTO = new MAPPING_ENTE_TIPO_DOVUTOStruct();

				/**
				 * [tPostgresqlOutput_7 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_7", false);
				start_Hash.put("tPostgresqlOutput_7",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlOutput_7");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlOutput_7";

				int tos_count_tPostgresqlOutput_7 = 0;

				String dbschema_tPostgresqlOutput_7 = null;
				dbschema_tPostgresqlOutput_7 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_3");

				String tableName_tPostgresqlOutput_7 = null;
				if (dbschema_tPostgresqlOutput_7 == null
						|| dbschema_tPostgresqlOutput_7.trim().length() == 0) {
					tableName_tPostgresqlOutput_7 = "mygov_ente_tipo_dovuto";
				} else {
					tableName_tPostgresqlOutput_7 = dbschema_tPostgresqlOutput_7
							+ "\".\"" + "mygov_ente_tipo_dovuto";
				}

				int updateKeyCount_tPostgresqlOutput_7 = 2;
				if (updateKeyCount_tPostgresqlOutput_7 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_7 = 0;
				int nb_line_update_tPostgresqlOutput_7 = 0;
				int nb_line_inserted_tPostgresqlOutput_7 = 0;
				int nb_line_deleted_tPostgresqlOutput_7 = 0;
				int nb_line_rejected_tPostgresqlOutput_7 = 0;

				int deletedCount_tPostgresqlOutput_7 = 0;
				int updatedCount_tPostgresqlOutput_7 = 0;
				int insertedCount_tPostgresqlOutput_7 = 0;
				int rejectedCount_tPostgresqlOutput_7 = 0;

				boolean whetherReject_tPostgresqlOutput_7 = false;

				java.sql.Connection conn_tPostgresqlOutput_7 = null;

				conn_tPostgresqlOutput_7 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_3");

				int batchSize_tPostgresqlOutput_7 = 10000;
				int batchSizeCounter_tPostgresqlOutput_7 = 0;

				int count_tPostgresqlOutput_7 = 0;
				String update_tPostgresqlOutput_7 = "UPDATE \""
						+ tableName_tPostgresqlOutput_7
						+ "\" SET \"de_tipo\" = ? WHERE \"mygov_ente_id\" = ? AND \"cod_tipo\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_7 = conn_tPostgresqlOutput_7
						.prepareStatement(update_tPostgresqlOutput_7);
				String insert_tPostgresqlOutput_7 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_7
						+ "\" (\""
						+ "mygov_ente_tipo_dovuto_id"
						+ "\",\"mygov_ente_id\",\"cod_tipo\",\"de_tipo\") VALUES ("
						+ "nextval('mygov_ente_tipo_dovuto_mygov_ente_tipo_dovuto_id_seq')"
						+ ",?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_7 = conn_tPostgresqlOutput_7
						.prepareStatement(insert_tPostgresqlOutput_7);

				/**
				 * [tPostgresqlOutput_7 begin ] stop
				 */

				/**
				 * [tMap_13 begin ] start
				 */

				ok_Hash.put("tMap_13", false);
				start_Hash.put("tMap_13", System.currentTimeMillis());

				currentComponent = "tMap_13";

				int tos_count_tMap_13 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) globalMap
						.get("tHash_Lookup_row18"));

				row18Struct row18HashKey = new row18Struct();
				row18Struct row18Default = new row18Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_13__Struct {
				}
				Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				MAPPING_ENTE_TIPO_DOVUTOStruct MAPPING_ENTE_TIPO_DOVUTO_tmp = new MAPPING_ENTE_TIPO_DOVUTOStruct();
				// ###############################

				/**
				 * [tMap_13 begin ] stop
				 */

				/**
				 * [tMap_12 begin ] start
				 */

				ok_Hash.put("tMap_12", false);
				start_Hash.put("tMap_12", System.currentTimeMillis());

				currentComponent = "tMap_12";

				int tos_count_tMap_12 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) globalMap
						.get("tHash_Lookup_row17"));

				row17Struct row17HashKey = new row17Struct();
				row17Struct row17Default = new row17Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_12__Struct {
				}
				Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				ENTE_TIPOStruct ENTE_TIPO_tmp = new ENTE_TIPOStruct();
				// ###############################

				/**
				 * [tMap_12 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_12 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_12", false);
				start_Hash.put("tPostgresqlInput_12",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_12");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_12";

				int tos_count_tPostgresqlInput_12 = 0;

				int nb_line_tPostgresqlInput_12 = 0;
				java.sql.Connection conn_tPostgresqlInput_12 = null;
				conn_tPostgresqlInput_12 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_12 = conn_tPostgresqlInput_12
						.createStatement();

				String dbquery_tPostgresqlInput_12 = "SELECT \n  \"mygov_ente_tipo_dovuto\".\"mygov_ente_tipo_dovuto_id\", \n  \"mygov_ente_tipo_dovuto\".\"mygov_ente_id\", \n  \"mygov_ente_tipo_dovuto\".\"cod_tipo\", \n  \"mygov_ente_tipo_dovuto\".\"de_tipo\"\nFROM \"mygov_ente_tipo_dovuto\"";

				globalMap.put("tPostgresqlInput_12_QUERY",
						dbquery_tPostgresqlInput_12);
				java.sql.ResultSet rs_tPostgresqlInput_12 = null;
				try {
					rs_tPostgresqlInput_12 = stmt_tPostgresqlInput_12
							.executeQuery(dbquery_tPostgresqlInput_12);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_12 = rs_tPostgresqlInput_12
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_12 = rsmd_tPostgresqlInput_12
							.getColumnCount();

					String tmpContent_tPostgresqlInput_12 = null;

					while (rs_tPostgresqlInput_12.next()) {
						nb_line_tPostgresqlInput_12++;

						if (colQtyInRs_tPostgresqlInput_12 < 1) {
							row16.mygov_ente_tipo_dovuto_id = 0;
						} else {

							if (rs_tPostgresqlInput_12.getObject(1) != null) {
								row16.mygov_ente_tipo_dovuto_id = rs_tPostgresqlInput_12
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_12 < 2) {
							row16.mygov_ente_id = 0;
						} else {

							if (rs_tPostgresqlInput_12.getObject(2) != null) {
								row16.mygov_ente_id = rs_tPostgresqlInput_12
										.getLong(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_12 < 3) {
							row16.cod_tipo = null;
						} else {

							tmpContent_tPostgresqlInput_12 = rs_tPostgresqlInput_12
									.getString(3);
							if (tmpContent_tPostgresqlInput_12 != null) {
								row16.cod_tipo = tmpContent_tPostgresqlInput_12
										.trim();
							} else {
								row16.cod_tipo = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_12 < 4) {
							row16.de_tipo = null;
						} else {

							tmpContent_tPostgresqlInput_12 = rs_tPostgresqlInput_12
									.getString(4);
							if (tmpContent_tPostgresqlInput_12 != null) {
								row16.de_tipo = tmpContent_tPostgresqlInput_12
										.trim();
							} else {
								row16.de_tipo = null;
							}
						}

						/**
						 * [tPostgresqlInput_12 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_12 main ] start
						 */

						currentComponent = "tPostgresqlInput_12";

						tos_count_tPostgresqlInput_12++;

						/**
						 * [tPostgresqlInput_12 main ] stop
						 */

						/**
						 * [tMap_12 main ] start
						 */

						currentComponent = "tMap_12";

						boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_12 = false;
						boolean mainRowRejected_tMap_12 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row17"
						// /////////////////////////////////////////////

						boolean forceLooprow17 = false;

						row17Struct row17ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_12) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_12 = false;

							Object exprKeyValue_row17__mygov_ente_id = row16.mygov_ente_id;
							if (exprKeyValue_row17__mygov_ente_id == null) {
								hasCasePrimitiveKeyWithNull_tMap_12 = true;
							} else {
								row17HashKey.mygov_ente_id = (long) (Long) exprKeyValue_row17__mygov_ente_id;
							}

							row17HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_12) { // G_TM_M_091

								tHash_Lookup_row17.lookup(row17HashKey);

							} // G_TM_M_091

							if (hasCasePrimitiveKeyWithNull_tMap_12
									|| !tHash_Lookup_row17.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_12 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row17 != null
								&& tHash_Lookup_row17.getCount(row17HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row17' and it contains more one result from keys :  row17.mygov_ente_id = '"
							// + row17HashKey.mygov_ente_id + "'");
						} // G 071

						row17Struct row17 = null;

						row17Struct fromLookup_row17 = null;
						row17 = row17Default;

						if (tHash_Lookup_row17 != null
								&& tHash_Lookup_row17.hasNext()) { // G 099

							fromLookup_row17 = tHash_Lookup_row17.next();

						} // G 099

						if (fromLookup_row17 != null) {
							row17 = fromLookup_row17;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
							// ###############################
							// # Output tables

							ENTE_TIPO = null;

							if (!rejectedInnerJoin_tMap_12) {

								// # Output table : 'ENTE_TIPO'
								ENTE_TIPO_tmp.cod_tipo = row16.cod_tipo;
								ENTE_TIPO_tmp.de_tipo = row16.de_tipo;
								ENTE_TIPO_tmp.cod_ipa_ente = row17.cod_ipa_ente;
								ENTE_TIPO = ENTE_TIPO_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_12 = false;

						tos_count_tMap_12++;

						/**
						 * [tMap_12 main ] stop
						 */
						// Start of branch "ENTE_TIPO"
						if (ENTE_TIPO != null) {

							/**
							 * [tMap_13 main ] start
							 */

							currentComponent = "tMap_13";

							boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_13 = false;
							boolean mainRowRejected_tMap_13 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "row18"
							// /////////////////////////////////////////////

							boolean forceLooprow18 = false;

							row18Struct row18ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_13) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_13 = false;

								row18HashKey.cod_ipa_ente = ENTE_TIPO.cod_ipa_ente;

								row18HashKey.hashCodeDirty = true;

								tHash_Lookup_row18.lookup(row18HashKey);

								if (!tHash_Lookup_row18.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_13 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_row18 != null
									&& tHash_Lookup_row18
											.getCount(row18HashKey) > 1) { // G
																			// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row18' and it contains more one result from keys :  row18.cod_ipa_ente = '"
								// + row18HashKey.cod_ipa_ente + "'");
							} // G 071

							row18Struct row18 = null;

							row18Struct fromLookup_row18 = null;
							row18 = row18Default;

							if (tHash_Lookup_row18 != null
									&& tHash_Lookup_row18.hasNext()) { // G 099

								fromLookup_row18 = tHash_Lookup_row18.next();

							} // G 099

							if (fromLookup_row18 != null) {
								row18 = fromLookup_row18;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
								// ###############################
								// # Output tables

								MAPPING_ENTE_TIPO_DOVUTO = null;

								if (!rejectedInnerJoin_tMap_13) {

									// # Output table :
									// 'MAPPING_ENTE_TIPO_DOVUTO'
									MAPPING_ENTE_TIPO_DOVUTO_tmp.mygov_ente_tipo_dovuto_id = 0;
									MAPPING_ENTE_TIPO_DOVUTO_tmp.mygov_ente_id = row18.mygov_ente_id;
									MAPPING_ENTE_TIPO_DOVUTO_tmp.cod_tipo = ENTE_TIPO.cod_tipo;
									MAPPING_ENTE_TIPO_DOVUTO_tmp.de_tipo = ENTE_TIPO.de_tipo;
									MAPPING_ENTE_TIPO_DOVUTO = MAPPING_ENTE_TIPO_DOVUTO_tmp;
								} // closing inner join bracket (2)
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_13 = false;

							tos_count_tMap_13++;

							/**
							 * [tMap_13 main ] stop
							 */
							// Start of branch "MAPPING_ENTE_TIPO_DOVUTO"
							if (MAPPING_ENTE_TIPO_DOVUTO != null) {

								/**
								 * [tPostgresqlOutput_7 main ] start
								 */

								currentComponent = "tPostgresqlOutput_7";

								whetherReject_tPostgresqlOutput_7 = false;
								int updateFlag_tPostgresqlOutput_7 = 0;
								if (MAPPING_ENTE_TIPO_DOVUTO.de_tipo == null) {
									pstmtUpdate_tPostgresqlOutput_7.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_7
											.setString(
													1,
													MAPPING_ENTE_TIPO_DOVUTO.de_tipo);
								}

								pstmtUpdate_tPostgresqlOutput_7.setLong(
										2 + count_tPostgresqlOutput_7,
										MAPPING_ENTE_TIPO_DOVUTO.mygov_ente_id);

								if (MAPPING_ENTE_TIPO_DOVUTO.cod_tipo == null) {
									pstmtUpdate_tPostgresqlOutput_7.setNull(
											3 + count_tPostgresqlOutput_7,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_7.setString(
											3 + count_tPostgresqlOutput_7,
											MAPPING_ENTE_TIPO_DOVUTO.cod_tipo);
								}

								try {

									updateFlag_tPostgresqlOutput_7 = pstmtUpdate_tPostgresqlOutput_7
											.executeUpdate();
									updatedCount_tPostgresqlOutput_7 = updatedCount_tPostgresqlOutput_7
											+ updateFlag_tPostgresqlOutput_7;

									if (updateFlag_tPostgresqlOutput_7 == 0) {

										pstmtInsert_tPostgresqlOutput_7
												.setLong(
														1,
														MAPPING_ENTE_TIPO_DOVUTO.mygov_ente_id);

										if (MAPPING_ENTE_TIPO_DOVUTO.cod_tipo == null) {
											pstmtInsert_tPostgresqlOutput_7
													.setNull(
															2,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_7
													.setString(
															2,
															MAPPING_ENTE_TIPO_DOVUTO.cod_tipo);
										}

										if (MAPPING_ENTE_TIPO_DOVUTO.de_tipo == null) {
											pstmtInsert_tPostgresqlOutput_7
													.setNull(
															3,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_7
													.setString(
															3,
															MAPPING_ENTE_TIPO_DOVUTO.de_tipo);
										}

										insertedCount_tPostgresqlOutput_7 = insertedCount_tPostgresqlOutput_7
												+ pstmtInsert_tPostgresqlOutput_7
														.executeUpdate();
										nb_line_tPostgresqlOutput_7++;

									} else {
										nb_line_tPostgresqlOutput_7++;

									}
								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_7 = true;
									throw (e);
								}
								if (batchSize_tPostgresqlOutput_7 <= batchSizeCounter_tPostgresqlOutput_7) {

								}

								tos_count_tPostgresqlOutput_7++;

								/**
								 * [tPostgresqlOutput_7 main ] stop
								 */

							} // End of branch "MAPPING_ENTE_TIPO_DOVUTO"

						} // End of branch "ENTE_TIPO"

						/**
						 * [tPostgresqlInput_12 end ] start
						 */

						currentComponent = "tPostgresqlInput_12";

					}
				} finally {
					stmt_tPostgresqlInput_12.close();

				}
				globalMap.put("tPostgresqlInput_12_NB_LINE",
						nb_line_tPostgresqlInput_12);

				ok_Hash.put("tPostgresqlInput_12", true);
				end_Hash.put("tPostgresqlInput_12", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_12",
						end_Hash.get("tPostgresqlInput_12")
								- start_Hash.get("tPostgresqlInput_12"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_12 end ] stop
				 */

				/**
				 * [tMap_12 end ] start
				 */

				currentComponent = "tMap_12";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row17 != null) {
					tHash_Lookup_row17.endGet();
				}
				globalMap.remove("tHash_Lookup_row17");

				// ###############################

				ok_Hash.put("tMap_12", true);
				end_Hash.put("tMap_12", System.currentTimeMillis());

				/**
				 * [tMap_12 end ] stop
				 */

				/**
				 * [tMap_13 end ] start
				 */

				currentComponent = "tMap_13";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row18 != null) {
					tHash_Lookup_row18.endGet();
				}
				globalMap.remove("tHash_Lookup_row18");

				// ###############################

				ok_Hash.put("tMap_13", true);
				end_Hash.put("tMap_13", System.currentTimeMillis());

				/**
				 * [tMap_13 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_7 end ] start
				 */

				currentComponent = "tPostgresqlOutput_7";

				if (pstmtUpdate_tPostgresqlOutput_7 != null) {

					pstmtUpdate_tPostgresqlOutput_7.close();

				}
				if (pstmtInsert_tPostgresqlOutput_7 != null) {

					pstmtInsert_tPostgresqlOutput_7.close();

				}

				nb_line_deleted_tPostgresqlOutput_7 = nb_line_deleted_tPostgresqlOutput_7
						+ deletedCount_tPostgresqlOutput_7;
				nb_line_update_tPostgresqlOutput_7 = nb_line_update_tPostgresqlOutput_7
						+ updatedCount_tPostgresqlOutput_7;
				nb_line_inserted_tPostgresqlOutput_7 = nb_line_inserted_tPostgresqlOutput_7
						+ insertedCount_tPostgresqlOutput_7;
				nb_line_rejected_tPostgresqlOutput_7 = nb_line_rejected_tPostgresqlOutput_7
						+ rejectedCount_tPostgresqlOutput_7;

				globalMap.put("tPostgresqlOutput_7_NB_LINE",
						nb_line_tPostgresqlOutput_7);
				globalMap.put("tPostgresqlOutput_7_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_7);
				globalMap.put("tPostgresqlOutput_7_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_7);
				globalMap.put("tPostgresqlOutput_7_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_7);
				globalMap.put("tPostgresqlOutput_7_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_7);

				ok_Hash.put("tPostgresqlOutput_7", true);
				end_Hash.put("tPostgresqlOutput_7", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlOutput_7",
						end_Hash.get("tPostgresqlOutput_7")
								- start_Hash.get("tPostgresqlOutput_7"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlOutput_7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_13"
			globalMap.remove("tHash_Lookup_row18");

			// free memory for "tMap_12"
			globalMap.remove("tHash_Lookup_row17");

			try {

				/**
				 * [tPostgresqlInput_12 finally ] start
				 */

				currentComponent = "tPostgresqlInput_12";

				/**
				 * [tPostgresqlInput_12 finally ] stop
				 */

				/**
				 * [tMap_12 finally ] start
				 */

				currentComponent = "tMap_12";

				/**
				 * [tMap_12 finally ] stop
				 */

				/**
				 * [tMap_13 finally ] start
				 */

				currentComponent = "tMap_13";

				/**
				 * [tMap_13 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_7 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_7";

				/**
				 * [tPostgresqlOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_12_SUBPROCESS_STATE", 1);
	}

	public void tJava_8Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_8 begin ] start
				 */

				ok_Hash.put("tJava_8", false);
				start_Hash.put("tJava_8", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_8");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_8";

				int tos_count_tJava_8 = 0;

				if ("failure".equalsIgnoreCase(status)) {
					globalMap.put("errorAllinea", true);
				}

				/**
				 * [tJava_8 begin ] stop
				 */

				/**
				 * [tJava_8 main ] start
				 */

				currentComponent = "tJava_8";

				tos_count_tJava_8++;

				/**
				 * [tJava_8 main ] stop
				 */

				/**
				 * [tJava_8 end ] start
				 */

				currentComponent = "tJava_8";

				ok_Hash.put("tJava_8", true);
				end_Hash.put("tJava_8", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_8",
						end_Hash.get("tJava_8") - start_Hash.get("tJava_8"));
				tStatCatcher_1Process(globalMap);
				if (!(Boolean) globalMap.get("errorAllinea")) {

					tPostgresqlInput_20Process(globalMap);
				}

				/**
				 * [tJava_8 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_8 finally ] start
				 */

				currentComponent = "tJava_8";

				/**
				 * [tJava_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}

	public static class MAPPING_UTENTEStruct implements
			routines.system.IPersistableRow<MAPPING_UTENTEStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_utente_id;

		public long getMygov_utente_id() {
			return this.mygov_utente_id;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		public String cod_fed_user_id;

		public String getCod_fed_user_id() {
			return this.cod_fed_user_id;
		}

		public String cod_codice_fiscale_utente;

		public String getCod_codice_fiscale_utente() {
			return this.cod_codice_fiscale_utente;
		}

		public String de_email_address;

		public String getDe_email_address() {
			return this.de_email_address;
		}

		public String de_firstname;

		public String getDe_firstname() {
			return this.de_firstname;
		}

		public String de_lastname;

		public String getDe_lastname() {
			return this.de_lastname;
		}

		public java.util.Date dt_ultimo_login;

		public java.util.Date getDt_ultimo_login() {
			return this.dt_ultimo_login;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.cod_fed_user_id == null) ? 0
								: this.cod_fed_user_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final MAPPING_UTENTEStruct other = (MAPPING_UTENTEStruct) obj;

			if (this.cod_fed_user_id == null) {
				if (other.cod_fed_user_id != null)
					return false;

			} else if (!this.cod_fed_user_id.equals(other.cod_fed_user_id))

				return false;

			return true;
		}

		public void copyDataTo(MAPPING_UTENTEStruct other) {

			other.mygov_utente_id = this.mygov_utente_id;
			other.version = this.version;
			other.cod_fed_user_id = this.cod_fed_user_id;
			other.cod_codice_fiscale_utente = this.cod_codice_fiscale_utente;
			other.de_email_address = this.de_email_address;
			other.de_firstname = this.de_firstname;
			other.de_lastname = this.de_lastname;
			other.dt_ultimo_login = this.dt_ultimo_login;

		}

		public void copyKeysDataTo(MAPPING_UTENTEStruct other) {

			other.cod_fed_user_id = this.cod_fed_user_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_utente_id = dis.readLong();

					this.version = dis.readInt();

					this.cod_fed_user_id = readString(dis);

					this.cod_codice_fiscale_utente = readString(dis);

					this.de_email_address = readString(dis);

					this.de_firstname = readString(dis);

					this.de_lastname = readString(dis);

					this.dt_ultimo_login = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_utente_id);

				// int

				dos.writeInt(this.version);

				// String

				writeString(this.cod_fed_user_id, dos);

				// String

				writeString(this.cod_codice_fiscale_utente, dos);

				// String

				writeString(this.de_email_address, dos);

				// String

				writeString(this.de_firstname, dos);

				// String

				writeString(this.de_lastname, dos);

				// java.util.Date

				writeDate(this.dt_ultimo_login, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_utente_id=" + String.valueOf(mygov_utente_id));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",cod_fed_user_id=" + cod_fed_user_id);
			sb.append(",cod_codice_fiscale_utente=" + cod_codice_fiscale_utente);
			sb.append(",de_email_address=" + de_email_address);
			sb.append(",de_firstname=" + de_firstname);
			sb.append(",de_lastname=" + de_lastname);
			sb.append(",dt_ultimo_login=" + String.valueOf(dt_ultimo_login));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(MAPPING_UTENTEStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.cod_fed_user_id,
					other.cod_fed_user_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements
			routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public long mygov_utente_id;

		public long getMygov_utente_id() {
			return this.mygov_utente_id;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		public String cod_fed_user_id;

		public String getCod_fed_user_id() {
			return this.cod_fed_user_id;
		}

		public String cod_codice_fiscale_utente;

		public String getCod_codice_fiscale_utente() {
			return this.cod_codice_fiscale_utente;
		}

		public boolean flg_fed_authorized;

		public boolean getFlg_fed_authorized() {
			return this.flg_fed_authorized;
		}

		public String de_email_address;

		public String getDe_email_address() {
			return this.de_email_address;
		}

		public String de_firstname;

		public String getDe_firstname() {
			return this.de_firstname;
		}

		public String de_lastname;

		public String getDe_lastname() {
			return this.de_lastname;
		}

		public String de_fed_legal_entity;

		public String getDe_fed_legal_entity() {
			return this.de_fed_legal_entity;
		}

		public java.util.Date dt_ultimo_login;

		public java.util.Date getDt_ultimo_login() {
			return this.dt_ultimo_login;
		}

		public String indirizzo;

		public String getIndirizzo() {
			return this.indirizzo;
		}

		public String civico;

		public String getCivico() {
			return this.civico;
		}

		public String cap;

		public String getCap() {
			return this.cap;
		}

		public Long comune_id;

		public Long getComune_id() {
			return this.comune_id;
		}

		public Long provincia_id;

		public Long getProvincia_id() {
			return this.provincia_id;
		}

		public Long nazione_id;

		public Long getNazione_id() {
			return this.nazione_id;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_utente_id = dis.readLong();

					this.version = dis.readInt();

					this.cod_fed_user_id = readString(dis);

					this.cod_codice_fiscale_utente = readString(dis);

					this.flg_fed_authorized = dis.readBoolean();

					this.de_email_address = readString(dis);

					this.de_firstname = readString(dis);

					this.de_lastname = readString(dis);

					this.de_fed_legal_entity = readString(dis);

					this.dt_ultimo_login = readDate(dis);

					this.indirizzo = readString(dis);

					this.civico = readString(dis);

					this.cap = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.comune_id = null;
					} else {
						this.comune_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.provincia_id = null;
					} else {
						this.provincia_id = dis.readLong();
					}

					length = dis.readByte();
					if (length == -1) {
						this.nazione_id = null;
					} else {
						this.nazione_id = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_utente_id);

				// int

				dos.writeInt(this.version);

				// String

				writeString(this.cod_fed_user_id, dos);

				// String

				writeString(this.cod_codice_fiscale_utente, dos);

				// boolean

				dos.writeBoolean(this.flg_fed_authorized);

				// String

				writeString(this.de_email_address, dos);

				// String

				writeString(this.de_firstname, dos);

				// String

				writeString(this.de_lastname, dos);

				// String

				writeString(this.de_fed_legal_entity, dos);

				// java.util.Date

				writeDate(this.dt_ultimo_login, dos);

				// String

				writeString(this.indirizzo, dos);

				// String

				writeString(this.civico, dos);

				// String

				writeString(this.cap, dos);

				// Long

				if (this.comune_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.comune_id);
				}

				// Long

				if (this.provincia_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.provincia_id);
				}

				// Long

				if (this.nazione_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nazione_id);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_utente_id=" + String.valueOf(mygov_utente_id));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",cod_fed_user_id=" + cod_fed_user_id);
			sb.append(",cod_codice_fiscale_utente=" + cod_codice_fiscale_utente);
			sb.append(",flg_fed_authorized="
					+ String.valueOf(flg_fed_authorized));
			sb.append(",de_email_address=" + de_email_address);
			sb.append(",de_firstname=" + de_firstname);
			sb.append(",de_lastname=" + de_lastname);
			sb.append(",de_fed_legal_entity=" + de_fed_legal_entity);
			sb.append(",dt_ultimo_login=" + String.valueOf(dt_ultimo_login));
			sb.append(",indirizzo=" + indirizzo);
			sb.append(",civico=" + civico);
			sb.append(",cap=" + cap);
			sb.append(",comune_id=" + String.valueOf(comune_id));
			sb.append(",provincia_id=" + String.valueOf(provincia_id));
			sb.append(",nazione_id=" + String.valueOf(nazione_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_20Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_20_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row23Struct row23 = new row23Struct();
				MAPPING_UTENTEStruct MAPPING_UTENTE = new MAPPING_UTENTEStruct();

				/**
				 * [tPostgresqlOutput_10 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_10", false);
				start_Hash.put("tPostgresqlOutput_10",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlOutput_10");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlOutput_10";

				int tos_count_tPostgresqlOutput_10 = 0;

				String dbschema_tPostgresqlOutput_10 = null;
				dbschema_tPostgresqlOutput_10 = (String) globalMap
						.get("schema_" + "tPostgresqlConnection_3");

				String tableName_tPostgresqlOutput_10 = null;
				if (dbschema_tPostgresqlOutput_10 == null
						|| dbschema_tPostgresqlOutput_10.trim().length() == 0) {
					tableName_tPostgresqlOutput_10 = "mygov_utente";
				} else {
					tableName_tPostgresqlOutput_10 = dbschema_tPostgresqlOutput_10
							+ "\".\"" + "mygov_utente";
				}

				int updateKeyCount_tPostgresqlOutput_10 = 1;
				if (updateKeyCount_tPostgresqlOutput_10 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_10 = 0;
				int nb_line_update_tPostgresqlOutput_10 = 0;
				int nb_line_inserted_tPostgresqlOutput_10 = 0;
				int nb_line_deleted_tPostgresqlOutput_10 = 0;
				int nb_line_rejected_tPostgresqlOutput_10 = 0;

				int deletedCount_tPostgresqlOutput_10 = 0;
				int updatedCount_tPostgresqlOutput_10 = 0;
				int insertedCount_tPostgresqlOutput_10 = 0;
				int rejectedCount_tPostgresqlOutput_10 = 0;

				boolean whetherReject_tPostgresqlOutput_10 = false;

				java.sql.Connection conn_tPostgresqlOutput_10 = null;

				conn_tPostgresqlOutput_10 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_3");

				int count_tPostgresqlOutput_10 = 0;
				String update_tPostgresqlOutput_10 = "UPDATE \""
						+ tableName_tPostgresqlOutput_10
						+ "\" SET \"cod_codice_fiscale_utente\" = ?,\"de_email_address\" = ?,\"de_firstname\" = ?,\"de_lastname\" = ?,\"dt_ultimo_login\" = ? WHERE \"cod_fed_user_id\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_10 = conn_tPostgresqlOutput_10
						.prepareStatement(update_tPostgresqlOutput_10);
				String insert_tPostgresqlOutput_10 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_10
						+ "\" (\""
						+ "mygov_utente_id"
						+ "\",\"version\",\"cod_fed_user_id\",\"cod_codice_fiscale_utente\",\"de_email_address\",\"de_firstname\",\"de_lastname\",\"dt_ultimo_login\") VALUES ("
						+ "nextval('mygov_utente_mygov_utente_id_seq')"
						+ ",?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_10 = conn_tPostgresqlOutput_10
						.prepareStatement(insert_tPostgresqlOutput_10);

				/**
				 * [tPostgresqlOutput_10 begin ] stop
				 */

				/**
				 * [tMap_17 begin ] start
				 */

				ok_Hash.put("tMap_17", false);
				start_Hash.put("tMap_17", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tMap_17");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tMap_17";

				int tos_count_tMap_17 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_17__Struct {
				}
				Var__tMap_17__Struct Var__tMap_17 = new Var__tMap_17__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				MAPPING_UTENTEStruct MAPPING_UTENTE_tmp = new MAPPING_UTENTEStruct();
				// ###############################

				/**
				 * [tMap_17 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_20 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_20", false);
				start_Hash.put("tPostgresqlInput_20",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_20");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_20";

				int tos_count_tPostgresqlInput_20 = 0;

				int nb_line_tPostgresqlInput_20 = 0;
				java.sql.Connection conn_tPostgresqlInput_20 = null;
				conn_tPostgresqlInput_20 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_20 = conn_tPostgresqlInput_20
						.createStatement();

				String dbquery_tPostgresqlInput_20 = "SELECT \n  \"mygov_utente\".\"mygov_utente_id\", \n  \"mygov_utente\".\"version\", \n  \"mygov_utente\".\"cod_fed_user_id\", \n  \"mygov_utente\".\"cod_codice_fiscale_utente\", \n  \"mygov_utente\".\"flg_fed_authorized\", \n  \"mygov_utente\".\"de_email_address\", \n  \"mygov_utente\".\"de_firstname\", \n  \"mygov_utente\".\"de_lastname\", \n  \"mygov_utente\".\"de_fed_legal_entity\", \n  \"mygov_utente\".\"dt_ultimo_login\", \n  \"mygov_utente\".\"indirizzo\", \n  \"mygov_utente\".\"civico\", \n  \"mygov_utente\".\"cap\", \n  \"mygov_utente\".\"comune_id\", \n  \"mygov_utente\".\"provincia_id\", \n  \"mygov_utente\".\"nazione_id\"\nFROM \"mygov_utente\"\nWHERE \"mygov_utente\".\"cod_fed_user_id\" like '%WS_USER%'";

				globalMap.put("tPostgresqlInput_20_QUERY",
						dbquery_tPostgresqlInput_20);
				java.sql.ResultSet rs_tPostgresqlInput_20 = null;
				try {
					rs_tPostgresqlInput_20 = stmt_tPostgresqlInput_20
							.executeQuery(dbquery_tPostgresqlInput_20);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_20 = rs_tPostgresqlInput_20
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_20 = rsmd_tPostgresqlInput_20
							.getColumnCount();

					String tmpContent_tPostgresqlInput_20 = null;

					while (rs_tPostgresqlInput_20.next()) {
						nb_line_tPostgresqlInput_20++;

						if (colQtyInRs_tPostgresqlInput_20 < 1) {
							row23.mygov_utente_id = 0;
						} else {

							if (rs_tPostgresqlInput_20.getObject(1) != null) {
								row23.mygov_utente_id = rs_tPostgresqlInput_20
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_20 < 2) {
							row23.version = 0;
						} else {

							if (rs_tPostgresqlInput_20.getObject(2) != null) {
								row23.version = rs_tPostgresqlInput_20
										.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_20 < 3) {
							row23.cod_fed_user_id = null;
						} else {

							tmpContent_tPostgresqlInput_20 = rs_tPostgresqlInput_20
									.getString(3);
							if (tmpContent_tPostgresqlInput_20 != null) {
								row23.cod_fed_user_id = tmpContent_tPostgresqlInput_20
										.trim();
							} else {
								row23.cod_fed_user_id = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_20 < 4) {
							row23.cod_codice_fiscale_utente = null;
						} else {

							tmpContent_tPostgresqlInput_20 = rs_tPostgresqlInput_20
									.getString(4);
							if (tmpContent_tPostgresqlInput_20 != null) {
								row23.cod_codice_fiscale_utente = tmpContent_tPostgresqlInput_20
										.trim();
							} else {
								row23.cod_codice_fiscale_utente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_20 < 5) {
							row23.flg_fed_authorized = false;
						} else {

							if (rs_tPostgresqlInput_20.getObject(5) != null) {
								row23.flg_fed_authorized = rs_tPostgresqlInput_20
										.getBoolean(5);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_20 < 6) {
							row23.de_email_address = null;
						} else {

							tmpContent_tPostgresqlInput_20 = rs_tPostgresqlInput_20
									.getString(6);
							if (tmpContent_tPostgresqlInput_20 != null) {
								row23.de_email_address = tmpContent_tPostgresqlInput_20
										.trim();
							} else {
								row23.de_email_address = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_20 < 7) {
							row23.de_firstname = null;
						} else {

							tmpContent_tPostgresqlInput_20 = rs_tPostgresqlInput_20
									.getString(7);
							if (tmpContent_tPostgresqlInput_20 != null) {
								row23.de_firstname = tmpContent_tPostgresqlInput_20
										.trim();
							} else {
								row23.de_firstname = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_20 < 8) {
							row23.de_lastname = null;
						} else {

							tmpContent_tPostgresqlInput_20 = rs_tPostgresqlInput_20
									.getString(8);
							if (tmpContent_tPostgresqlInput_20 != null) {
								row23.de_lastname = tmpContent_tPostgresqlInput_20
										.trim();
							} else {
								row23.de_lastname = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_20 < 9) {
							row23.de_fed_legal_entity = null;
						} else {

							tmpContent_tPostgresqlInput_20 = rs_tPostgresqlInput_20
									.getString(9);
							if (tmpContent_tPostgresqlInput_20 != null) {
								row23.de_fed_legal_entity = tmpContent_tPostgresqlInput_20
										.trim();
							} else {
								row23.de_fed_legal_entity = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_20 < 10) {
							row23.dt_ultimo_login = null;
						} else {

							if (rs_tPostgresqlInput_20.getTimestamp(10) != null) {
								row23.dt_ultimo_login = new java.util.Date(
										rs_tPostgresqlInput_20.getTimestamp(10)
												.getTime());
							} else {
								row23.dt_ultimo_login = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_20 < 11) {
							row23.indirizzo = null;
						} else {

							tmpContent_tPostgresqlInput_20 = rs_tPostgresqlInput_20
									.getString(11);
							if (tmpContent_tPostgresqlInput_20 != null) {
								row23.indirizzo = tmpContent_tPostgresqlInput_20
										.trim();
							} else {
								row23.indirizzo = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_20 < 12) {
							row23.civico = null;
						} else {

							tmpContent_tPostgresqlInput_20 = rs_tPostgresqlInput_20
									.getString(12);
							if (tmpContent_tPostgresqlInput_20 != null) {
								row23.civico = tmpContent_tPostgresqlInput_20
										.trim();
							} else {
								row23.civico = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_20 < 13) {
							row23.cap = null;
						} else {

							tmpContent_tPostgresqlInput_20 = rs_tPostgresqlInput_20
									.getString(13);
							if (tmpContent_tPostgresqlInput_20 != null) {
								row23.cap = tmpContent_tPostgresqlInput_20
										.trim();
							} else {
								row23.cap = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_20 < 14) {
							row23.comune_id = null;
						} else {

							if (rs_tPostgresqlInput_20.getObject(14) != null) {
								row23.comune_id = rs_tPostgresqlInput_20
										.getLong(14);
							} else {
								row23.comune_id = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_20 < 15) {
							row23.provincia_id = null;
						} else {

							if (rs_tPostgresqlInput_20.getObject(15) != null) {
								row23.provincia_id = rs_tPostgresqlInput_20
										.getLong(15);
							} else {
								row23.provincia_id = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_20 < 16) {
							row23.nazione_id = null;
						} else {

							if (rs_tPostgresqlInput_20.getObject(16) != null) {
								row23.nazione_id = rs_tPostgresqlInput_20
										.getLong(16);
							} else {
								row23.nazione_id = null;
							}
						}

						/**
						 * [tPostgresqlInput_20 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_20 main ] start
						 */

						currentComponent = "tPostgresqlInput_20";

						tos_count_tPostgresqlInput_20++;

						/**
						 * [tPostgresqlInput_20 main ] stop
						 */

						/**
						 * [tMap_17 main ] start
						 */

						currentComponent = "tMap_17";

						boolean hasCasePrimitiveKeyWithNull_tMap_17 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_17 = false;
						boolean mainRowRejected_tMap_17 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_17__Struct Var = Var__tMap_17;// ###############################
							// ###############################
							// # Output tables

							MAPPING_UTENTE = null;

							// # Output table : 'MAPPING_UTENTE'
							MAPPING_UTENTE_tmp.mygov_utente_id = 0;
							MAPPING_UTENTE_tmp.version = 0;
							MAPPING_UTENTE_tmp.cod_fed_user_id = row23.cod_fed_user_id;
							MAPPING_UTENTE_tmp.cod_codice_fiscale_utente = row23.cod_codice_fiscale_utente;
							MAPPING_UTENTE_tmp.de_email_address = row23.de_email_address;
							MAPPING_UTENTE_tmp.de_firstname = row23.de_firstname;
							MAPPING_UTENTE_tmp.de_lastname = row23.de_lastname;
							MAPPING_UTENTE_tmp.dt_ultimo_login = row23.dt_ultimo_login;
							MAPPING_UTENTE = MAPPING_UTENTE_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_17 = false;

						tos_count_tMap_17++;

						/**
						 * [tMap_17 main ] stop
						 */
						// Start of branch "MAPPING_UTENTE"
						if (MAPPING_UTENTE != null) {

							/**
							 * [tPostgresqlOutput_10 main ] start
							 */

							currentComponent = "tPostgresqlOutput_10";

							whetherReject_tPostgresqlOutput_10 = false;
							int updateFlag_tPostgresqlOutput_10 = 0;
							if (MAPPING_UTENTE.cod_codice_fiscale_utente == null) {
								pstmtUpdate_tPostgresqlOutput_10.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_10
										.setString(
												1,
												MAPPING_UTENTE.cod_codice_fiscale_utente);
							}

							if (MAPPING_UTENTE.de_email_address == null) {
								pstmtUpdate_tPostgresqlOutput_10.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_10.setString(2,
										MAPPING_UTENTE.de_email_address);
							}

							if (MAPPING_UTENTE.de_firstname == null) {
								pstmtUpdate_tPostgresqlOutput_10.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_10.setString(3,
										MAPPING_UTENTE.de_firstname);
							}

							if (MAPPING_UTENTE.de_lastname == null) {
								pstmtUpdate_tPostgresqlOutput_10.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_10.setString(4,
										MAPPING_UTENTE.de_lastname);
							}

							if (MAPPING_UTENTE.dt_ultimo_login != null) {
								pstmtUpdate_tPostgresqlOutput_10.setTimestamp(
										5,
										new java.sql.Timestamp(
												MAPPING_UTENTE.dt_ultimo_login
														.getTime()));
							} else {
								pstmtUpdate_tPostgresqlOutput_10.setNull(5,
										java.sql.Types.TIMESTAMP);
							}

							if (MAPPING_UTENTE.cod_fed_user_id == null) {
								pstmtUpdate_tPostgresqlOutput_10.setNull(
										6 + count_tPostgresqlOutput_10,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_10.setString(
										6 + count_tPostgresqlOutput_10,
										MAPPING_UTENTE.cod_fed_user_id);
							}

							try {

								updateFlag_tPostgresqlOutput_10 = pstmtUpdate_tPostgresqlOutput_10
										.executeUpdate();
								updatedCount_tPostgresqlOutput_10 = updatedCount_tPostgresqlOutput_10
										+ updateFlag_tPostgresqlOutput_10;

								if (updateFlag_tPostgresqlOutput_10 == 0) {

									pstmtInsert_tPostgresqlOutput_10.setInt(1,
											MAPPING_UTENTE.version);

									if (MAPPING_UTENTE.cod_fed_user_id == null) {
										pstmtInsert_tPostgresqlOutput_10
												.setNull(2,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_10
												.setString(
														2,
														MAPPING_UTENTE.cod_fed_user_id);
									}

									if (MAPPING_UTENTE.cod_codice_fiscale_utente == null) {
										pstmtInsert_tPostgresqlOutput_10
												.setNull(3,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_10
												.setString(
														3,
														MAPPING_UTENTE.cod_codice_fiscale_utente);
									}

									if (MAPPING_UTENTE.de_email_address == null) {
										pstmtInsert_tPostgresqlOutput_10
												.setNull(4,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_10
												.setString(
														4,
														MAPPING_UTENTE.de_email_address);
									}

									if (MAPPING_UTENTE.de_firstname == null) {
										pstmtInsert_tPostgresqlOutput_10
												.setNull(5,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_10
												.setString(
														5,
														MAPPING_UTENTE.de_firstname);
									}

									if (MAPPING_UTENTE.de_lastname == null) {
										pstmtInsert_tPostgresqlOutput_10
												.setNull(6,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_10
												.setString(
														6,
														MAPPING_UTENTE.de_lastname);
									}

									if (MAPPING_UTENTE.dt_ultimo_login != null) {
										pstmtInsert_tPostgresqlOutput_10
												.setTimestamp(
														7,
														new java.sql.Timestamp(
																MAPPING_UTENTE.dt_ultimo_login
																		.getTime()));
									} else {
										pstmtInsert_tPostgresqlOutput_10
												.setNull(
														7,
														java.sql.Types.TIMESTAMP);
									}

									insertedCount_tPostgresqlOutput_10 = insertedCount_tPostgresqlOutput_10
											+ pstmtInsert_tPostgresqlOutput_10
													.executeUpdate();
									nb_line_tPostgresqlOutput_10++;

								} else {
									nb_line_tPostgresqlOutput_10++;

								}
							} catch (java.lang.Exception e) {

								whetherReject_tPostgresqlOutput_10 = true;
								throw (e);
							}

							tos_count_tPostgresqlOutput_10++;

							/**
							 * [tPostgresqlOutput_10 main ] stop
							 */

						} // End of branch "MAPPING_UTENTE"

						/**
						 * [tPostgresqlInput_20 end ] start
						 */

						currentComponent = "tPostgresqlInput_20";

					}
				} finally {
					stmt_tPostgresqlInput_20.close();

				}
				globalMap.put("tPostgresqlInput_20_NB_LINE",
						nb_line_tPostgresqlInput_20);

				ok_Hash.put("tPostgresqlInput_20", true);
				end_Hash.put("tPostgresqlInput_20", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_20",
						end_Hash.get("tPostgresqlInput_20")
								- start_Hash.get("tPostgresqlInput_20"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_20 end ] stop
				 */

				/**
				 * [tMap_17 end ] start
				 */

				currentComponent = "tMap_17";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_17", true);
				end_Hash.put("tMap_17", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tMap_17",
						end_Hash.get("tMap_17") - start_Hash.get("tMap_17"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tMap_17 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_10 end ] start
				 */

				currentComponent = "tPostgresqlOutput_10";

				if (pstmtUpdate_tPostgresqlOutput_10 != null) {

					pstmtUpdate_tPostgresqlOutput_10.close();

				}
				if (pstmtInsert_tPostgresqlOutput_10 != null) {

					pstmtInsert_tPostgresqlOutput_10.close();

				}

				nb_line_deleted_tPostgresqlOutput_10 = nb_line_deleted_tPostgresqlOutput_10
						+ deletedCount_tPostgresqlOutput_10;
				nb_line_update_tPostgresqlOutput_10 = nb_line_update_tPostgresqlOutput_10
						+ updatedCount_tPostgresqlOutput_10;
				nb_line_inserted_tPostgresqlOutput_10 = nb_line_inserted_tPostgresqlOutput_10
						+ insertedCount_tPostgresqlOutput_10;
				nb_line_rejected_tPostgresqlOutput_10 = nb_line_rejected_tPostgresqlOutput_10
						+ rejectedCount_tPostgresqlOutput_10;

				globalMap.put("tPostgresqlOutput_10_NB_LINE",
						nb_line_tPostgresqlOutput_10);
				globalMap.put("tPostgresqlOutput_10_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_10);
				globalMap.put("tPostgresqlOutput_10_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_10);
				globalMap.put("tPostgresqlOutput_10_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_10);
				globalMap.put("tPostgresqlOutput_10_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_10);

				ok_Hash.put("tPostgresqlOutput_10", true);
				end_Hash.put("tPostgresqlOutput_10", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlOutput_10",
						end_Hash.get("tPostgresqlOutput_10")
								- start_Hash.get("tPostgresqlOutput_10"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlOutput_10 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tPostgresqlInput_20:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tPostgresqlInput_16Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_20 finally ] start
				 */

				currentComponent = "tPostgresqlInput_20";

				/**
				 * [tPostgresqlInput_20 finally ] stop
				 */

				/**
				 * [tMap_17 finally ] start
				 */

				currentComponent = "tMap_17";

				/**
				 * [tMap_17 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_10 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_10";

				/**
				 * [tPostgresqlOutput_10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_20_SUBPROCESS_STATE", 1);
	}

	public static class MAPPING_OPERATORE_ENTE_TIPO_DOVUTOStruct
			implements
			routines.system.IPersistableRow<MAPPING_OPERATORE_ENTE_TIPO_DOVUTOStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_operatore_ente_tipo_dovuto_id;

		public long getMygov_operatore_ente_tipo_dovuto_id() {
			return this.mygov_operatore_ente_tipo_dovuto_id;
		}

		public String cod_fed_user_id;

		public String getCod_fed_user_id() {
			return this.cod_fed_user_id;
		}

		public Long mygov_ente_tipo_dovuto_id;

		public Long getMygov_ente_tipo_dovuto_id() {
			return this.mygov_ente_tipo_dovuto_id;
		}

		public boolean flg_attivo;

		public boolean getFlg_attivo() {
			return this.flg_attivo;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ (int) this.mygov_operatore_ente_tipo_dovuto_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final MAPPING_OPERATORE_ENTE_TIPO_DOVUTOStruct other = (MAPPING_OPERATORE_ENTE_TIPO_DOVUTOStruct) obj;

			if (this.mygov_operatore_ente_tipo_dovuto_id != other.mygov_operatore_ente_tipo_dovuto_id)
				return false;

			return true;
		}

		public void copyDataTo(MAPPING_OPERATORE_ENTE_TIPO_DOVUTOStruct other) {

			other.mygov_operatore_ente_tipo_dovuto_id = this.mygov_operatore_ente_tipo_dovuto_id;
			other.cod_fed_user_id = this.cod_fed_user_id;
			other.mygov_ente_tipo_dovuto_id = this.mygov_ente_tipo_dovuto_id;
			other.flg_attivo = this.flg_attivo;

		}

		public void copyKeysDataTo(
				MAPPING_OPERATORE_ENTE_TIPO_DOVUTOStruct other) {

			other.mygov_operatore_ente_tipo_dovuto_id = this.mygov_operatore_ente_tipo_dovuto_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_operatore_ente_tipo_dovuto_id = dis.readLong();

					this.cod_fed_user_id = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.mygov_ente_tipo_dovuto_id = null;
					} else {
						this.mygov_ente_tipo_dovuto_id = dis.readLong();
					}

					this.flg_attivo = dis.readBoolean();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_operatore_ente_tipo_dovuto_id);

				// String

				writeString(this.cod_fed_user_id, dos);

				// Long

				if (this.mygov_ente_tipo_dovuto_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.mygov_ente_tipo_dovuto_id);
				}

				// boolean

				dos.writeBoolean(this.flg_attivo);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_operatore_ente_tipo_dovuto_id="
					+ String.valueOf(mygov_operatore_ente_tipo_dovuto_id));
			sb.append(",cod_fed_user_id=" + cod_fed_user_id);
			sb.append(",mygov_ente_tipo_dovuto_id="
					+ String.valueOf(mygov_ente_tipo_dovuto_id));
			sb.append(",flg_attivo=" + String.valueOf(flg_attivo));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(MAPPING_OPERATORE_ENTE_TIPO_DOVUTOStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(
					this.mygov_operatore_ente_tipo_dovuto_id,
					other.mygov_operatore_ente_tipo_dovuto_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTOStruct
			implements
			routines.system.IPersistableRow<ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTOStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public String cod_fed_user_id;

		public String getCod_fed_user_id() {
			return this.cod_fed_user_id;
		}

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		public String cod_tipo;

		public String getCod_tipo() {
			return this.cod_tipo;
		}

		public boolean flg_attivo;

		public boolean getFlg_attivo() {
			return this.flg_attivo;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.cod_fed_user_id = readString(dis);

					this.cod_ipa_ente = readString(dis);

					this.cod_tipo = readString(dis);

					this.flg_attivo = dis.readBoolean();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.cod_fed_user_id, dos);

				// String

				writeString(this.cod_ipa_ente, dos);

				// String

				writeString(this.cod_tipo, dos);

				// boolean

				dos.writeBoolean(this.flg_attivo);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("cod_fed_user_id=" + cod_fed_user_id);
			sb.append(",cod_ipa_ente=" + cod_ipa_ente);
			sb.append(",cod_tipo=" + cod_tipo);
			sb.append(",flg_attivo=" + String.valueOf(flg_attivo));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTOStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements
			routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public long mygov_operatore_ente_tipo_dovuto_id;

		public long getMygov_operatore_ente_tipo_dovuto_id() {
			return this.mygov_operatore_ente_tipo_dovuto_id;
		}

		public long mygov_operatore_id;

		public long getMygov_operatore_id() {
			return this.mygov_operatore_id;
		}

		public long mygov_ente_tipo_dovuto_id;

		public long getMygov_ente_tipo_dovuto_id() {
			return this.mygov_ente_tipo_dovuto_id;
		}

		public boolean flg_attivo;

		public boolean getFlg_attivo() {
			return this.flg_attivo;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_operatore_ente_tipo_dovuto_id = dis.readLong();

					this.mygov_operatore_id = dis.readLong();

					this.mygov_ente_tipo_dovuto_id = dis.readLong();

					this.flg_attivo = dis.readBoolean();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_operatore_ente_tipo_dovuto_id);

				// long

				dos.writeLong(this.mygov_operatore_id);

				// long

				dos.writeLong(this.mygov_ente_tipo_dovuto_id);

				// boolean

				dos.writeBoolean(this.flg_attivo);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_operatore_ente_tipo_dovuto_id="
					+ String.valueOf(mygov_operatore_ente_tipo_dovuto_id));
			sb.append(",mygov_operatore_id="
					+ String.valueOf(mygov_operatore_id));
			sb.append(",mygov_ente_tipo_dovuto_id="
					+ String.valueOf(mygov_ente_tipo_dovuto_id));
			sb.append(",flg_attivo=" + String.valueOf(flg_attivo));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tPostgresqlInput_16Struct implements
			routines.system.IPersistableRow<after_tPostgresqlInput_16Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_operatore_ente_tipo_dovuto_id;

		public long getMygov_operatore_ente_tipo_dovuto_id() {
			return this.mygov_operatore_ente_tipo_dovuto_id;
		}

		public long mygov_operatore_id;

		public long getMygov_operatore_id() {
			return this.mygov_operatore_id;
		}

		public long mygov_ente_tipo_dovuto_id;

		public long getMygov_ente_tipo_dovuto_id() {
			return this.mygov_ente_tipo_dovuto_id;
		}

		public boolean flg_attivo;

		public boolean getFlg_attivo() {
			return this.flg_attivo;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ (int) this.mygov_operatore_ente_tipo_dovuto_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tPostgresqlInput_16Struct other = (after_tPostgresqlInput_16Struct) obj;

			if (this.mygov_operatore_ente_tipo_dovuto_id != other.mygov_operatore_ente_tipo_dovuto_id)
				return false;

			return true;
		}

		public void copyDataTo(after_tPostgresqlInput_16Struct other) {

			other.mygov_operatore_ente_tipo_dovuto_id = this.mygov_operatore_ente_tipo_dovuto_id;
			other.mygov_operatore_id = this.mygov_operatore_id;
			other.mygov_ente_tipo_dovuto_id = this.mygov_ente_tipo_dovuto_id;
			other.flg_attivo = this.flg_attivo;

		}

		public void copyKeysDataTo(after_tPostgresqlInput_16Struct other) {

			other.mygov_operatore_ente_tipo_dovuto_id = this.mygov_operatore_ente_tipo_dovuto_id;

		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_operatore_ente_tipo_dovuto_id = dis.readLong();

					this.mygov_operatore_id = dis.readLong();

					this.mygov_ente_tipo_dovuto_id = dis.readLong();

					this.flg_attivo = dis.readBoolean();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_operatore_ente_tipo_dovuto_id);

				// long

				dos.writeLong(this.mygov_operatore_id);

				// long

				dos.writeLong(this.mygov_ente_tipo_dovuto_id);

				// boolean

				dos.writeBoolean(this.flg_attivo);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_operatore_ente_tipo_dovuto_id="
					+ String.valueOf(mygov_operatore_ente_tipo_dovuto_id));
			sb.append(",mygov_operatore_id="
					+ String.valueOf(mygov_operatore_id));
			sb.append(",mygov_ente_tipo_dovuto_id="
					+ String.valueOf(mygov_ente_tipo_dovuto_id));
			sb.append(",flg_attivo=" + String.valueOf(flg_attivo));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tPostgresqlInput_16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(
					this.mygov_operatore_ente_tipo_dovuto_id,
					other.mygov_operatore_ente_tipo_dovuto_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_16Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_24Process(globalMap);
				tPostgresqlInput_23Process(globalMap);
				tPostgresqlInput_22Process(globalMap);

				row20Struct row20 = new row20Struct();
				ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTOStruct ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTO = new ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTOStruct();
				MAPPING_OPERATORE_ENTE_TIPO_DOVUTOStruct MAPPING_OPERATORE_ENTE_TIPO_DOVUTO = new MAPPING_OPERATORE_ENTE_TIPO_DOVUTOStruct();

				/**
				 * [tPostgresqlOutput_8 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_8", false);
				start_Hash.put("tPostgresqlOutput_8",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlOutput_8");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlOutput_8";

				int tos_count_tPostgresqlOutput_8 = 0;

				String dbschema_tPostgresqlOutput_8 = null;
				dbschema_tPostgresqlOutput_8 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_3");

				String tableName_tPostgresqlOutput_8 = null;
				if (dbschema_tPostgresqlOutput_8 == null
						|| dbschema_tPostgresqlOutput_8.trim().length() == 0) {
					tableName_tPostgresqlOutput_8 = "mygov_operatore_ente_tipo_dovuto";
				} else {
					tableName_tPostgresqlOutput_8 = dbschema_tPostgresqlOutput_8
							+ "\".\"" + "mygov_operatore_ente_tipo_dovuto";
				}

				int updateKeyCount_tPostgresqlOutput_8 = 2;
				if (updateKeyCount_tPostgresqlOutput_8 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_8 = 0;
				int nb_line_update_tPostgresqlOutput_8 = 0;
				int nb_line_inserted_tPostgresqlOutput_8 = 0;
				int nb_line_deleted_tPostgresqlOutput_8 = 0;
				int nb_line_rejected_tPostgresqlOutput_8 = 0;

				int deletedCount_tPostgresqlOutput_8 = 0;
				int updatedCount_tPostgresqlOutput_8 = 0;
				int insertedCount_tPostgresqlOutput_8 = 0;
				int rejectedCount_tPostgresqlOutput_8 = 0;

				boolean whetherReject_tPostgresqlOutput_8 = false;

				java.sql.Connection conn_tPostgresqlOutput_8 = null;

				conn_tPostgresqlOutput_8 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_3");

				int batchSize_tPostgresqlOutput_8 = 10000;
				int batchSizeCounter_tPostgresqlOutput_8 = 0;

				int count_tPostgresqlOutput_8 = 0;
				String update_tPostgresqlOutput_8 = "UPDATE \""
						+ tableName_tPostgresqlOutput_8
						+ "\" SET \"flg_attivo\" = ? WHERE \"cod_fed_user_id\" = ? AND \"mygov_ente_tipo_dovuto_id\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_8 = conn_tPostgresqlOutput_8
						.prepareStatement(update_tPostgresqlOutput_8);
				String insert_tPostgresqlOutput_8 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_8
						+ "\" (\""
						+ "mygov_operatore_ente_tipo_dovuto_id"
						+ "\",\"cod_fed_user_id\",\"mygov_ente_tipo_dovuto_id\",\"flg_attivo\") VALUES ("
						+ "nextval('mygov_op_ente_tipo_dovuto_mygov_op_ente_tipo_dovuto_id_seq')"
						+ ",?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_8 = conn_tPostgresqlOutput_8
						.prepareStatement(insert_tPostgresqlOutput_8);

				StringBuffer query_tPostgresqlOutput_8 = null;

				update_tPostgresqlOutput_8 += " ";
				String[] updateSQLSplits_tPostgresqlOutput_8 = update_tPostgresqlOutput_8
						.split("\\?");
				String[] insertSQLSplits_tPostgresqlOutput_8 = insert_tPostgresqlOutput_8
						.split("\\?");

				/**
				 * [tPostgresqlOutput_8 begin ] stop
				 */

				/**
				 * [tMap_9 begin ] start
				 */

				ok_Hash.put("tMap_9", false);
				start_Hash.put("tMap_9", System.currentTimeMillis());

				currentComponent = "tMap_9";

				int tos_count_tMap_9 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ente_tipo_dovutoStruct> tHash_Lookup_ente_tipo_dovuto = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ente_tipo_dovutoStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ente_tipo_dovutoStruct>) globalMap
						.get("tHash_Lookup_ente_tipo_dovuto"));

				ente_tipo_dovutoStruct ente_tipo_dovutoHashKey = new ente_tipo_dovutoStruct();
				ente_tipo_dovutoStruct ente_tipo_dovutoDefault = new ente_tipo_dovutoStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_9__Struct {
				}
				Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				MAPPING_OPERATORE_ENTE_TIPO_DOVUTOStruct MAPPING_OPERATORE_ENTE_TIPO_DOVUTO_tmp = new MAPPING_OPERATORE_ENTE_TIPO_DOVUTOStruct();
				// ###############################

				/**
				 * [tMap_9 begin ] stop
				 */

				/**
				 * [tMap_8 begin ] start
				 */

				ok_Hash.put("tMap_8", false);
				start_Hash.put("tMap_8", System.currentTimeMillis());

				currentComponent = "tMap_8";

				int tos_count_tMap_8 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct> tHash_Lookup_row29 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct>) globalMap
						.get("tHash_Lookup_row29"));

				row29Struct row29HashKey = new row29Struct();
				row29Struct row29Default = new row29Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<pa_ente_tipo_dovutoStruct> tHash_Lookup_pa_ente_tipo_dovuto = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<pa_ente_tipo_dovutoStruct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<pa_ente_tipo_dovutoStruct>) globalMap
						.get("tHash_Lookup_pa_ente_tipo_dovuto"));

				pa_ente_tipo_dovutoStruct pa_ente_tipo_dovutoHashKey = new pa_ente_tipo_dovutoStruct();
				pa_ente_tipo_dovutoStruct pa_ente_tipo_dovutoDefault = new pa_ente_tipo_dovutoStruct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_8__Struct {
				}
				Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTOStruct ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTO_tmp = new ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTOStruct();
				// ###############################

				/**
				 * [tMap_8 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_16 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_16", false);
				start_Hash.put("tPostgresqlInput_16",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_16");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_16";

				int tos_count_tPostgresqlInput_16 = 0;

				int nb_line_tPostgresqlInput_16 = 0;
				java.sql.Connection conn_tPostgresqlInput_16 = null;
				conn_tPostgresqlInput_16 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_16 = conn_tPostgresqlInput_16
						.createStatement();

				String dbquery_tPostgresqlInput_16 = "SELECT \n  \"mygov_operatore_ente_tipo_dovuto\".\"mygov_operatore_ente_tipo_dovuto_id\", \n  \"mygov_operatore_ente_tipo_dovuto\".\"mygov_operatore_id\", \n  \"mygov_operatore_ente_tipo_dovuto\".\"mygov_ente_tipo_dovuto_id\", \n  \"mygov_operatore_ente_tipo_dovuto\".\"flg_attivo\"\nFROM \"mygov_operatore_ente_tipo_dovuto\"";

				globalMap.put("tPostgresqlInput_16_QUERY",
						dbquery_tPostgresqlInput_16);
				java.sql.ResultSet rs_tPostgresqlInput_16 = null;
				try {
					rs_tPostgresqlInput_16 = stmt_tPostgresqlInput_16
							.executeQuery(dbquery_tPostgresqlInput_16);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_16 = rs_tPostgresqlInput_16
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_16 = rsmd_tPostgresqlInput_16
							.getColumnCount();

					String tmpContent_tPostgresqlInput_16 = null;

					while (rs_tPostgresqlInput_16.next()) {
						nb_line_tPostgresqlInput_16++;

						if (colQtyInRs_tPostgresqlInput_16 < 1) {
							row20.mygov_operatore_ente_tipo_dovuto_id = 0;
						} else {

							if (rs_tPostgresqlInput_16.getObject(1) != null) {
								row20.mygov_operatore_ente_tipo_dovuto_id = rs_tPostgresqlInput_16
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_16 < 2) {
							row20.mygov_operatore_id = 0;
						} else {

							if (rs_tPostgresqlInput_16.getObject(2) != null) {
								row20.mygov_operatore_id = rs_tPostgresqlInput_16
										.getLong(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_16 < 3) {
							row20.mygov_ente_tipo_dovuto_id = 0;
						} else {

							if (rs_tPostgresqlInput_16.getObject(3) != null) {
								row20.mygov_ente_tipo_dovuto_id = rs_tPostgresqlInput_16
										.getLong(3);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_16 < 4) {
							row20.flg_attivo = false;
						} else {

							if (rs_tPostgresqlInput_16.getObject(4) != null) {
								row20.flg_attivo = rs_tPostgresqlInput_16
										.getBoolean(4);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tPostgresqlInput_16 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_16 main ] start
						 */

						currentComponent = "tPostgresqlInput_16";

						tos_count_tPostgresqlInput_16++;

						/**
						 * [tPostgresqlInput_16 main ] stop
						 */

						/**
						 * [tMap_8 main ] start
						 */

						currentComponent = "tMap_8";

						boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_8 = false;
						boolean mainRowRejected_tMap_8 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row29"
						// /////////////////////////////////////////////

						boolean forceLooprow29 = false;

						row29Struct row29ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_8) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_8 = false;

							Object exprKeyValue_row29__mygov_operatore_id = row20.mygov_operatore_id;
							if (exprKeyValue_row29__mygov_operatore_id == null) {
								hasCasePrimitiveKeyWithNull_tMap_8 = true;
							} else {
								row29HashKey.mygov_operatore_id = (long) (Long) exprKeyValue_row29__mygov_operatore_id;
							}

							row29HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_8) { // G_TM_M_091

								tHash_Lookup_row29.lookup(row29HashKey);

							} // G_TM_M_091

							if (hasCasePrimitiveKeyWithNull_tMap_8
									|| !tHash_Lookup_row29.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_8 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row29 != null
								&& tHash_Lookup_row29.getCount(row29HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row29' and it contains more one result from keys :  row29.mygov_operatore_id = '"
							// + row29HashKey.mygov_operatore_id + "'");
						} // G 071

						row29Struct row29 = null;

						row29Struct fromLookup_row29 = null;
						row29 = row29Default;

						if (tHash_Lookup_row29 != null
								&& tHash_Lookup_row29.hasNext()) { // G 099

							fromLookup_row29 = tHash_Lookup_row29.next();

						} // G 099

						if (fromLookup_row29 != null) {
							row29 = fromLookup_row29;
						}

						// /////////////////////////////////////////////
						// Starting Lookup Table "pa_ente_tipo_dovuto"
						// /////////////////////////////////////////////

						boolean forceLooppa_ente_tipo_dovuto = false;

						pa_ente_tipo_dovutoStruct pa_ente_tipo_dovutoObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_8) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_8 = false;

							Object exprKeyValue_pa_ente_tipo_dovuto__mygov_ente_tipo_dovuto_id = row20.mygov_ente_tipo_dovuto_id;
							if (exprKeyValue_pa_ente_tipo_dovuto__mygov_ente_tipo_dovuto_id == null) {
								hasCasePrimitiveKeyWithNull_tMap_8 = true;
							} else {
								pa_ente_tipo_dovutoHashKey.mygov_ente_tipo_dovuto_id = (long) (Long) exprKeyValue_pa_ente_tipo_dovuto__mygov_ente_tipo_dovuto_id;
							}

							pa_ente_tipo_dovutoHashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_8) { // G_TM_M_091

								tHash_Lookup_pa_ente_tipo_dovuto
										.lookup(pa_ente_tipo_dovutoHashKey);

							} // G_TM_M_091

							if (hasCasePrimitiveKeyWithNull_tMap_8
									|| !tHash_Lookup_pa_ente_tipo_dovuto
											.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_8 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_pa_ente_tipo_dovuto != null
								&& tHash_Lookup_pa_ente_tipo_dovuto
										.getCount(pa_ente_tipo_dovutoHashKey) > 1) { // G
																						// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'pa_ente_tipo_dovuto' and it contains more one result from keys :  pa_ente_tipo_dovuto.mygov_ente_tipo_dovuto_id = '"
							// +
							// pa_ente_tipo_dovutoHashKey.mygov_ente_tipo_dovuto_id
							// + "'");
						} // G 071

						pa_ente_tipo_dovutoStruct pa_ente_tipo_dovuto = null;

						pa_ente_tipo_dovutoStruct fromLookup_pa_ente_tipo_dovuto = null;
						pa_ente_tipo_dovuto = pa_ente_tipo_dovutoDefault;

						if (tHash_Lookup_pa_ente_tipo_dovuto != null
								&& tHash_Lookup_pa_ente_tipo_dovuto.hasNext()) { // G
																					// 099

							fromLookup_pa_ente_tipo_dovuto = tHash_Lookup_pa_ente_tipo_dovuto
									.next();

						} // G 099

						if (fromLookup_pa_ente_tipo_dovuto != null) {
							pa_ente_tipo_dovuto = fromLookup_pa_ente_tipo_dovuto;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
							// ###############################
							// # Output tables

							ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTO = null;

							if (!rejectedInnerJoin_tMap_8) {

								// # Output table :
								// 'ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTO'
								ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTO_tmp.cod_fed_user_id = row29.cod_fed_user_id;
								ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTO_tmp.cod_ipa_ente = pa_ente_tipo_dovuto.cod_ipa_ente;
								ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTO_tmp.cod_tipo = pa_ente_tipo_dovuto.cod_tipo;
								ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTO_tmp.flg_attivo = row20.flg_attivo;
								ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTO = ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTO_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_8 = false;

						tos_count_tMap_8++;

						/**
						 * [tMap_8 main ] stop
						 */
						// Start of branch
						// "ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTO"
						if (ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTO != null) {

							/**
							 * [tMap_9 main ] start
							 */

							currentComponent = "tMap_9";

							boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_9 = false;
							boolean mainRowRejected_tMap_9 = false;

							// /////////////////////////////////////////////
							// Starting Lookup Table "ente_tipo_dovuto"
							// /////////////////////////////////////////////

							boolean forceLoopente_tipo_dovuto = false;

							ente_tipo_dovutoStruct ente_tipo_dovutoObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_9) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_9 = false;

								ente_tipo_dovutoHashKey.cod_ipa_ente = ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTO.cod_ipa_ente;

								ente_tipo_dovutoHashKey.cod_tipo = ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTO.cod_tipo;

								ente_tipo_dovutoHashKey.hashCodeDirty = true;

								tHash_Lookup_ente_tipo_dovuto
										.lookup(ente_tipo_dovutoHashKey);

								if (!tHash_Lookup_ente_tipo_dovuto.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_9 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							if (tHash_Lookup_ente_tipo_dovuto != null
									&& tHash_Lookup_ente_tipo_dovuto
											.getCount(ente_tipo_dovutoHashKey) > 1) { // G
																						// 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ente_tipo_dovuto' and it contains more one result from keys :  ente_tipo_dovuto.cod_ipa_ente = '"
								// + ente_tipo_dovutoHashKey.cod_ipa_ente +
								// "', ente_tipo_dovuto.cod_tipo = '" +
								// ente_tipo_dovutoHashKey.cod_tipo + "'");
							} // G 071

							ente_tipo_dovutoStruct ente_tipo_dovuto = null;

							ente_tipo_dovutoStruct fromLookup_ente_tipo_dovuto = null;
							ente_tipo_dovuto = ente_tipo_dovutoDefault;

							if (tHash_Lookup_ente_tipo_dovuto != null
									&& tHash_Lookup_ente_tipo_dovuto.hasNext()) { // G
																					// 099

								fromLookup_ente_tipo_dovuto = tHash_Lookup_ente_tipo_dovuto
										.next();

							} // G 099

							if (fromLookup_ente_tipo_dovuto != null) {
								ente_tipo_dovuto = fromLookup_ente_tipo_dovuto;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
								// ###############################
								// # Output tables

								MAPPING_OPERATORE_ENTE_TIPO_DOVUTO = null;

								if (!rejectedInnerJoin_tMap_9) {

									// # Output table :
									// 'MAPPING_OPERATORE_ENTE_TIPO_DOVUTO'
									MAPPING_OPERATORE_ENTE_TIPO_DOVUTO_tmp.mygov_operatore_ente_tipo_dovuto_id = 0;
									MAPPING_OPERATORE_ENTE_TIPO_DOVUTO_tmp.cod_fed_user_id = ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTO.cod_fed_user_id;
									MAPPING_OPERATORE_ENTE_TIPO_DOVUTO_tmp.mygov_ente_tipo_dovuto_id = ente_tipo_dovuto.mygov_ente_tipo_dovuto_id;
									MAPPING_OPERATORE_ENTE_TIPO_DOVUTO_tmp.flg_attivo = ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTO.flg_attivo;
									MAPPING_OPERATORE_ENTE_TIPO_DOVUTO = MAPPING_OPERATORE_ENTE_TIPO_DOVUTO_tmp;
								} // closing inner join bracket (2)
									// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_9 = false;

							tos_count_tMap_9++;

							/**
							 * [tMap_9 main ] stop
							 */
							// Start of branch
							// "MAPPING_OPERATORE_ENTE_TIPO_DOVUTO"
							if (MAPPING_OPERATORE_ENTE_TIPO_DOVUTO != null) {

								/**
								 * [tPostgresqlOutput_8 main ] start
								 */

								currentComponent = "tPostgresqlOutput_8";

								query_tPostgresqlOutput_8 = new StringBuffer("");
								whetherReject_tPostgresqlOutput_8 = false;
								int updateFlag_tPostgresqlOutput_8 = 0;
								pstmtUpdate_tPostgresqlOutput_8
										.setBoolean(
												1,
												MAPPING_OPERATORE_ENTE_TIPO_DOVUTO.flg_attivo);

								query_tPostgresqlOutput_8 = query_tPostgresqlOutput_8
										.append(updateSQLSplits_tPostgresqlOutput_8[0])
										.append(String
												.valueOf(MAPPING_OPERATORE_ENTE_TIPO_DOVUTO.flg_attivo))
										.append(updateSQLSplits_tPostgresqlOutput_8[1]);

								if (MAPPING_OPERATORE_ENTE_TIPO_DOVUTO.cod_fed_user_id == null) {
									pstmtUpdate_tPostgresqlOutput_8.setNull(
											2 + count_tPostgresqlOutput_8,
											java.sql.Types.VARCHAR);
								} else {
									pstmtUpdate_tPostgresqlOutput_8
											.setString(
													2 + count_tPostgresqlOutput_8,
													MAPPING_OPERATORE_ENTE_TIPO_DOVUTO.cod_fed_user_id);
								}

								query_tPostgresqlOutput_8 = query_tPostgresqlOutput_8
										.append(MAPPING_OPERATORE_ENTE_TIPO_DOVUTO.cod_fed_user_id == null ? "null"
												: "'"
														+ MAPPING_OPERATORE_ENTE_TIPO_DOVUTO.cod_fed_user_id
														+ "'")
										.append(updateSQLSplits_tPostgresqlOutput_8[2]);

								if (MAPPING_OPERATORE_ENTE_TIPO_DOVUTO.mygov_ente_tipo_dovuto_id == null) {
									pstmtUpdate_tPostgresqlOutput_8.setNull(
											3 + count_tPostgresqlOutput_8,
											java.sql.Types.INTEGER);
								} else {
									pstmtUpdate_tPostgresqlOutput_8
											.setLong(
													3 + count_tPostgresqlOutput_8,
													MAPPING_OPERATORE_ENTE_TIPO_DOVUTO.mygov_ente_tipo_dovuto_id);
								}

								query_tPostgresqlOutput_8 = query_tPostgresqlOutput_8
										.append(MAPPING_OPERATORE_ENTE_TIPO_DOVUTO.mygov_ente_tipo_dovuto_id == null ? "null"
												: String.valueOf(MAPPING_OPERATORE_ENTE_TIPO_DOVUTO.mygov_ente_tipo_dovuto_id))
										.append(updateSQLSplits_tPostgresqlOutput_8[3]);

								globalMap.put("tPostgresqlOutput_8_QUERY",
										query_tPostgresqlOutput_8.toString()
												.trim());

								try {

									updateFlag_tPostgresqlOutput_8 = pstmtUpdate_tPostgresqlOutput_8
											.executeUpdate();
									updatedCount_tPostgresqlOutput_8 = updatedCount_tPostgresqlOutput_8
											+ updateFlag_tPostgresqlOutput_8;

									if (updateFlag_tPostgresqlOutput_8 == 0) {

										query_tPostgresqlOutput_8 = new StringBuffer(
												"");

										if (MAPPING_OPERATORE_ENTE_TIPO_DOVUTO.cod_fed_user_id == null) {
											pstmtInsert_tPostgresqlOutput_8
													.setNull(
															1,
															java.sql.Types.VARCHAR);
										} else {
											pstmtInsert_tPostgresqlOutput_8
													.setString(
															1,
															MAPPING_OPERATORE_ENTE_TIPO_DOVUTO.cod_fed_user_id);
										}

										query_tPostgresqlOutput_8 = query_tPostgresqlOutput_8
												.append(insertSQLSplits_tPostgresqlOutput_8[0])
												.append(MAPPING_OPERATORE_ENTE_TIPO_DOVUTO.cod_fed_user_id == null ? "null"
														: "'"
																+ MAPPING_OPERATORE_ENTE_TIPO_DOVUTO.cod_fed_user_id
																+ "'")
												.append(insertSQLSplits_tPostgresqlOutput_8[1]);
										if (MAPPING_OPERATORE_ENTE_TIPO_DOVUTO.mygov_ente_tipo_dovuto_id == null) {
											pstmtInsert_tPostgresqlOutput_8
													.setNull(
															2,
															java.sql.Types.INTEGER);
										} else {
											pstmtInsert_tPostgresqlOutput_8
													.setLong(
															2,
															MAPPING_OPERATORE_ENTE_TIPO_DOVUTO.mygov_ente_tipo_dovuto_id);
										}

										query_tPostgresqlOutput_8 = query_tPostgresqlOutput_8
												.append(MAPPING_OPERATORE_ENTE_TIPO_DOVUTO.mygov_ente_tipo_dovuto_id == null ? "null"
														: String.valueOf(MAPPING_OPERATORE_ENTE_TIPO_DOVUTO.mygov_ente_tipo_dovuto_id))
												.append(insertSQLSplits_tPostgresqlOutput_8[2]);
										pstmtInsert_tPostgresqlOutput_8
												.setBoolean(
														3,
														MAPPING_OPERATORE_ENTE_TIPO_DOVUTO.flg_attivo);

										query_tPostgresqlOutput_8 = query_tPostgresqlOutput_8
												.append(String
														.valueOf(MAPPING_OPERATORE_ENTE_TIPO_DOVUTO.flg_attivo))
												.append(insertSQLSplits_tPostgresqlOutput_8[3]);
										globalMap.put(
												"tPostgresqlOutput_8_QUERY",
												query_tPostgresqlOutput_8
														.toString().trim());

										insertedCount_tPostgresqlOutput_8 = insertedCount_tPostgresqlOutput_8
												+ pstmtInsert_tPostgresqlOutput_8
														.executeUpdate();
										nb_line_tPostgresqlOutput_8++;

									} else {
										nb_line_tPostgresqlOutput_8++;

									}
								} catch (java.lang.Exception e) {

									whetherReject_tPostgresqlOutput_8 = true;
									throw (e);
								}
								if (batchSize_tPostgresqlOutput_8 <= batchSizeCounter_tPostgresqlOutput_8) {

								}

								tos_count_tPostgresqlOutput_8++;

								/**
								 * [tPostgresqlOutput_8 main ] stop
								 */

							} // End of branch
								// "MAPPING_OPERATORE_ENTE_TIPO_DOVUTO"

						} // End of branch
							// "ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTO"

						/**
						 * [tPostgresqlInput_16 end ] start
						 */

						currentComponent = "tPostgresqlInput_16";

					}
				} finally {
					stmt_tPostgresqlInput_16.close();

				}
				globalMap.put("tPostgresqlInput_16_NB_LINE",
						nb_line_tPostgresqlInput_16);

				ok_Hash.put("tPostgresqlInput_16", true);
				end_Hash.put("tPostgresqlInput_16", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_16",
						end_Hash.get("tPostgresqlInput_16")
								- start_Hash.get("tPostgresqlInput_16"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_16 end ] stop
				 */

				/**
				 * [tMap_8 end ] start
				 */

				currentComponent = "tMap_8";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row29 != null) {
					tHash_Lookup_row29.endGet();
				}
				globalMap.remove("tHash_Lookup_row29");

				if (tHash_Lookup_pa_ente_tipo_dovuto != null) {
					tHash_Lookup_pa_ente_tipo_dovuto.endGet();
				}
				globalMap.remove("tHash_Lookup_pa_ente_tipo_dovuto");

				// ###############################

				ok_Hash.put("tMap_8", true);
				end_Hash.put("tMap_8", System.currentTimeMillis());

				/**
				 * [tMap_8 end ] stop
				 */

				/**
				 * [tMap_9 end ] start
				 */

				currentComponent = "tMap_9";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_ente_tipo_dovuto != null) {
					tHash_Lookup_ente_tipo_dovuto.endGet();
				}
				globalMap.remove("tHash_Lookup_ente_tipo_dovuto");

				// ###############################

				ok_Hash.put("tMap_9", true);
				end_Hash.put("tMap_9", System.currentTimeMillis());

				/**
				 * [tMap_9 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_8 end ] start
				 */

				currentComponent = "tPostgresqlOutput_8";

				if (pstmtUpdate_tPostgresqlOutput_8 != null) {

					pstmtUpdate_tPostgresqlOutput_8.close();

				}
				if (pstmtInsert_tPostgresqlOutput_8 != null) {

					pstmtInsert_tPostgresqlOutput_8.close();

				}

				nb_line_deleted_tPostgresqlOutput_8 = nb_line_deleted_tPostgresqlOutput_8
						+ deletedCount_tPostgresqlOutput_8;
				nb_line_update_tPostgresqlOutput_8 = nb_line_update_tPostgresqlOutput_8
						+ updatedCount_tPostgresqlOutput_8;
				nb_line_inserted_tPostgresqlOutput_8 = nb_line_inserted_tPostgresqlOutput_8
						+ insertedCount_tPostgresqlOutput_8;
				nb_line_rejected_tPostgresqlOutput_8 = nb_line_rejected_tPostgresqlOutput_8
						+ rejectedCount_tPostgresqlOutput_8;

				globalMap.put("tPostgresqlOutput_8_NB_LINE",
						nb_line_tPostgresqlOutput_8);
				globalMap.put("tPostgresqlOutput_8_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_8);
				globalMap.put("tPostgresqlOutput_8_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_8);
				globalMap.put("tPostgresqlOutput_8_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_8);
				globalMap.put("tPostgresqlOutput_8_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_8);

				ok_Hash.put("tPostgresqlOutput_8", true);
				end_Hash.put("tPostgresqlOutput_8", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlOutput_8",
						end_Hash.get("tPostgresqlOutput_8")
								- start_Hash.get("tPostgresqlOutput_8"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlOutput_8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_9"
			globalMap.remove("tHash_Lookup_ente_tipo_dovuto");

			// free memory for "tMap_8"
			globalMap.remove("tHash_Lookup_row29");

			// free memory for "tMap_8"
			globalMap.remove("tHash_Lookup_pa_ente_tipo_dovuto");

			try {

				/**
				 * [tPostgresqlInput_16 finally ] start
				 */

				currentComponent = "tPostgresqlInput_16";

				/**
				 * [tPostgresqlInput_16 finally ] stop
				 */

				/**
				 * [tMap_8 finally ] start
				 */

				currentComponent = "tMap_8";

				/**
				 * [tMap_8 finally ] stop
				 */

				/**
				 * [tMap_9 finally ] start
				 */

				currentComponent = "tMap_9";

				/**
				 * [tMap_9 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_8 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_8";

				/**
				 * [tPostgresqlOutput_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_16_SUBPROCESS_STATE", 1);
	}

	public void tJava_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_9 begin ] start
				 */

				ok_Hash.put("tJava_9", false);
				start_Hash.put("tJava_9", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_9");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_9";

				int tos_count_tJava_9 = 0;

				if ("failure".equalsIgnoreCase(status)) {
					globalMap.put("errorAllinea", true);
				}

				/**
				 * [tJava_9 begin ] stop
				 */

				/**
				 * [tJava_9 main ] start
				 */

				currentComponent = "tJava_9";

				tos_count_tJava_9++;

				/**
				 * [tJava_9 main ] stop
				 */

				/**
				 * [tJava_9 end ] start
				 */

				currentComponent = "tJava_9";

				ok_Hash.put("tJava_9", true);
				end_Hash.put("tJava_9", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_9",
						end_Hash.get("tJava_9") - start_Hash.get("tJava_9"));
				tStatCatcher_1Process(globalMap);
				if (!(Boolean) globalMap.get("errorAllinea")) {

					tPostgresqlCommit_2Process(globalMap);
				}

				if ((Boolean) globalMap.get("errorAllinea")) {

					tPostgresqlRollback_2Process(globalMap);
				}

				if (!(Boolean) globalMap.get("errorAllinea")) {

					tPostgresqlCommit_1Process(globalMap);
				}

				if ((Boolean) globalMap.get("errorAllinea")) {

					tPostgresqlRollback_1Process(globalMap);
				}

				/**
				 * [tJava_9 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_9 finally ] start
				 */

				currentComponent = "tJava_9";

				/**
				 * [tJava_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlCommit_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlCommit_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlCommit_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlCommit_2", false);
				start_Hash.put("tPostgresqlCommit_2",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlCommit_2");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlCommit_2";

				int tos_count_tPostgresqlCommit_2 = 0;

				/**
				 * [tPostgresqlCommit_2 begin ] stop
				 */

				/**
				 * [tPostgresqlCommit_2 main ] start
				 */

				currentComponent = "tPostgresqlCommit_2";

				java.sql.Connection conn_tPostgresqlCommit_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");
				if (conn_tPostgresqlCommit_2 != null
						&& !conn_tPostgresqlCommit_2.isClosed()) {
					try {

						conn_tPostgresqlCommit_2.commit();

					} finally {

						conn_tPostgresqlCommit_2.close();

					}
				}

				tos_count_tPostgresqlCommit_2++;

				/**
				 * [tPostgresqlCommit_2 main ] stop
				 */

				/**
				 * [tPostgresqlCommit_2 end ] start
				 */

				currentComponent = "tPostgresqlCommit_2";

				ok_Hash.put("tPostgresqlCommit_2", true);
				end_Hash.put("tPostgresqlCommit_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlCommit_2",
						end_Hash.get("tPostgresqlCommit_2")
								- start_Hash.get("tPostgresqlCommit_2"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlCommit_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlCommit_2 finally ] start
				 */

				currentComponent = "tPostgresqlCommit_2";

				/**
				 * [tPostgresqlCommit_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlCommit_2_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlRollback_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlRollback_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlRollback_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlRollback_2", false);
				start_Hash.put("tPostgresqlRollback_2",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlRollback_2");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlRollback_2";

				int tos_count_tPostgresqlRollback_2 = 0;

				/**
				 * [tPostgresqlRollback_2 begin ] stop
				 */

				/**
				 * [tPostgresqlRollback_2 main ] start
				 */

				currentComponent = "tPostgresqlRollback_2";

				java.sql.Connection conn_tPostgresqlRollback_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");

				if (conn_tPostgresqlRollback_2 != null
						&& !conn_tPostgresqlRollback_2.isClosed()) {

					try {

						conn_tPostgresqlRollback_2.rollback();

					} finally {

						conn_tPostgresqlRollback_2.close();

					}

				}

				tos_count_tPostgresqlRollback_2++;

				/**
				 * [tPostgresqlRollback_2 main ] stop
				 */

				/**
				 * [tPostgresqlRollback_2 end ] start
				 */

				currentComponent = "tPostgresqlRollback_2";

				ok_Hash.put("tPostgresqlRollback_2", true);
				end_Hash.put("tPostgresqlRollback_2",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlRollback_2",
						end_Hash.get("tPostgresqlRollback_2")
								- start_Hash.get("tPostgresqlRollback_2"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlRollback_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlRollback_2 finally ] start
				 */

				currentComponent = "tPostgresqlRollback_2";

				/**
				 * [tPostgresqlRollback_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlRollback_2_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlCommit_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlCommit_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlCommit_1", false);
				start_Hash.put("tPostgresqlCommit_1",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlCommit_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlCommit_1";

				int tos_count_tPostgresqlCommit_1 = 0;

				/**
				 * [tPostgresqlCommit_1 begin ] stop
				 */

				/**
				 * [tPostgresqlCommit_1 main ] start
				 */

				currentComponent = "tPostgresqlCommit_1";

				java.sql.Connection conn_tPostgresqlCommit_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_3");
				if (conn_tPostgresqlCommit_1 != null
						&& !conn_tPostgresqlCommit_1.isClosed()) {
					try {

						conn_tPostgresqlCommit_1.commit();

					} finally {

						conn_tPostgresqlCommit_1.close();

					}
				}

				tos_count_tPostgresqlCommit_1++;

				/**
				 * [tPostgresqlCommit_1 main ] stop
				 */

				/**
				 * [tPostgresqlCommit_1 end ] start
				 */

				currentComponent = "tPostgresqlCommit_1";

				ok_Hash.put("tPostgresqlCommit_1", true);
				end_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlCommit_1",
						end_Hash.get("tPostgresqlCommit_1")
								- start_Hash.get("tPostgresqlCommit_1"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlCommit_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlCommit_1 finally ] start
				 */

				currentComponent = "tPostgresqlCommit_1";

				/**
				 * [tPostgresqlCommit_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlRollback_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlRollback_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlRollback_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlRollback_1", false);
				start_Hash.put("tPostgresqlRollback_1",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlRollback_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlRollback_1";

				int tos_count_tPostgresqlRollback_1 = 0;

				/**
				 * [tPostgresqlRollback_1 begin ] stop
				 */

				/**
				 * [tPostgresqlRollback_1 main ] start
				 */

				currentComponent = "tPostgresqlRollback_1";

				java.sql.Connection conn_tPostgresqlRollback_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_3");

				if (conn_tPostgresqlRollback_1 != null
						&& !conn_tPostgresqlRollback_1.isClosed()) {

					try {

						conn_tPostgresqlRollback_1.rollback();

					} finally {

						conn_tPostgresqlRollback_1.close();

					}

				}

				tos_count_tPostgresqlRollback_1++;

				/**
				 * [tPostgresqlRollback_1 main ] stop
				 */

				/**
				 * [tPostgresqlRollback_1 end ] start
				 */

				currentComponent = "tPostgresqlRollback_1";

				ok_Hash.put("tPostgresqlRollback_1", true);
				end_Hash.put("tPostgresqlRollback_1",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlRollback_1",
						end_Hash.get("tPostgresqlRollback_1")
								- start_Hash.get("tPostgresqlRollback_1"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlRollback_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlRollback_1 finally ] start
				 */

				currentComponent = "tPostgresqlRollback_1";

				/**
				 * [tPostgresqlRollback_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlRollback_1_SUBPROCESS_STATE", 1);
	}

	public static class LOG_STATStruct implements
			routines.system.IPersistableRow<LOG_STATStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

					this.priority = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

				// Integer

				writeInteger(this.priority, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append(",priority=" + String.valueOf(priority));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(LOG_STATStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				LOG_STATStruct LOG_STAT = new LOG_STATStruct();

				/**
				 * [tLog4JCatch_1 begin ] start
				 */

				ok_Hash.put("tLog4JCatch_1", false);
				start_Hash.put("tLog4JCatch_1", System.currentTimeMillis());

				currentComponent = "tLog4JCatch_1";

				int tos_count_tLog4JCatch_1 = 0;

				org.apache.log4j.Logger logger_tLog4JCatch_1 = org.apache.log4j.Logger
						.getLogger(this.getClass());
				int nb_line_tLog4JCatch_1 = 0;

				/**
				 * [tLog4JCatch_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				LOG_STATStruct LOG_STAT_tmp = new LOG_STATStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1
						.getMessages()) {
					row4.pid = pid;
					row4.root_pid = rootPid;
					row4.father_pid = fatherPid;
					row4.project = projectName;
					row4.job = jobName;
					row4.context = contextStr;
					row4.origin = (scm.getOrigin() == null
							|| scm.getOrigin().length() < 1 ? null : scm
							.getOrigin());
					row4.message = scm.getMessage();
					row4.duration = scm.getDuration();
					row4.moment = scm.getMoment();
					row4.message_type = scm.getMessageType();
					row4.job_version = scm.getJobVersion();
					row4.job_repository_id = scm.getJobId();
					row4.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
						// ###############################
						// # Output tables

						LOG_STAT = null;

						// # Output table : 'LOG_STAT'
						LOG_STAT_tmp.moment = row4.moment;
						LOG_STAT_tmp.pid = row4.pid;
						LOG_STAT_tmp.father_pid = row4.father_pid;
						LOG_STAT_tmp.root_pid = row4.root_pid;
						LOG_STAT_tmp.system_pid = row4.system_pid;
						LOG_STAT_tmp.project = row4.project;
						LOG_STAT_tmp.job = row4.job;
						LOG_STAT_tmp.job_repository_id = row4.job_repository_id;
						LOG_STAT_tmp.job_version = row4.job_version;
						LOG_STAT_tmp.context = row4.context;
						LOG_STAT_tmp.origin = row4.origin;
						LOG_STAT_tmp.message_type = row4.message_type;
						LOG_STAT_tmp.message = row4.message;
						LOG_STAT_tmp.duration = row4.duration;
						LOG_STAT_tmp.priority = 3;
						LOG_STAT = LOG_STAT_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */
					// Start of branch "LOG_STAT"
					if (LOG_STAT != null) {

						/**
						 * [tLog4JCatch_1 main ] start
						 */

						currentComponent = "tLog4JCatch_1";

						switch (LOG_STAT.priority) {
						case 1:
							logger_tLog4JCatch_1.trace(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 2:
							logger_tLog4JCatch_1.debug(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 3:
							logger_tLog4JCatch_1.info(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 4:
							logger_tLog4JCatch_1.warn(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 5:
							logger_tLog4JCatch_1.error(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 6:
							logger_tLog4JCatch_1.fatal(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						default:
							logger_tLog4JCatch_1.warn(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						}

						nb_line_tLog4JCatch_1++;

						tos_count_tLog4JCatch_1++;

						/**
						 * [tLog4JCatch_1 main ] stop
						 */

					} // End of branch "LOG_STAT"

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tLog4JCatch_1 end ] start
				 */

				currentComponent = "tLog4JCatch_1";

				globalMap.put("tLog4JCatch_1_NB_LINE", nb_line_tLog4JCatch_1);

				ok_Hash.put("tLog4JCatch_1", true);
				end_Hash.put("tLog4JCatch_1", System.currentTimeMillis());

				/**
				 * [tLog4JCatch_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tLog4JCatch_1 finally ] start
				 */

				currentComponent = "tLog4JCatch_1";

				/**
				 * [tLog4JCatch_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class LOG_JOBStruct implements
			routines.system.IPersistableRow<LOG_JOBStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(LOG_JOBStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				LOG_JOBStruct LOG_JOB = new LOG_JOBStruct();

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tRunJob_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					LOG_JOB.type = lcm.getType();
					LOG_JOB.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					LOG_JOB.priority = lcm.getPriority();
					LOG_JOB.message = lcm.getMessage();
					LOG_JOB.code = lcm.getCode();

					LOG_JOB.moment = java.util.Calendar.getInstance().getTime();

					LOG_JOB.pid = pid;
					LOG_JOB.root_pid = rootPid;
					LOG_JOB.father_pid = fatherPid;

					LOG_JOB.project = projectName;
					LOG_JOB.job = jobName;
					LOG_JOB.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */

					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tRunJob_1 main ] start
					 */

					currentComponent = "tRunJob_1";

					java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

					paraList_tRunJob_1.add("--father_pid=" + pid);

					paraList_tRunJob_1.add("--root_pid=" + rootPid);

					paraList_tRunJob_1.add("--father_node=tRunJob_1");

					paraList_tRunJob_1.add("--context=Default");

					// for feature:10589

					paraList_tRunJob_1.add("--stat_port=" + portStats);

					if (resuming_logs_dir_path != null) {
						paraList_tRunJob_1.add("--resuming_logs_dir_path="
								+ resuming_logs_dir_path);
					}
					String childResumePath_tRunJob_1 = ResumeUtil
							.getChildJobCheckPointPath(resuming_checkpoint_path);
					String tRunJobName_tRunJob_1 = ResumeUtil
							.getRighttRunJob(resuming_checkpoint_path);
					if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
							&& childResumePath_tRunJob_1 != null) {
						paraList_tRunJob_1
								.add("--resuming_checkpoint_path="
										+ ResumeUtil
												.getChildJobCheckPointPath(resuming_checkpoint_path));
					}
					paraList_tRunJob_1.add("--parent_part_launcher=JOB:"
							+ jobName + "/NODE:tRunJob_1");

					java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

					context.synchronizeContext();
					java.util.Enumeration<?> propertyNames_tRunJob_1 = context
							.propertyNames();
					while (propertyNames_tRunJob_1.hasMoreElements()) {
						String key_tRunJob_1 = (String) propertyNames_tRunJob_1
								.nextElement();
						Object value_tRunJob_1 = (Object) context
								.get(key_tRunJob_1);
						paraList_tRunJob_1.add("--context_param "
								+ key_tRunJob_1 + "=" + value_tRunJob_1);
					}

					parentContextMap_tRunJob_1.put("conn_db_900_6",
							context.conn_db_900_6);

					parentContextMap_tRunJob_1.put("conn_host_900_6",
							context.conn_host_900_6);

					parentContextMap_tRunJob_1.put("conn_port_900_6",
							context.conn_port_900_6);

					parentContextMap_tRunJob_1.put("conn_psw_900_6",
							context.conn_psw_900_6);

					parentContextMap_tRunJob_1.put("conn_schema_900_6",
							context.conn_schema_900_6);

					parentContextMap_tRunJob_1.put("conn_usr_900_6",
							context.conn_usr_900_6);

					parentContextMap_tRunJob_1.put("conn_db_E45_1",
							context.conn_db_E45_1);

					parentContextMap_tRunJob_1.put("conn_host_E45_1",
							context.conn_host_E45_1);

					parentContextMap_tRunJob_1.put("conn_port_E45_1",
							context.conn_port_E45_1);

					parentContextMap_tRunJob_1.put("conn_psw_E45_1",
							context.conn_psw_E45_1);

					parentContextMap_tRunJob_1.put("conn_schema_E45_1",
							context.conn_schema_E45_1);

					parentContextMap_tRunJob_1.put("conn_usr_E45_1",
							context.conn_usr_E45_1);

					parentContextMap_tRunJob_1.put("conn_db_E45_2",
							context.conn_db_E45_2);

					parentContextMap_tRunJob_1.put("conn_host_E45_2",
							context.conn_host_E45_2);

					parentContextMap_tRunJob_1.put("conn_port_E45_2",
							context.conn_port_E45_2);

					parentContextMap_tRunJob_1.put("conn_psw_E45_2",
							context.conn_psw_E45_2);

					parentContextMap_tRunJob_1.put("conn_schema_E45_2",
							context.conn_schema_E45_2);

					parentContextMap_tRunJob_1.put("conn_usr_E45_2",
							context.conn_usr_E45_2);

					parentContextMap_tRunJob_1.put("conn_db_E45_4",
							context.conn_db_E45_4);

					parentContextMap_tRunJob_1.put("conn_host_E45_4",
							context.conn_host_E45_4);

					parentContextMap_tRunJob_1.put("conn_port_E45_4",
							context.conn_port_E45_4);

					parentContextMap_tRunJob_1.put("conn_psw_E45_4",
							context.conn_psw_E45_4);

					parentContextMap_tRunJob_1.put("conn_schema_E45_4",
							context.conn_schema_E45_4);

					parentContextMap_tRunJob_1.put("conn_usr_E45_4",
							context.conn_usr_E45_4);

					parentContextMap_tRunJob_1
							.put("ambiente", context.ambiente);

					parentContextMap_tRunJob_1.put("directory_talend",
							context.directory_talend);

					parentContextMap_tRunJob_1.put("numero_minuti_avviso",
							context.numero_minuti_avviso);

					parentContextMap_tRunJob_1.put("numero_ore_trigger_batch",
							context.numero_ore_trigger_batch);

					Object obj_tRunJob_1 = null;

					obj_tRunJob_1 = "2";
					paraList_tRunJob_1
							.add("--context_param codice="
									+ RuntimeUtils
											.tRunJobConvertContext(obj_tRunJob_1));
					parentContextMap_tRunJob_1.put("codice", obj_tRunJob_1);

					obj_tRunJob_1 = LOG_JOB.message;
					paraList_tRunJob_1
							.add("--context_param descrizione="
									+ RuntimeUtils
											.tRunJobConvertContext(obj_tRunJob_1));
					parentContextMap_tRunJob_1
							.put("descrizione", obj_tRunJob_1);

					obj_tRunJob_1 = this.exception;
					paraList_tRunJob_1
							.add("--context_param exception="
									+ RuntimeUtils
											.tRunJobConvertContext(obj_tRunJob_1));
					parentContextMap_tRunJob_1.put("exception", obj_tRunJob_1);

					allinea_database.manage_log_0_1.Manage_Log childJob_tRunJob_1 = new allinea_database.manage_log_0_1.Manage_Log();
					// pass DataSources
					java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (null != talendDataSources_tRunJob_1) {
						java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
						for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
								.entrySet()) {
							dataSources_tRunJob_1.put(
									talendDataSourceEntry_tRunJob_1.getKey(),
									talendDataSourceEntry_tRunJob_1.getValue()
											.getRawDataSource());
						}
						childJob_tRunJob_1
								.setDataSources(dataSources_tRunJob_1);
					}

					childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

					String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
							.runJob((String[]) paraList_tRunJob_1
									.toArray(new String[paraList_tRunJob_1
											.size()]));

					errorCode = childJob_tRunJob_1.getErrorCode();

					if (childJob_tRunJob_1.getErrorCode() == null) {
						globalMap.put(
								"tRunJob_1_CHILD_RETURN_CODE",
								childJob_tRunJob_1.getStatus() != null
										&& ("failure")
												.equals(childJob_tRunJob_1
														.getStatus()) ? 1 : 0);
					} else {
						globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
								childJob_tRunJob_1.getErrorCode());
					}
					if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
						globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
								childJob_tRunJob_1.getExceptionStackTrace());
					}

					tos_count_tRunJob_1++;

					/**
					 * [tRunJob_1 main ] stop
					 */

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				tJava_14Process(globalMap);

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				tStatCatcher_1
						.addMessage(
								"end",
								"tRunJob_1",
								end_Hash.get("tRunJob_1")
										- start_Hash.get("tRunJob_1"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tRunJob_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_14Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_14 begin ] start
				 */

				ok_Hash.put("tJava_14", false);
				start_Hash.put("tJava_14", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_14");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_14";

				int tos_count_tJava_14 = 0;

				globalMap.put("errorAllinea", true);

				/**
				 * [tJava_14 begin ] stop
				 */

				/**
				 * [tJava_14 main ] start
				 */

				currentComponent = "tJava_14";

				tos_count_tJava_14++;

				/**
				 * [tJava_14 main ] stop
				 */

				/**
				 * [tJava_14 end ] start
				 */

				currentComponent = "tJava_14";

				ok_Hash.put("tJava_14", true);
				end_Hash.put("tJava_14", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_14",
						end_Hash.get("tJava_14") - start_Hash.get("tJava_14"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tJava_14 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_14 finally ] start
				 */

				currentComponent = "tJava_14";

				/**
				 * [tJava_14 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_14_SUBPROCESS_STATE", 1);
	}

	public static class row17Struct implements
			routines.system.IPersistableComparableLookupRow<row17Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_ente_id;

		public long getMygov_ente_id() {
			return this.mygov_ente_id;
		}

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		public String codice_fiscale_ente;

		public String getCodice_fiscale_ente() {
			return this.codice_fiscale_ente;
		}

		public String de_nome_ente;

		public String getDe_nome_ente() {
			return this.de_nome_ente;
		}

		public String email_amministratore;

		public String getEmail_amministratore() {
			return this.email_amministratore;
		}

		public java.util.Date dt_creazione;

		public java.util.Date getDt_creazione() {
			return this.dt_creazione;
		}

		public java.util.Date dt_ultima_modifica;

		public java.util.Date getDt_ultima_modifica() {
			return this.dt_ultima_modifica;
		}

		public String cod_rp_dati_vers_tipo_versamento;

		public String getCod_rp_dati_vers_tipo_versamento() {
			return this.cod_rp_dati_vers_tipo_versamento;
		}

		public Double num_rp_dati_vers_dati_sing_vers_commissione_carico_pa;

		public Double getNum_rp_dati_vers_dati_sing_vers_commissione_carico_pa() {
			return this.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa;
		}

		public String cod_rp_dati_vers_dati_sing_vers_iban_accredito;

		public String getCod_rp_dati_vers_dati_sing_vers_iban_accredito() {
			return this.cod_rp_dati_vers_dati_sing_vers_iban_accredito;
		}

		public String cod_rp_dati_vers_dati_sing_vers_bic_accredito;

		public String getCod_rp_dati_vers_dati_sing_vers_bic_accredito() {
			return this.cod_rp_dati_vers_dati_sing_vers_bic_accredito;
		}

		public String cod_rp_dati_vers_dati_sing_vers_iban_appoggio;

		public String getCod_rp_dati_vers_dati_sing_vers_iban_appoggio() {
			return this.cod_rp_dati_vers_dati_sing_vers_iban_appoggio;
		}

		public String cod_rp_dati_vers_dati_sing_vers_bic_appoggio;

		public String getCod_rp_dati_vers_dati_sing_vers_bic_appoggio() {
			return this.cod_rp_dati_vers_dati_sing_vers_bic_appoggio;
		}

		public String mybox_client_key;

		public String getMybox_client_key() {
			return this.mybox_client_key;
		}

		public String mybox_client_secret;

		public String getMybox_client_secret() {
			return this.mybox_client_secret;
		}

		public String ente_sil_invia_risposta_pagamento_url;

		public String getEnte_sil_invia_risposta_pagamento_url() {
			return this.ente_sil_invia_risposta_pagamento_url;
		}

		public String cod_global_location_number;

		public String getCod_global_location_number() {
			return this.cod_global_location_number;
		}

		public String de_password;

		public String getDe_password() {
			return this.de_password;
		}

		public String de_rp_ente_benef_denominazione_beneficiario;

		public String getDe_rp_ente_benef_denominazione_beneficiario() {
			return this.de_rp_ente_benef_denominazione_beneficiario;
		}

		public String de_rp_ente_benef_indirizzo_beneficiario;

		public String getDe_rp_ente_benef_indirizzo_beneficiario() {
			return this.de_rp_ente_benef_indirizzo_beneficiario;
		}

		public String de_rp_ente_benef_civico_beneficiario;

		public String getDe_rp_ente_benef_civico_beneficiario() {
			return this.de_rp_ente_benef_civico_beneficiario;
		}

		public String cod_rp_ente_benef_cap_beneficiario;

		public String getCod_rp_ente_benef_cap_beneficiario() {
			return this.cod_rp_ente_benef_cap_beneficiario;
		}

		public String de_rp_ente_benef_localita_beneficiario;

		public String getDe_rp_ente_benef_localita_beneficiario() {
			return this.de_rp_ente_benef_localita_beneficiario;
		}

		public String de_rp_ente_benef_provincia_beneficiario;

		public String getDe_rp_ente_benef_provincia_beneficiario() {
			return this.de_rp_ente_benef_provincia_beneficiario;
		}

		public String cod_rp_ente_benef_nazione_beneficiario;

		public String getCod_rp_ente_benef_nazione_beneficiario() {
			return this.cod_rp_ente_benef_nazione_beneficiario;
		}

		public String de_rp_ente_benef_telefono_beneficiario;

		public String getDe_rp_ente_benef_telefono_beneficiario() {
			return this.de_rp_ente_benef_telefono_beneficiario;
		}

		public String de_rp_ente_benef_sito_web_beneficiario;

		public String getDe_rp_ente_benef_sito_web_beneficiario() {
			return this.de_rp_ente_benef_sito_web_beneficiario;
		}

		public String de_rp_ente_benef_email_beneficiario;

		public String getDe_rp_ente_benef_email_beneficiario() {
			return this.de_rp_ente_benef_email_beneficiario;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.mygov_ente_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row17Struct other = (row17Struct) obj;

			if (this.mygov_ente_id != other.mygov_ente_id)
				return false;

			return true;
		}

		public void copyDataTo(row17Struct other) {

			other.mygov_ente_id = this.mygov_ente_id;
			other.cod_ipa_ente = this.cod_ipa_ente;
			other.codice_fiscale_ente = this.codice_fiscale_ente;
			other.de_nome_ente = this.de_nome_ente;
			other.email_amministratore = this.email_amministratore;
			other.dt_creazione = this.dt_creazione;
			other.dt_ultima_modifica = this.dt_ultima_modifica;
			other.cod_rp_dati_vers_tipo_versamento = this.cod_rp_dati_vers_tipo_versamento;
			other.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa = this.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa;
			other.cod_rp_dati_vers_dati_sing_vers_iban_accredito = this.cod_rp_dati_vers_dati_sing_vers_iban_accredito;
			other.cod_rp_dati_vers_dati_sing_vers_bic_accredito = this.cod_rp_dati_vers_dati_sing_vers_bic_accredito;
			other.cod_rp_dati_vers_dati_sing_vers_iban_appoggio = this.cod_rp_dati_vers_dati_sing_vers_iban_appoggio;
			other.cod_rp_dati_vers_dati_sing_vers_bic_appoggio = this.cod_rp_dati_vers_dati_sing_vers_bic_appoggio;
			other.mybox_client_key = this.mybox_client_key;
			other.mybox_client_secret = this.mybox_client_secret;
			other.ente_sil_invia_risposta_pagamento_url = this.ente_sil_invia_risposta_pagamento_url;
			other.cod_global_location_number = this.cod_global_location_number;
			other.de_password = this.de_password;
			other.de_rp_ente_benef_denominazione_beneficiario = this.de_rp_ente_benef_denominazione_beneficiario;
			other.de_rp_ente_benef_indirizzo_beneficiario = this.de_rp_ente_benef_indirizzo_beneficiario;
			other.de_rp_ente_benef_civico_beneficiario = this.de_rp_ente_benef_civico_beneficiario;
			other.cod_rp_ente_benef_cap_beneficiario = this.cod_rp_ente_benef_cap_beneficiario;
			other.de_rp_ente_benef_localita_beneficiario = this.de_rp_ente_benef_localita_beneficiario;
			other.de_rp_ente_benef_provincia_beneficiario = this.de_rp_ente_benef_provincia_beneficiario;
			other.cod_rp_ente_benef_nazione_beneficiario = this.cod_rp_ente_benef_nazione_beneficiario;
			other.de_rp_ente_benef_telefono_beneficiario = this.de_rp_ente_benef_telefono_beneficiario;
			other.de_rp_ente_benef_sito_web_beneficiario = this.de_rp_ente_benef_sito_web_beneficiario;
			other.de_rp_ente_benef_email_beneficiario = this.de_rp_ente_benef_email_beneficiario;

		}

		public void copyKeysDataTo(row17Struct other) {

			other.mygov_ente_id = this.mygov_ente_id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_ente_id = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_ente_id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.cod_ipa_ente = readString(dis, ois);

				this.codice_fiscale_ente = readString(dis, ois);

				this.de_nome_ente = readString(dis, ois);

				this.email_amministratore = readString(dis, ois);

				this.dt_creazione = readDate(dis, ois);

				this.dt_ultima_modifica = readDate(dis, ois);

				this.cod_rp_dati_vers_tipo_versamento = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa = null;
				} else {
					this.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa = dis
							.readDouble();
				}

				this.cod_rp_dati_vers_dati_sing_vers_iban_accredito = readString(
						dis, ois);

				this.cod_rp_dati_vers_dati_sing_vers_bic_accredito = readString(
						dis, ois);

				this.cod_rp_dati_vers_dati_sing_vers_iban_appoggio = readString(
						dis, ois);

				this.cod_rp_dati_vers_dati_sing_vers_bic_appoggio = readString(
						dis, ois);

				this.mybox_client_key = readString(dis, ois);

				this.mybox_client_secret = readString(dis, ois);

				this.ente_sil_invia_risposta_pagamento_url = readString(dis,
						ois);

				this.cod_global_location_number = readString(dis, ois);

				this.de_password = readString(dis, ois);

				this.de_rp_ente_benef_denominazione_beneficiario = readString(
						dis, ois);

				this.de_rp_ente_benef_indirizzo_beneficiario = readString(dis,
						ois);

				this.de_rp_ente_benef_civico_beneficiario = readString(dis, ois);

				this.cod_rp_ente_benef_cap_beneficiario = readString(dis, ois);

				this.de_rp_ente_benef_localita_beneficiario = readString(dis,
						ois);

				this.de_rp_ente_benef_provincia_beneficiario = readString(dis,
						ois);

				this.cod_rp_ente_benef_nazione_beneficiario = readString(dis,
						ois);

				this.de_rp_ente_benef_telefono_beneficiario = readString(dis,
						ois);

				this.de_rp_ente_benef_sito_web_beneficiario = readString(dis,
						ois);

				this.de_rp_ente_benef_email_beneficiario = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.cod_ipa_ente, dos, oos);

				writeString(this.codice_fiscale_ente, dos, oos);

				writeString(this.de_nome_ente, dos, oos);

				writeString(this.email_amministratore, dos, oos);

				writeDate(this.dt_creazione, dos, oos);

				writeDate(this.dt_ultima_modifica, dos, oos);

				writeString(this.cod_rp_dati_vers_tipo_versamento, dos, oos);

				if (this.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa);
				}

				writeString(
						this.cod_rp_dati_vers_dati_sing_vers_iban_accredito,
						dos, oos);

				writeString(this.cod_rp_dati_vers_dati_sing_vers_bic_accredito,
						dos, oos);

				writeString(this.cod_rp_dati_vers_dati_sing_vers_iban_appoggio,
						dos, oos);

				writeString(this.cod_rp_dati_vers_dati_sing_vers_bic_appoggio,
						dos, oos);

				writeString(this.mybox_client_key, dos, oos);

				writeString(this.mybox_client_secret, dos, oos);

				writeString(this.ente_sil_invia_risposta_pagamento_url, dos,
						oos);

				writeString(this.cod_global_location_number, dos, oos);

				writeString(this.de_password, dos, oos);

				writeString(this.de_rp_ente_benef_denominazione_beneficiario,
						dos, oos);

				writeString(this.de_rp_ente_benef_indirizzo_beneficiario, dos,
						oos);

				writeString(this.de_rp_ente_benef_civico_beneficiario, dos, oos);

				writeString(this.cod_rp_ente_benef_cap_beneficiario, dos, oos);

				writeString(this.de_rp_ente_benef_localita_beneficiario, dos,
						oos);

				writeString(this.de_rp_ente_benef_provincia_beneficiario, dos,
						oos);

				writeString(this.cod_rp_ente_benef_nazione_beneficiario, dos,
						oos);

				writeString(this.de_rp_ente_benef_telefono_beneficiario, dos,
						oos);

				writeString(this.de_rp_ente_benef_sito_web_beneficiario, dos,
						oos);

				writeString(this.de_rp_ente_benef_email_beneficiario, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_ente_id=" + String.valueOf(mygov_ente_id));
			sb.append(",cod_ipa_ente=" + cod_ipa_ente);
			sb.append(",codice_fiscale_ente=" + codice_fiscale_ente);
			sb.append(",de_nome_ente=" + de_nome_ente);
			sb.append(",email_amministratore=" + email_amministratore);
			sb.append(",dt_creazione=" + String.valueOf(dt_creazione));
			sb.append(",dt_ultima_modifica="
					+ String.valueOf(dt_ultima_modifica));
			sb.append(",cod_rp_dati_vers_tipo_versamento="
					+ cod_rp_dati_vers_tipo_versamento);
			sb.append(",num_rp_dati_vers_dati_sing_vers_commissione_carico_pa="
					+ String.valueOf(num_rp_dati_vers_dati_sing_vers_commissione_carico_pa));
			sb.append(",cod_rp_dati_vers_dati_sing_vers_iban_accredito="
					+ cod_rp_dati_vers_dati_sing_vers_iban_accredito);
			sb.append(",cod_rp_dati_vers_dati_sing_vers_bic_accredito="
					+ cod_rp_dati_vers_dati_sing_vers_bic_accredito);
			sb.append(",cod_rp_dati_vers_dati_sing_vers_iban_appoggio="
					+ cod_rp_dati_vers_dati_sing_vers_iban_appoggio);
			sb.append(",cod_rp_dati_vers_dati_sing_vers_bic_appoggio="
					+ cod_rp_dati_vers_dati_sing_vers_bic_appoggio);
			sb.append(",mybox_client_key=" + mybox_client_key);
			sb.append(",mybox_client_secret=" + mybox_client_secret);
			sb.append(",ente_sil_invia_risposta_pagamento_url="
					+ ente_sil_invia_risposta_pagamento_url);
			sb.append(",cod_global_location_number="
					+ cod_global_location_number);
			sb.append(",de_password=" + de_password);
			sb.append(",de_rp_ente_benef_denominazione_beneficiario="
					+ de_rp_ente_benef_denominazione_beneficiario);
			sb.append(",de_rp_ente_benef_indirizzo_beneficiario="
					+ de_rp_ente_benef_indirizzo_beneficiario);
			sb.append(",de_rp_ente_benef_civico_beneficiario="
					+ de_rp_ente_benef_civico_beneficiario);
			sb.append(",cod_rp_ente_benef_cap_beneficiario="
					+ cod_rp_ente_benef_cap_beneficiario);
			sb.append(",de_rp_ente_benef_localita_beneficiario="
					+ de_rp_ente_benef_localita_beneficiario);
			sb.append(",de_rp_ente_benef_provincia_beneficiario="
					+ de_rp_ente_benef_provincia_beneficiario);
			sb.append(",cod_rp_ente_benef_nazione_beneficiario="
					+ cod_rp_ente_benef_nazione_beneficiario);
			sb.append(",de_rp_ente_benef_telefono_beneficiario="
					+ de_rp_ente_benef_telefono_beneficiario);
			sb.append(",de_rp_ente_benef_sito_web_beneficiario="
					+ de_rp_ente_benef_sito_web_beneficiario);
			sb.append(",de_rp_ente_benef_email_beneficiario="
					+ de_rp_ente_benef_email_beneficiario);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.mygov_ente_id,
					other.mygov_ente_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_13Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();

				/**
				 * [tAdvancedHash_row17 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row17", false);
				start_Hash.put("tAdvancedHash_row17",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row17";

				int tos_count_tAdvancedHash_row17 = 0;

				// connection name:row17
				// source node:tPostgresqlInput_13 -
				// inputs:(after_tPostgresqlInput_12) outputs:(row17,row17) |
				// target node:tAdvancedHash_row17 - inputs:(row17) outputs:()
				// linked node: tMap_12 - inputs:(row16,row17)
				// outputs:(ENTE_TIPO)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row17 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row17Struct> getLookup(matchingModeEnum_row17);

				globalMap.put("tHash_Lookup_row17", tHash_Lookup_row17);

				/**
				 * [tAdvancedHash_row17 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_13 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_13", false);
				start_Hash.put("tPostgresqlInput_13",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_13");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_13";

				int tos_count_tPostgresqlInput_13 = 0;

				int nb_line_tPostgresqlInput_13 = 0;
				java.sql.Connection conn_tPostgresqlInput_13 = null;
				conn_tPostgresqlInput_13 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_13 = conn_tPostgresqlInput_13
						.createStatement();

				String dbquery_tPostgresqlInput_13 = "SELECT \n  \"mygov_ente\".\"mygov_ente_id\", \n  \"mygov_ente\".\"cod_ipa_ente\", \n  \"mygov_ente\".\"codice_fiscale_ente\", \n  \"mygov_ente\".\"de_nome_ente\", \n  \"mygov_ente\".\"email_amministratore\", \n  \"mygov_ente\".\"dt_creazione\", \n  \"mygov_ente\".\"dt_ultima_modifica\", \n  \"mygov_ente\".\"cod_rp_dati_vers_tipo_versamento\",  \n  \"mygov_ente\".\"num_rp_dati_vers_dati_sing_vers_commissione_carico_pa\",  \n  \"mygov_ente\".\"cod_rp_dati_vers_dati_sing_vers_iban_accredito\", \n  \"mygov_ente\".\"cod_rp_dati_vers_dati_sing_vers_bic_accredito\",  \n  \"mygov_ente\".\"cod_rp_dati_vers_dati_sing_vers_iban_appoggio\",  \n  \"mygov_ente\".\"cod_rp_dati_vers_dati_sing_vers_bic_appoggio\", \n  \"mygov_ente\".\"mybox_client_key\", \n  \"mygov_ente\".\"mybox_client_secret\", \n  \"mygov_ente\".\"ente_sil_invia_risposta_pagamento_url\", \n  \"mygov_ente\".\"cod_global_location_number\", \n  \"mygov_ente\".\"de_password\", \n  \"mygov_ente\".\"de_rp_ente_benef_denominazione_beneficiario\", \n  \"mygov_ente\".\"de_rp_ente_benef_indirizzo_beneficiario\", \n  \"mygov_ente\".\"de_rp_ente_benef_civico_beneficiario\", \n  \"mygov_ente\".\"cod_rp_ente_benef_cap_beneficiario\", \n  \"mygov_ente\".\"de_rp_ente_benef_localita_beneficiario\", \n  \"mygov_ente\".\"de_rp_ente_benef_provincia_beneficiario\", \n  \"mygov_ente\".\"cod_rp_ente_benef_nazione_beneficiario\", \n  \"mygov_ente\".\"de_rp_ente_benef_telefono_beneficiario\", \n  \"mygov_ente\".\"de_rp_ente_benef_sito_web_beneficiario\", \n  \"mygov_ente\".\"de_rp_ente_benef_email_beneficiario\"\nFROM \"mygov_ente\"";

				globalMap.put("tPostgresqlInput_13_QUERY",
						dbquery_tPostgresqlInput_13);
				java.sql.ResultSet rs_tPostgresqlInput_13 = null;
				try {
					rs_tPostgresqlInput_13 = stmt_tPostgresqlInput_13
							.executeQuery(dbquery_tPostgresqlInput_13);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_13 = rs_tPostgresqlInput_13
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_13 = rsmd_tPostgresqlInput_13
							.getColumnCount();

					String tmpContent_tPostgresqlInput_13 = null;

					while (rs_tPostgresqlInput_13.next()) {
						nb_line_tPostgresqlInput_13++;

						if (colQtyInRs_tPostgresqlInput_13 < 1) {
							row17.mygov_ente_id = 0;
						} else {

							if (rs_tPostgresqlInput_13.getObject(1) != null) {
								row17.mygov_ente_id = rs_tPostgresqlInput_13
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 2) {
							row17.cod_ipa_ente = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(2);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.cod_ipa_ente = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.cod_ipa_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 3) {
							row17.codice_fiscale_ente = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(3);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.codice_fiscale_ente = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.codice_fiscale_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 4) {
							row17.de_nome_ente = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(4);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.de_nome_ente = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.de_nome_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 5) {
							row17.email_amministratore = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(5);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.email_amministratore = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.email_amministratore = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 6) {
							row17.dt_creazione = null;
						} else {

							if (rs_tPostgresqlInput_13.getTimestamp(6) != null) {
								row17.dt_creazione = new java.util.Date(
										rs_tPostgresqlInput_13.getTimestamp(6)
												.getTime());
							} else {
								row17.dt_creazione = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 7) {
							row17.dt_ultima_modifica = null;
						} else {

							if (rs_tPostgresqlInput_13.getTimestamp(7) != null) {
								row17.dt_ultima_modifica = new java.util.Date(
										rs_tPostgresqlInput_13.getTimestamp(7)
												.getTime());
							} else {
								row17.dt_ultima_modifica = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 8) {
							row17.cod_rp_dati_vers_tipo_versamento = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(8);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.cod_rp_dati_vers_tipo_versamento = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.cod_rp_dati_vers_tipo_versamento = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 9) {
							row17.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa = null;
						} else {

							if (rs_tPostgresqlInput_13.getObject(9) != null) {
								row17.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa = rs_tPostgresqlInput_13
										.getDouble(9);
							} else {
								row17.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 10) {
							row17.cod_rp_dati_vers_dati_sing_vers_iban_accredito = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(10);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.cod_rp_dati_vers_dati_sing_vers_iban_accredito = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.cod_rp_dati_vers_dati_sing_vers_iban_accredito = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 11) {
							row17.cod_rp_dati_vers_dati_sing_vers_bic_accredito = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(11);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.cod_rp_dati_vers_dati_sing_vers_bic_accredito = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.cod_rp_dati_vers_dati_sing_vers_bic_accredito = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 12) {
							row17.cod_rp_dati_vers_dati_sing_vers_iban_appoggio = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(12);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.cod_rp_dati_vers_dati_sing_vers_iban_appoggio = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.cod_rp_dati_vers_dati_sing_vers_iban_appoggio = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 13) {
							row17.cod_rp_dati_vers_dati_sing_vers_bic_appoggio = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(13);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.cod_rp_dati_vers_dati_sing_vers_bic_appoggio = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.cod_rp_dati_vers_dati_sing_vers_bic_appoggio = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 14) {
							row17.mybox_client_key = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(14);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.mybox_client_key = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.mybox_client_key = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 15) {
							row17.mybox_client_secret = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(15);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.mybox_client_secret = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.mybox_client_secret = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 16) {
							row17.ente_sil_invia_risposta_pagamento_url = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(16);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.ente_sil_invia_risposta_pagamento_url = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.ente_sil_invia_risposta_pagamento_url = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 17) {
							row17.cod_global_location_number = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(17);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.cod_global_location_number = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.cod_global_location_number = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 18) {
							row17.de_password = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(18);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.de_password = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.de_password = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 19) {
							row17.de_rp_ente_benef_denominazione_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(19);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.de_rp_ente_benef_denominazione_beneficiario = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.de_rp_ente_benef_denominazione_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 20) {
							row17.de_rp_ente_benef_indirizzo_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(20);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.de_rp_ente_benef_indirizzo_beneficiario = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.de_rp_ente_benef_indirizzo_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 21) {
							row17.de_rp_ente_benef_civico_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(21);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.de_rp_ente_benef_civico_beneficiario = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.de_rp_ente_benef_civico_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 22) {
							row17.cod_rp_ente_benef_cap_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(22);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.cod_rp_ente_benef_cap_beneficiario = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.cod_rp_ente_benef_cap_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 23) {
							row17.de_rp_ente_benef_localita_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(23);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.de_rp_ente_benef_localita_beneficiario = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.de_rp_ente_benef_localita_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 24) {
							row17.de_rp_ente_benef_provincia_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(24);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.de_rp_ente_benef_provincia_beneficiario = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.de_rp_ente_benef_provincia_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 25) {
							row17.cod_rp_ente_benef_nazione_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(25);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.cod_rp_ente_benef_nazione_beneficiario = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.cod_rp_ente_benef_nazione_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 26) {
							row17.de_rp_ente_benef_telefono_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(26);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.de_rp_ente_benef_telefono_beneficiario = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.de_rp_ente_benef_telefono_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 27) {
							row17.de_rp_ente_benef_sito_web_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(27);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.de_rp_ente_benef_sito_web_beneficiario = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.de_rp_ente_benef_sito_web_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_13 < 28) {
							row17.de_rp_ente_benef_email_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_13 = rs_tPostgresqlInput_13
									.getString(28);
							if (tmpContent_tPostgresqlInput_13 != null) {
								row17.de_rp_ente_benef_email_beneficiario = tmpContent_tPostgresqlInput_13
										.trim();
							} else {
								row17.de_rp_ente_benef_email_beneficiario = null;
							}
						}

						/**
						 * [tPostgresqlInput_13 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_13 main ] start
						 */

						currentComponent = "tPostgresqlInput_13";

						tos_count_tPostgresqlInput_13++;

						/**
						 * [tPostgresqlInput_13 main ] stop
						 */

						/**
						 * [tAdvancedHash_row17 main ] start
						 */

						currentComponent = "tAdvancedHash_row17";

						row17Struct row17_HashRow = new row17Struct();

						row17_HashRow.mygov_ente_id = row17.mygov_ente_id;

						row17_HashRow.cod_ipa_ente = row17.cod_ipa_ente;

						row17_HashRow.codice_fiscale_ente = row17.codice_fiscale_ente;

						row17_HashRow.de_nome_ente = row17.de_nome_ente;

						row17_HashRow.email_amministratore = row17.email_amministratore;

						row17_HashRow.dt_creazione = row17.dt_creazione;

						row17_HashRow.dt_ultima_modifica = row17.dt_ultima_modifica;

						row17_HashRow.cod_rp_dati_vers_tipo_versamento = row17.cod_rp_dati_vers_tipo_versamento;

						row17_HashRow.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa = row17.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa;

						row17_HashRow.cod_rp_dati_vers_dati_sing_vers_iban_accredito = row17.cod_rp_dati_vers_dati_sing_vers_iban_accredito;

						row17_HashRow.cod_rp_dati_vers_dati_sing_vers_bic_accredito = row17.cod_rp_dati_vers_dati_sing_vers_bic_accredito;

						row17_HashRow.cod_rp_dati_vers_dati_sing_vers_iban_appoggio = row17.cod_rp_dati_vers_dati_sing_vers_iban_appoggio;

						row17_HashRow.cod_rp_dati_vers_dati_sing_vers_bic_appoggio = row17.cod_rp_dati_vers_dati_sing_vers_bic_appoggio;

						row17_HashRow.mybox_client_key = row17.mybox_client_key;

						row17_HashRow.mybox_client_secret = row17.mybox_client_secret;

						row17_HashRow.ente_sil_invia_risposta_pagamento_url = row17.ente_sil_invia_risposta_pagamento_url;

						row17_HashRow.cod_global_location_number = row17.cod_global_location_number;

						row17_HashRow.de_password = row17.de_password;

						row17_HashRow.de_rp_ente_benef_denominazione_beneficiario = row17.de_rp_ente_benef_denominazione_beneficiario;

						row17_HashRow.de_rp_ente_benef_indirizzo_beneficiario = row17.de_rp_ente_benef_indirizzo_beneficiario;

						row17_HashRow.de_rp_ente_benef_civico_beneficiario = row17.de_rp_ente_benef_civico_beneficiario;

						row17_HashRow.cod_rp_ente_benef_cap_beneficiario = row17.cod_rp_ente_benef_cap_beneficiario;

						row17_HashRow.de_rp_ente_benef_localita_beneficiario = row17.de_rp_ente_benef_localita_beneficiario;

						row17_HashRow.de_rp_ente_benef_provincia_beneficiario = row17.de_rp_ente_benef_provincia_beneficiario;

						row17_HashRow.cod_rp_ente_benef_nazione_beneficiario = row17.cod_rp_ente_benef_nazione_beneficiario;

						row17_HashRow.de_rp_ente_benef_telefono_beneficiario = row17.de_rp_ente_benef_telefono_beneficiario;

						row17_HashRow.de_rp_ente_benef_sito_web_beneficiario = row17.de_rp_ente_benef_sito_web_beneficiario;

						row17_HashRow.de_rp_ente_benef_email_beneficiario = row17.de_rp_ente_benef_email_beneficiario;

						tHash_Lookup_row17.put(row17_HashRow);

						tos_count_tAdvancedHash_row17++;

						/**
						 * [tAdvancedHash_row17 main ] stop
						 */

						/**
						 * [tPostgresqlInput_13 end ] start
						 */

						currentComponent = "tPostgresqlInput_13";

					}
				} finally {
					stmt_tPostgresqlInput_13.close();

				}
				globalMap.put("tPostgresqlInput_13_NB_LINE",
						nb_line_tPostgresqlInput_13);

				ok_Hash.put("tPostgresqlInput_13", true);
				end_Hash.put("tPostgresqlInput_13", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_13",
						end_Hash.get("tPostgresqlInput_13")
								- start_Hash.get("tPostgresqlInput_13"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_13 end ] stop
				 */

				/**
				 * [tAdvancedHash_row17 end ] start
				 */

				currentComponent = "tAdvancedHash_row17";

				tHash_Lookup_row17.endPut();

				ok_Hash.put("tAdvancedHash_row17", true);
				end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row17 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_13 finally ] start
				 */

				currentComponent = "tPostgresqlInput_13";

				/**
				 * [tPostgresqlInput_13 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row17 finally ] start
				 */

				currentComponent = "tAdvancedHash_row17";

				/**
				 * [tAdvancedHash_row17 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_13_SUBPROCESS_STATE", 1);
	}

	public static class row18Struct implements
			routines.system.IPersistableComparableLookupRow<row18Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_ente_id;

		public long getMygov_ente_id() {
			return this.mygov_ente_id;
		}

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		public String codice_fiscale_ente;

		public String getCodice_fiscale_ente() {
			return this.codice_fiscale_ente;
		}

		public String de_nome_ente;

		public String getDe_nome_ente() {
			return this.de_nome_ente;
		}

		public String email_amministratore;

		public String getEmail_amministratore() {
			return this.email_amministratore;
		}

		public java.util.Date dt_creazione;

		public java.util.Date getDt_creazione() {
			return this.dt_creazione;
		}

		public java.util.Date dt_ultima_modifica;

		public java.util.Date getDt_ultima_modifica() {
			return this.dt_ultima_modifica;
		}

		public String mybox_client_key;

		public String getMybox_client_key() {
			return this.mybox_client_key;
		}

		public String mybox_client_secret;

		public String getMybox_client_secret() {
			return this.mybox_client_secret;
		}

		public int num_giorni_pagamento_presunti;

		public int getNum_giorni_pagamento_presunti() {
			return this.num_giorni_pagamento_presunti;
		}

		public String de_password;

		public String getDe_password() {
			return this.de_password;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.cod_ipa_ente == null) ? 0 : this.cod_ipa_ente
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row18Struct other = (row18Struct) obj;

			if (this.cod_ipa_ente == null) {
				if (other.cod_ipa_ente != null)
					return false;

			} else if (!this.cod_ipa_ente.equals(other.cod_ipa_ente))

				return false;

			return true;
		}

		public void copyDataTo(row18Struct other) {

			other.mygov_ente_id = this.mygov_ente_id;
			other.cod_ipa_ente = this.cod_ipa_ente;
			other.codice_fiscale_ente = this.codice_fiscale_ente;
			other.de_nome_ente = this.de_nome_ente;
			other.email_amministratore = this.email_amministratore;
			other.dt_creazione = this.dt_creazione;
			other.dt_ultima_modifica = this.dt_ultima_modifica;
			other.mybox_client_key = this.mybox_client_key;
			other.mybox_client_secret = this.mybox_client_secret;
			other.num_giorni_pagamento_presunti = this.num_giorni_pagamento_presunti;
			other.de_password = this.de_password;

		}

		public void copyKeysDataTo(row18Struct other) {

			other.cod_ipa_ente = this.cod_ipa_ente;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.cod_ipa_ente = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.cod_ipa_ente, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.mygov_ente_id = dis.readLong();

				this.codice_fiscale_ente = readString(dis, ois);

				this.de_nome_ente = readString(dis, ois);

				this.email_amministratore = readString(dis, ois);

				this.dt_creazione = readDate(dis, ois);

				this.dt_ultima_modifica = readDate(dis, ois);

				this.mybox_client_key = readString(dis, ois);

				this.mybox_client_secret = readString(dis, ois);

				this.num_giorni_pagamento_presunti = dis.readInt();

				this.de_password = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.mygov_ente_id);

				writeString(this.codice_fiscale_ente, dos, oos);

				writeString(this.de_nome_ente, dos, oos);

				writeString(this.email_amministratore, dos, oos);

				writeDate(this.dt_creazione, dos, oos);

				writeDate(this.dt_ultima_modifica, dos, oos);

				writeString(this.mybox_client_key, dos, oos);

				writeString(this.mybox_client_secret, dos, oos);

				dos.writeInt(this.num_giorni_pagamento_presunti);

				writeString(this.de_password, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_ente_id=" + String.valueOf(mygov_ente_id));
			sb.append(",cod_ipa_ente=" + cod_ipa_ente);
			sb.append(",codice_fiscale_ente=" + codice_fiscale_ente);
			sb.append(",de_nome_ente=" + de_nome_ente);
			sb.append(",email_amministratore=" + email_amministratore);
			sb.append(",dt_creazione=" + String.valueOf(dt_creazione));
			sb.append(",dt_ultima_modifica="
					+ String.valueOf(dt_ultima_modifica));
			sb.append(",mybox_client_key=" + mybox_client_key);
			sb.append(",mybox_client_secret=" + mybox_client_secret);
			sb.append(",num_giorni_pagamento_presunti="
					+ String.valueOf(num_giorni_pagamento_presunti));
			sb.append(",de_password=" + de_password);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.cod_ipa_ente,
					other.cod_ipa_ente);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_14Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row18Struct row18 = new row18Struct();

				/**
				 * [tAdvancedHash_row18 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row18", false);
				start_Hash.put("tAdvancedHash_row18",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row18";

				int tos_count_tAdvancedHash_row18 = 0;

				// connection name:row18
				// source node:tPostgresqlInput_14 -
				// inputs:(after_tPostgresqlInput_12) outputs:(row18,row18) |
				// target node:tAdvancedHash_row18 - inputs:(row18) outputs:()
				// linked node: tMap_13 - inputs:(ENTE_TIPO,row18)
				// outputs:(MAPPING_ENTE_TIPO_DOVUTO)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row18Struct> getLookup(matchingModeEnum_row18);

				globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);

				/**
				 * [tAdvancedHash_row18 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_14 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_14", false);
				start_Hash.put("tPostgresqlInput_14",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_14");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_14";

				int tos_count_tPostgresqlInput_14 = 0;

				int nb_line_tPostgresqlInput_14 = 0;
				java.sql.Connection conn_tPostgresqlInput_14 = null;
				conn_tPostgresqlInput_14 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_3");

				java.sql.Statement stmt_tPostgresqlInput_14 = conn_tPostgresqlInput_14
						.createStatement();

				String dbquery_tPostgresqlInput_14 = "SELECT \n  \"mygov_ente\".\"mygov_ente_id\", \n  \"mygov_ente\".\"cod_ipa_ente\", \n  \"mygov_ente\".\"codice_fiscale_ente\", \n  \"mygov_ente\".\"de_nome_ente\", \n  \"mygov_ente\".\"email_amministratore\", \n  \"mygov_ente\".\"dt_creazione\", \n  \"mygov_ente\".\"dt_ultima_modifica\", \n  \"mygov_ente\".\"mybox_client_key\", \n  \"mygov_ente\".\"mybox_client_secret\", \n  \"mygov_ente\".\"num_giorni_pagamento_presunti\", \n  \"mygov_ente\".\"de_password\"\nFROM \"mygov_ente\"";

				globalMap.put("tPostgresqlInput_14_QUERY",
						dbquery_tPostgresqlInput_14);
				java.sql.ResultSet rs_tPostgresqlInput_14 = null;
				try {
					rs_tPostgresqlInput_14 = stmt_tPostgresqlInput_14
							.executeQuery(dbquery_tPostgresqlInput_14);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_14 = rs_tPostgresqlInput_14
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_14 = rsmd_tPostgresqlInput_14
							.getColumnCount();

					String tmpContent_tPostgresqlInput_14 = null;

					while (rs_tPostgresqlInput_14.next()) {
						nb_line_tPostgresqlInput_14++;

						if (colQtyInRs_tPostgresqlInput_14 < 1) {
							row18.mygov_ente_id = 0;
						} else {

							if (rs_tPostgresqlInput_14.getObject(1) != null) {
								row18.mygov_ente_id = rs_tPostgresqlInput_14
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_14 < 2) {
							row18.cod_ipa_ente = null;
						} else {

							tmpContent_tPostgresqlInput_14 = rs_tPostgresqlInput_14
									.getString(2);
							if (tmpContent_tPostgresqlInput_14 != null) {
								row18.cod_ipa_ente = tmpContent_tPostgresqlInput_14
										.trim();
							} else {
								row18.cod_ipa_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_14 < 3) {
							row18.codice_fiscale_ente = null;
						} else {

							tmpContent_tPostgresqlInput_14 = rs_tPostgresqlInput_14
									.getString(3);
							if (tmpContent_tPostgresqlInput_14 != null) {
								row18.codice_fiscale_ente = tmpContent_tPostgresqlInput_14
										.trim();
							} else {
								row18.codice_fiscale_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_14 < 4) {
							row18.de_nome_ente = null;
						} else {

							tmpContent_tPostgresqlInput_14 = rs_tPostgresqlInput_14
									.getString(4);
							if (tmpContent_tPostgresqlInput_14 != null) {
								row18.de_nome_ente = tmpContent_tPostgresqlInput_14
										.trim();
							} else {
								row18.de_nome_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_14 < 5) {
							row18.email_amministratore = null;
						} else {

							tmpContent_tPostgresqlInput_14 = rs_tPostgresqlInput_14
									.getString(5);
							if (tmpContent_tPostgresqlInput_14 != null) {
								row18.email_amministratore = tmpContent_tPostgresqlInput_14
										.trim();
							} else {
								row18.email_amministratore = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_14 < 6) {
							row18.dt_creazione = null;
						} else {

							if (rs_tPostgresqlInput_14.getTimestamp(6) != null) {
								row18.dt_creazione = new java.util.Date(
										rs_tPostgresqlInput_14.getTimestamp(6)
												.getTime());
							} else {
								row18.dt_creazione = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_14 < 7) {
							row18.dt_ultima_modifica = null;
						} else {

							if (rs_tPostgresqlInput_14.getTimestamp(7) != null) {
								row18.dt_ultima_modifica = new java.util.Date(
										rs_tPostgresqlInput_14.getTimestamp(7)
												.getTime());
							} else {
								row18.dt_ultima_modifica = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_14 < 8) {
							row18.mybox_client_key = null;
						} else {

							tmpContent_tPostgresqlInput_14 = rs_tPostgresqlInput_14
									.getString(8);
							if (tmpContent_tPostgresqlInput_14 != null) {
								row18.mybox_client_key = tmpContent_tPostgresqlInput_14
										.trim();
							} else {
								row18.mybox_client_key = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_14 < 9) {
							row18.mybox_client_secret = null;
						} else {

							tmpContent_tPostgresqlInput_14 = rs_tPostgresqlInput_14
									.getString(9);
							if (tmpContent_tPostgresqlInput_14 != null) {
								row18.mybox_client_secret = tmpContent_tPostgresqlInput_14
										.trim();
							} else {
								row18.mybox_client_secret = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_14 < 10) {
							row18.num_giorni_pagamento_presunti = 0;
						} else {

							if (rs_tPostgresqlInput_14.getObject(10) != null) {
								row18.num_giorni_pagamento_presunti = rs_tPostgresqlInput_14
										.getInt(10);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_14 < 11) {
							row18.de_password = null;
						} else {

							tmpContent_tPostgresqlInput_14 = rs_tPostgresqlInput_14
									.getString(11);
							if (tmpContent_tPostgresqlInput_14 != null) {
								row18.de_password = tmpContent_tPostgresqlInput_14
										.trim();
							} else {
								row18.de_password = null;
							}
						}

						/**
						 * [tPostgresqlInput_14 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_14 main ] start
						 */

						currentComponent = "tPostgresqlInput_14";

						tos_count_tPostgresqlInput_14++;

						/**
						 * [tPostgresqlInput_14 main ] stop
						 */

						/**
						 * [tAdvancedHash_row18 main ] start
						 */

						currentComponent = "tAdvancedHash_row18";

						row18Struct row18_HashRow = new row18Struct();

						row18_HashRow.mygov_ente_id = row18.mygov_ente_id;

						row18_HashRow.cod_ipa_ente = row18.cod_ipa_ente;

						row18_HashRow.codice_fiscale_ente = row18.codice_fiscale_ente;

						row18_HashRow.de_nome_ente = row18.de_nome_ente;

						row18_HashRow.email_amministratore = row18.email_amministratore;

						row18_HashRow.dt_creazione = row18.dt_creazione;

						row18_HashRow.dt_ultima_modifica = row18.dt_ultima_modifica;

						row18_HashRow.mybox_client_key = row18.mybox_client_key;

						row18_HashRow.mybox_client_secret = row18.mybox_client_secret;

						row18_HashRow.num_giorni_pagamento_presunti = row18.num_giorni_pagamento_presunti;

						row18_HashRow.de_password = row18.de_password;

						tHash_Lookup_row18.put(row18_HashRow);

						tos_count_tAdvancedHash_row18++;

						/**
						 * [tAdvancedHash_row18 main ] stop
						 */

						/**
						 * [tPostgresqlInput_14 end ] start
						 */

						currentComponent = "tPostgresqlInput_14";

					}
				} finally {
					stmt_tPostgresqlInput_14.close();

				}
				globalMap.put("tPostgresqlInput_14_NB_LINE",
						nb_line_tPostgresqlInput_14);

				ok_Hash.put("tPostgresqlInput_14", true);
				end_Hash.put("tPostgresqlInput_14", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_14",
						end_Hash.get("tPostgresqlInput_14")
								- start_Hash.get("tPostgresqlInput_14"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_14 end ] stop
				 */

				/**
				 * [tAdvancedHash_row18 end ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				tHash_Lookup_row18.endPut();

				ok_Hash.put("tAdvancedHash_row18", true);
				end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row18 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_14 finally ] start
				 */

				currentComponent = "tPostgresqlInput_14";

				/**
				 * [tPostgresqlInput_14 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row18 finally ] start
				 */

				currentComponent = "tAdvancedHash_row18";

				/**
				 * [tAdvancedHash_row18 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_14_SUBPROCESS_STATE", 1);
	}

	public static class row26Struct implements
			routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public long id_role;

		public long getId_role() {
			return this.id_role;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.id_role = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id_role);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_role=" + String.valueOf(id_role));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_21Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_21_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row26Struct row26 = new row26Struct();

				/**
				 * [tAdvancedHash_row26 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row26", false);
				start_Hash.put("tAdvancedHash_row26",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row26";

				int tos_count_tAdvancedHash_row26 = 0;

				// connection name:row26
				// source node:tPostgresqlInput_21 -
				// inputs:(after_tPostgresqlInput_3) outputs:(row26,row26) |
				// target node:tAdvancedHash_row26 - inputs:(row26) outputs:()
				// linked node: tMap_23 - inputs:(row25,row26,row30,row31,row22)
				// outputs:(SUPER_ADMIN_MYPAY)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row26 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row26Struct> getLookup(matchingModeEnum_row26);

				globalMap.put("tHash_Lookup_row26", tHash_Lookup_row26);

				/**
				 * [tAdvancedHash_row26 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_21 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_21", false);
				start_Hash.put("tPostgresqlInput_21",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_21";

				int tos_count_tPostgresqlInput_21 = 0;

				int nb_line_tPostgresqlInput_21 = 0;
				java.sql.Connection conn_tPostgresqlInput_21 = null;
				conn_tPostgresqlInput_21 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");

				java.sql.Statement stmt_tPostgresqlInput_21 = conn_tPostgresqlInput_21
						.createStatement();

				String dbquery_tPostgresqlInput_21 = "SELECT \n  \"role\".\"id_role\"\nFROM \"role\"\nWHERE role_name = 'ROLE_ADMIN' \n";

				globalMap.put("tPostgresqlInput_21_QUERY",
						dbquery_tPostgresqlInput_21);
				java.sql.ResultSet rs_tPostgresqlInput_21 = null;
				try {
					rs_tPostgresqlInput_21 = stmt_tPostgresqlInput_21
							.executeQuery(dbquery_tPostgresqlInput_21);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_21 = rs_tPostgresqlInput_21
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_21 = rsmd_tPostgresqlInput_21
							.getColumnCount();

					String tmpContent_tPostgresqlInput_21 = null;

					while (rs_tPostgresqlInput_21.next()) {
						nb_line_tPostgresqlInput_21++;

						if (colQtyInRs_tPostgresqlInput_21 < 1) {
							row26.id_role = 0;
						} else {

							if (rs_tPostgresqlInput_21.getObject(1) != null) {
								row26.id_role = rs_tPostgresqlInput_21
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tPostgresqlInput_21 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_21 main ] start
						 */

						currentComponent = "tPostgresqlInput_21";

						tos_count_tPostgresqlInput_21++;

						/**
						 * [tPostgresqlInput_21 main ] stop
						 */

						/**
						 * [tAdvancedHash_row26 main ] start
						 */

						currentComponent = "tAdvancedHash_row26";

						row26Struct row26_HashRow = new row26Struct();

						row26_HashRow.id_role = row26.id_role;

						tHash_Lookup_row26.put(row26_HashRow);

						tos_count_tAdvancedHash_row26++;

						/**
						 * [tAdvancedHash_row26 main ] stop
						 */

						/**
						 * [tPostgresqlInput_21 end ] start
						 */

						currentComponent = "tPostgresqlInput_21";

					}
				} finally {
					stmt_tPostgresqlInput_21.close();

				}
				globalMap.put("tPostgresqlInput_21_NB_LINE",
						nb_line_tPostgresqlInput_21);

				ok_Hash.put("tPostgresqlInput_21", true);
				end_Hash.put("tPostgresqlInput_21", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_21 end ] stop
				 */

				/**
				 * [tAdvancedHash_row26 end ] start
				 */

				currentComponent = "tAdvancedHash_row26";

				tHash_Lookup_row26.endPut();

				ok_Hash.put("tAdvancedHash_row26", true);
				end_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row26 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_21 finally ] start
				 */

				currentComponent = "tPostgresqlInput_21";

				/**
				 * [tPostgresqlInput_21 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row26 finally ] start
				 */

				currentComponent = "tAdvancedHash_row26";

				/**
				 * [tAdvancedHash_row26 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_21_SUBPROCESS_STATE", 1);
	}

	public static class row30Struct implements
			routines.system.IPersistableRow<row30Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public long id_application;

		public long getId_application() {
			return this.id_application;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.id_application = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id_application);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_application=" + String.valueOf(id_application));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_26Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_26_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row30Struct row30 = new row30Struct();

				/**
				 * [tAdvancedHash_row30 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row30", false);
				start_Hash.put("tAdvancedHash_row30",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row30";

				int tos_count_tAdvancedHash_row30 = 0;

				// connection name:row30
				// source node:tPostgresqlInput_26 -
				// inputs:(after_tPostgresqlInput_3) outputs:(row30,row30) |
				// target node:tAdvancedHash_row30 - inputs:(row30) outputs:()
				// linked node: tMap_23 - inputs:(row25,row26,row30,row31,row22)
				// outputs:(SUPER_ADMIN_MYPAY)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row30 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row30Struct> getLookup(matchingModeEnum_row30);

				globalMap.put("tHash_Lookup_row30", tHash_Lookup_row30);

				/**
				 * [tAdvancedHash_row30 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_26 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_26", false);
				start_Hash.put("tPostgresqlInput_26",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_26");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_26";

				int tos_count_tPostgresqlInput_26 = 0;

				int nb_line_tPostgresqlInput_26 = 0;
				java.sql.Connection conn_tPostgresqlInput_26 = null;
				conn_tPostgresqlInput_26 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");

				java.sql.Statement stmt_tPostgresqlInput_26 = conn_tPostgresqlInput_26
						.createStatement();

				String dbquery_tPostgresqlInput_26 = "SELECT \n  \"application\".\"id_application\"\nFROM \"application\"\nWHERE application_code = 'MY_PAY'\n";

				globalMap.put("tPostgresqlInput_26_QUERY",
						dbquery_tPostgresqlInput_26);
				java.sql.ResultSet rs_tPostgresqlInput_26 = null;
				try {
					rs_tPostgresqlInput_26 = stmt_tPostgresqlInput_26
							.executeQuery(dbquery_tPostgresqlInput_26);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_26 = rs_tPostgresqlInput_26
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_26 = rsmd_tPostgresqlInput_26
							.getColumnCount();

					String tmpContent_tPostgresqlInput_26 = null;

					while (rs_tPostgresqlInput_26.next()) {
						nb_line_tPostgresqlInput_26++;

						if (colQtyInRs_tPostgresqlInput_26 < 1) {
							row30.id_application = 0;
						} else {

							if (rs_tPostgresqlInput_26.getObject(1) != null) {
								row30.id_application = rs_tPostgresqlInput_26
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tPostgresqlInput_26 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_26 main ] start
						 */

						currentComponent = "tPostgresqlInput_26";

						tos_count_tPostgresqlInput_26++;

						/**
						 * [tPostgresqlInput_26 main ] stop
						 */

						/**
						 * [tAdvancedHash_row30 main ] start
						 */

						currentComponent = "tAdvancedHash_row30";

						row30Struct row30_HashRow = new row30Struct();

						row30_HashRow.id_application = row30.id_application;

						tHash_Lookup_row30.put(row30_HashRow);

						tos_count_tAdvancedHash_row30++;

						/**
						 * [tAdvancedHash_row30 main ] stop
						 */

						/**
						 * [tPostgresqlInput_26 end ] start
						 */

						currentComponent = "tPostgresqlInput_26";

					}
				} finally {
					stmt_tPostgresqlInput_26.close();

				}
				globalMap.put("tPostgresqlInput_26_NB_LINE",
						nb_line_tPostgresqlInput_26);

				ok_Hash.put("tPostgresqlInput_26", true);
				end_Hash.put("tPostgresqlInput_26", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_26",
						end_Hash.get("tPostgresqlInput_26")
								- start_Hash.get("tPostgresqlInput_26"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_26 end ] stop
				 */

				/**
				 * [tAdvancedHash_row30 end ] start
				 */

				currentComponent = "tAdvancedHash_row30";

				tHash_Lookup_row30.endPut();

				ok_Hash.put("tAdvancedHash_row30", true);
				end_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row30 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_26 finally ] start
				 */

				currentComponent = "tPostgresqlInput_26";

				/**
				 * [tPostgresqlInput_26 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row30 finally ] start
				 */

				currentComponent = "tAdvancedHash_row30";

				/**
				 * [tAdvancedHash_row30 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_26_SUBPROCESS_STATE", 1);
	}

	public static class row31Struct implements
			routines.system.IPersistableRow<row31Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public long id_tenant;

		public long getId_tenant() {
			return this.id_tenant;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.id_tenant = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id_tenant);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_tenant=" + String.valueOf(id_tenant));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_27Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_27_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row31Struct row31 = new row31Struct();

				/**
				 * [tAdvancedHash_row31 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row31", false);
				start_Hash.put("tAdvancedHash_row31",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row31";

				int tos_count_tAdvancedHash_row31 = 0;

				// connection name:row31
				// source node:tPostgresqlInput_27 -
				// inputs:(after_tPostgresqlInput_3) outputs:(row31,row31) |
				// target node:tAdvancedHash_row31 - inputs:(row31) outputs:()
				// linked node: tMap_23 - inputs:(row25,row26,row30,row31,row22)
				// outputs:(SUPER_ADMIN_MYPAY)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row31 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row31Struct> getLookup(matchingModeEnum_row31);

				globalMap.put("tHash_Lookup_row31", tHash_Lookup_row31);

				/**
				 * [tAdvancedHash_row31 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_27 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_27", false);
				start_Hash.put("tPostgresqlInput_27",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_27");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_27";

				int tos_count_tPostgresqlInput_27 = 0;

				int nb_line_tPostgresqlInput_27 = 0;
				java.sql.Connection conn_tPostgresqlInput_27 = null;
				conn_tPostgresqlInput_27 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");

				java.sql.Statement stmt_tPostgresqlInput_27 = conn_tPostgresqlInput_27
						.createStatement();

				String dbquery_tPostgresqlInput_27 = "SELECT \n  \"tenant\".\"id_tenant\"\nFROM \"tenant\"\nWHERE tenant_code = 'R_VENETO'\n";

				globalMap.put("tPostgresqlInput_27_QUERY",
						dbquery_tPostgresqlInput_27);
				java.sql.ResultSet rs_tPostgresqlInput_27 = null;
				try {
					rs_tPostgresqlInput_27 = stmt_tPostgresqlInput_27
							.executeQuery(dbquery_tPostgresqlInput_27);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_27 = rs_tPostgresqlInput_27
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_27 = rsmd_tPostgresqlInput_27
							.getColumnCount();

					String tmpContent_tPostgresqlInput_27 = null;

					while (rs_tPostgresqlInput_27.next()) {
						nb_line_tPostgresqlInput_27++;

						if (colQtyInRs_tPostgresqlInput_27 < 1) {
							row31.id_tenant = 0;
						} else {

							if (rs_tPostgresqlInput_27.getObject(1) != null) {
								row31.id_tenant = rs_tPostgresqlInput_27
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tPostgresqlInput_27 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_27 main ] start
						 */

						currentComponent = "tPostgresqlInput_27";

						tos_count_tPostgresqlInput_27++;

						/**
						 * [tPostgresqlInput_27 main ] stop
						 */

						/**
						 * [tAdvancedHash_row31 main ] start
						 */

						currentComponent = "tAdvancedHash_row31";

						row31Struct row31_HashRow = new row31Struct();

						row31_HashRow.id_tenant = row31.id_tenant;

						tHash_Lookup_row31.put(row31_HashRow);

						tos_count_tAdvancedHash_row31++;

						/**
						 * [tAdvancedHash_row31 main ] stop
						 */

						/**
						 * [tPostgresqlInput_27 end ] start
						 */

						currentComponent = "tPostgresqlInput_27";

					}
				} finally {
					stmt_tPostgresqlInput_27.close();

				}
				globalMap.put("tPostgresqlInput_27_NB_LINE",
						nb_line_tPostgresqlInput_27);

				ok_Hash.put("tPostgresqlInput_27", true);
				end_Hash.put("tPostgresqlInput_27", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_27",
						end_Hash.get("tPostgresqlInput_27")
								- start_Hash.get("tPostgresqlInput_27"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_27 end ] stop
				 */

				/**
				 * [tAdvancedHash_row31 end ] start
				 */

				currentComponent = "tAdvancedHash_row31";

				tHash_Lookup_row31.endPut();

				ok_Hash.put("tAdvancedHash_row31", true);
				end_Hash.put("tAdvancedHash_row31", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row31 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_27 finally ] start
				 */

				currentComponent = "tPostgresqlInput_27";

				/**
				 * [tPostgresqlInput_27 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row31 finally ] start
				 */

				currentComponent = "tAdvancedHash_row31";

				/**
				 * [tAdvancedHash_row31 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_27_SUBPROCESS_STATE", 1);
	}

	public static class row22Struct implements
			routines.system.IPersistableComparableLookupRow<row22Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id_user;

		public long getId_user() {
			return this.id_user;
		}

		public String user_code;

		public String getUser_code() {
			return this.user_code;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.user_code == null) ? 0 : this.user_code
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row22Struct other = (row22Struct) obj;

			if (this.user_code == null) {
				if (other.user_code != null)
					return false;

			} else if (!this.user_code.equals(other.user_code))

				return false;

			return true;
		}

		public void copyDataTo(row22Struct other) {

			other.id_user = this.id_user;
			other.user_code = this.user_code;

		}

		public void copyKeysDataTo(row22Struct other) {

			other.user_code = this.user_code;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.user_code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.user_code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_user = dis.readLong();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.id_user);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_user=" + String.valueOf(id_user));
			sb.append(",user_code=" + user_code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.user_code, other.user_code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row22Struct row22 = new row22Struct();

				/**
				 * [tAdvancedHash_row22 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row22", false);
				start_Hash.put("tAdvancedHash_row22",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row22";

				int tos_count_tAdvancedHash_row22 = 0;

				// connection name:row22
				// source node:tPostgresqlInput_1 -
				// inputs:(after_tPostgresqlInput_3) outputs:(row22,row22) |
				// target node:tAdvancedHash_row22 - inputs:(row22) outputs:()
				// linked node: tMap_23 - inputs:(row25,row26,row30,row31,row22)
				// outputs:(SUPER_ADMIN_MYPAY)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row22Struct> getLookup(matchingModeEnum_row22);

				globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);

				/**
				 * [tAdvancedHash_row22 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_1", false);
				start_Hash
						.put("tPostgresqlInput_1", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_1";

				int tos_count_tPostgresqlInput_1 = 0;

				int nb_line_tPostgresqlInput_1 = 0;
				java.sql.Connection conn_tPostgresqlInput_1 = null;
				conn_tPostgresqlInput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");

				java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1
						.createStatement();

				String dbquery_tPostgresqlInput_1 = "SELECT \n  \"user\".\"id_user\",\n  \"user\".\"user_code\"\nFROM \"user\"";

				globalMap.put("tPostgresqlInput_1_QUERY",
						dbquery_tPostgresqlInput_1);
				java.sql.ResultSet rs_tPostgresqlInput_1 = null;
				try {
					rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1
							.executeQuery(dbquery_tPostgresqlInput_1);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1
							.getColumnCount();

					String tmpContent_tPostgresqlInput_1 = null;

					while (rs_tPostgresqlInput_1.next()) {
						nb_line_tPostgresqlInput_1++;

						if (colQtyInRs_tPostgresqlInput_1 < 1) {
							row22.id_user = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(1) != null) {
								row22.id_user = rs_tPostgresqlInput_1
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 2) {
							row22.user_code = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(2);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row22.user_code = tmpContent_tPostgresqlInput_1;
							} else {
								row22.user_code = null;
							}
						}

						/**
						 * [tPostgresqlInput_1 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_1 main ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						tos_count_tPostgresqlInput_1++;

						/**
						 * [tPostgresqlInput_1 main ] stop
						 */

						/**
						 * [tAdvancedHash_row22 main ] start
						 */

						currentComponent = "tAdvancedHash_row22";

						row22Struct row22_HashRow = new row22Struct();

						row22_HashRow.id_user = row22.id_user;

						row22_HashRow.user_code = row22.user_code;

						tHash_Lookup_row22.put(row22_HashRow);

						tos_count_tAdvancedHash_row22++;

						/**
						 * [tAdvancedHash_row22 main ] stop
						 */

						/**
						 * [tPostgresqlInput_1 end ] start
						 */

						currentComponent = "tPostgresqlInput_1";

					}
				} finally {
					stmt_tPostgresqlInput_1.close();

				}
				globalMap.put("tPostgresqlInput_1_NB_LINE",
						nb_line_tPostgresqlInput_1);

				ok_Hash.put("tPostgresqlInput_1", true);
				end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row22 end ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				tHash_Lookup_row22.endPut();

				ok_Hash.put("tAdvancedHash_row22", true);
				end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row22 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_1 finally ] start
				 */

				currentComponent = "tPostgresqlInput_1";

				/**
				 * [tPostgresqlInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row22 finally ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				/**
				 * [tAdvancedHash_row22 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements
			routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_utente_id;

		public long getMygov_utente_id() {
			return this.mygov_utente_id;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		public String cod_fed_user_id;

		public String getCod_fed_user_id() {
			return this.cod_fed_user_id;
		}

		public String cod_codice_fiscale_utente;

		public String getCod_codice_fiscale_utente() {
			return this.cod_codice_fiscale_utente;
		}

		public boolean flg_fed_authorized;

		public boolean getFlg_fed_authorized() {
			return this.flg_fed_authorized;
		}

		public String de_email_address;

		public String getDe_email_address() {
			return this.de_email_address;
		}

		public String de_firstname;

		public String getDe_firstname() {
			return this.de_firstname;
		}

		public String de_lastname;

		public String getDe_lastname() {
			return this.de_lastname;
		}

		public String de_fed_legal_entity;

		public String getDe_fed_legal_entity() {
			return this.de_fed_legal_entity;
		}

		public java.util.Date dt_ultimo_login;

		public java.util.Date getDt_ultimo_login() {
			return this.dt_ultimo_login;
		}

		public String indirizzo;

		public String getIndirizzo() {
			return this.indirizzo;
		}

		public String civico;

		public String getCivico() {
			return this.civico;
		}

		public String cap;

		public String getCap() {
			return this.cap;
		}

		public Long comune_id;

		public Long getComune_id() {
			return this.comune_id;
		}

		public Long provincia_id;

		public Long getProvincia_id() {
			return this.provincia_id;
		}

		public Long nazione_id;

		public Long getNazione_id() {
			return this.nazione_id;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.cod_fed_user_id == null) ? 0
								: this.cod_fed_user_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.cod_fed_user_id == null) {
				if (other.cod_fed_user_id != null)
					return false;

			} else if (!this.cod_fed_user_id.equals(other.cod_fed_user_id))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.mygov_utente_id = this.mygov_utente_id;
			other.version = this.version;
			other.cod_fed_user_id = this.cod_fed_user_id;
			other.cod_codice_fiscale_utente = this.cod_codice_fiscale_utente;
			other.flg_fed_authorized = this.flg_fed_authorized;
			other.de_email_address = this.de_email_address;
			other.de_firstname = this.de_firstname;
			other.de_lastname = this.de_lastname;
			other.de_fed_legal_entity = this.de_fed_legal_entity;
			other.dt_ultimo_login = this.dt_ultimo_login;
			other.indirizzo = this.indirizzo;
			other.civico = this.civico;
			other.cap = this.cap;
			other.comune_id = this.comune_id;
			other.provincia_id = this.provincia_id;
			other.nazione_id = this.nazione_id;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.cod_fed_user_id = this.cod_fed_user_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.cod_fed_user_id = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.cod_fed_user_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.mygov_utente_id = dis.readLong();

				this.version = dis.readInt();

				this.cod_codice_fiscale_utente = readString(dis, ois);

				this.flg_fed_authorized = dis.readBoolean();

				this.de_email_address = readString(dis, ois);

				this.de_firstname = readString(dis, ois);

				this.de_lastname = readString(dis, ois);

				this.de_fed_legal_entity = readString(dis, ois);

				this.dt_ultimo_login = readDate(dis, ois);

				this.indirizzo = readString(dis, ois);

				this.civico = readString(dis, ois);

				this.cap = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.comune_id = null;
				} else {
					this.comune_id = dis.readLong();
				}

				length = dis.readByte();
				if (length == -1) {
					this.provincia_id = null;
				} else {
					this.provincia_id = dis.readLong();
				}

				length = dis.readByte();
				if (length == -1) {
					this.nazione_id = null;
				} else {
					this.nazione_id = dis.readLong();
				}

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.mygov_utente_id);

				dos.writeInt(this.version);

				writeString(this.cod_codice_fiscale_utente, dos, oos);

				dos.writeBoolean(this.flg_fed_authorized);

				writeString(this.de_email_address, dos, oos);

				writeString(this.de_firstname, dos, oos);

				writeString(this.de_lastname, dos, oos);

				writeString(this.de_fed_legal_entity, dos, oos);

				writeDate(this.dt_ultimo_login, dos, oos);

				writeString(this.indirizzo, dos, oos);

				writeString(this.civico, dos, oos);

				writeString(this.cap, dos, oos);

				if (this.comune_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.comune_id);
				}

				if (this.provincia_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.provincia_id);
				}

				if (this.nazione_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.nazione_id);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_utente_id=" + String.valueOf(mygov_utente_id));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",cod_fed_user_id=" + cod_fed_user_id);
			sb.append(",cod_codice_fiscale_utente=" + cod_codice_fiscale_utente);
			sb.append(",flg_fed_authorized="
					+ String.valueOf(flg_fed_authorized));
			sb.append(",de_email_address=" + de_email_address);
			sb.append(",de_firstname=" + de_firstname);
			sb.append(",de_lastname=" + de_lastname);
			sb.append(",de_fed_legal_entity=" + de_fed_legal_entity);
			sb.append(",dt_ultimo_login=" + String.valueOf(dt_ultimo_login));
			sb.append(",indirizzo=" + indirizzo);
			sb.append(",civico=" + civico);
			sb.append(",cap=" + cap);
			sb.append(",comune_id=" + String.valueOf(comune_id));
			sb.append(",provincia_id=" + String.valueOf(provincia_id));
			sb.append(",nazione_id=" + String.valueOf(nazione_id));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.cod_fed_user_id,
					other.cod_fed_user_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash
						.put("tAdvancedHash_row6", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row6";

				int tos_count_tAdvancedHash_row6 = 0;

				// connection name:row6
				// source node:tPostgresqlInput_5 -
				// inputs:(after_tPostgresqlInput_4) outputs:(row6,row6) |
				// target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
				// linked node: tMap_5 - inputs:(row5,row6,row7)
				// outputs:(USER_TENANT)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct> getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_5 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_5", false);
				start_Hash
						.put("tPostgresqlInput_5", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_5");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_5";

				int tos_count_tPostgresqlInput_5 = 0;

				int nb_line_tPostgresqlInput_5 = 0;
				java.sql.Connection conn_tPostgresqlInput_5 = null;
				conn_tPostgresqlInput_5 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_5 = conn_tPostgresqlInput_5
						.createStatement();

				String dbquery_tPostgresqlInput_5 = "SELECT \n  \"mygov_utente\".\"mygov_utente_id\", \n  \"mygov_utente\".\"version\", \n  \"mygov_utente\".\"cod_fed_user_id\", \n  \"mygov_utente\".\"cod_codice_fiscale_utente\", \n  \"mygov_utente\".\"flg_fed_authorized\", \n  \"mygov_utente\".\"de_email_address\", \n  \"mygov_utente\".\"de_firstname\", \n  \"mygov_utente\".\"de_lastname\", \n  \"mygov_utente\".\"de_fed_legal_entity\", \n  \"mygov_utente\".\"dt_ultimo_login\", \n  \"mygov_utente\".\"indirizzo\", \n  \"mygov_utente\".\"civico\", \n  \"mygov_utente\".\"cap\", \n  \"mygov_utente\".\"comune_id\", \n  \"mygov_utente\".\"provincia_id\", \n  \"mygov_utente\".\"nazione_id\"\nFROM \"mygov_utente\"";

				globalMap.put("tPostgresqlInput_5_QUERY",
						dbquery_tPostgresqlInput_5);
				java.sql.ResultSet rs_tPostgresqlInput_5 = null;
				try {
					rs_tPostgresqlInput_5 = stmt_tPostgresqlInput_5
							.executeQuery(dbquery_tPostgresqlInput_5);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_5 = rs_tPostgresqlInput_5
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_5 = rsmd_tPostgresqlInput_5
							.getColumnCount();

					String tmpContent_tPostgresqlInput_5 = null;

					while (rs_tPostgresqlInput_5.next()) {
						nb_line_tPostgresqlInput_5++;

						if (colQtyInRs_tPostgresqlInput_5 < 1) {
							row6.mygov_utente_id = 0;
						} else {

							if (rs_tPostgresqlInput_5.getObject(1) != null) {
								row6.mygov_utente_id = rs_tPostgresqlInput_5
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 2) {
							row6.version = 0;
						} else {

							if (rs_tPostgresqlInput_5.getObject(2) != null) {
								row6.version = rs_tPostgresqlInput_5.getInt(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 3) {
							row6.cod_fed_user_id = null;
						} else {

							tmpContent_tPostgresqlInput_5 = rs_tPostgresqlInput_5
									.getString(3);
							if (tmpContent_tPostgresqlInput_5 != null) {
								row6.cod_fed_user_id = tmpContent_tPostgresqlInput_5
										.trim();
							} else {
								row6.cod_fed_user_id = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 4) {
							row6.cod_codice_fiscale_utente = null;
						} else {

							tmpContent_tPostgresqlInput_5 = rs_tPostgresqlInput_5
									.getString(4);
							if (tmpContent_tPostgresqlInput_5 != null) {
								row6.cod_codice_fiscale_utente = tmpContent_tPostgresqlInput_5
										.trim();
							} else {
								row6.cod_codice_fiscale_utente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 5) {
							row6.flg_fed_authorized = false;
						} else {

							if (rs_tPostgresqlInput_5.getObject(5) != null) {
								row6.flg_fed_authorized = rs_tPostgresqlInput_5
										.getBoolean(5);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 6) {
							row6.de_email_address = null;
						} else {

							tmpContent_tPostgresqlInput_5 = rs_tPostgresqlInput_5
									.getString(6);
							if (tmpContent_tPostgresqlInput_5 != null) {
								row6.de_email_address = tmpContent_tPostgresqlInput_5
										.trim();
							} else {
								row6.de_email_address = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 7) {
							row6.de_firstname = null;
						} else {

							tmpContent_tPostgresqlInput_5 = rs_tPostgresqlInput_5
									.getString(7);
							if (tmpContent_tPostgresqlInput_5 != null) {
								row6.de_firstname = tmpContent_tPostgresqlInput_5
										.trim();
							} else {
								row6.de_firstname = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 8) {
							row6.de_lastname = null;
						} else {

							tmpContent_tPostgresqlInput_5 = rs_tPostgresqlInput_5
									.getString(8);
							if (tmpContent_tPostgresqlInput_5 != null) {
								row6.de_lastname = tmpContent_tPostgresqlInput_5
										.trim();
							} else {
								row6.de_lastname = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 9) {
							row6.de_fed_legal_entity = null;
						} else {

							tmpContent_tPostgresqlInput_5 = rs_tPostgresqlInput_5
									.getString(9);
							if (tmpContent_tPostgresqlInput_5 != null) {
								row6.de_fed_legal_entity = tmpContent_tPostgresqlInput_5
										.trim();
							} else {
								row6.de_fed_legal_entity = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 10) {
							row6.dt_ultimo_login = null;
						} else {

							if (rs_tPostgresqlInput_5.getTimestamp(10) != null) {
								row6.dt_ultimo_login = new java.util.Date(
										rs_tPostgresqlInput_5.getTimestamp(10)
												.getTime());
							} else {
								row6.dt_ultimo_login = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 11) {
							row6.indirizzo = null;
						} else {

							tmpContent_tPostgresqlInput_5 = rs_tPostgresqlInput_5
									.getString(11);
							if (tmpContent_tPostgresqlInput_5 != null) {
								row6.indirizzo = tmpContent_tPostgresqlInput_5
										.trim();
							} else {
								row6.indirizzo = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 12) {
							row6.civico = null;
						} else {

							tmpContent_tPostgresqlInput_5 = rs_tPostgresqlInput_5
									.getString(12);
							if (tmpContent_tPostgresqlInput_5 != null) {
								row6.civico = tmpContent_tPostgresqlInput_5
										.trim();
							} else {
								row6.civico = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 13) {
							row6.cap = null;
						} else {

							tmpContent_tPostgresqlInput_5 = rs_tPostgresqlInput_5
									.getString(13);
							if (tmpContent_tPostgresqlInput_5 != null) {
								row6.cap = tmpContent_tPostgresqlInput_5.trim();
							} else {
								row6.cap = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 14) {
							row6.comune_id = null;
						} else {

							if (rs_tPostgresqlInput_5.getObject(14) != null) {
								row6.comune_id = rs_tPostgresqlInput_5
										.getLong(14);
							} else {
								row6.comune_id = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 15) {
							row6.provincia_id = null;
						} else {

							if (rs_tPostgresqlInput_5.getObject(15) != null) {
								row6.provincia_id = rs_tPostgresqlInput_5
										.getLong(15);
							} else {
								row6.provincia_id = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_5 < 16) {
							row6.nazione_id = null;
						} else {

							if (rs_tPostgresqlInput_5.getObject(16) != null) {
								row6.nazione_id = rs_tPostgresqlInput_5
										.getLong(16);
							} else {
								row6.nazione_id = null;
							}
						}

						/**
						 * [tPostgresqlInput_5 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_5 main ] start
						 */

						currentComponent = "tPostgresqlInput_5";

						tos_count_tPostgresqlInput_5++;

						/**
						 * [tPostgresqlInput_5 main ] stop
						 */

						/**
						 * [tAdvancedHash_row6 main ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						row6Struct row6_HashRow = new row6Struct();

						row6_HashRow.mygov_utente_id = row6.mygov_utente_id;

						row6_HashRow.version = row6.version;

						row6_HashRow.cod_fed_user_id = row6.cod_fed_user_id;

						row6_HashRow.cod_codice_fiscale_utente = row6.cod_codice_fiscale_utente;

						row6_HashRow.flg_fed_authorized = row6.flg_fed_authorized;

						row6_HashRow.de_email_address = row6.de_email_address;

						row6_HashRow.de_firstname = row6.de_firstname;

						row6_HashRow.de_lastname = row6.de_lastname;

						row6_HashRow.de_fed_legal_entity = row6.de_fed_legal_entity;

						row6_HashRow.dt_ultimo_login = row6.dt_ultimo_login;

						row6_HashRow.indirizzo = row6.indirizzo;

						row6_HashRow.civico = row6.civico;

						row6_HashRow.cap = row6.cap;

						row6_HashRow.comune_id = row6.comune_id;

						row6_HashRow.provincia_id = row6.provincia_id;

						row6_HashRow.nazione_id = row6.nazione_id;

						tHash_Lookup_row6.put(row6_HashRow);

						tos_count_tAdvancedHash_row6++;

						/**
						 * [tAdvancedHash_row6 main ] stop
						 */

						/**
						 * [tPostgresqlInput_5 end ] start
						 */

						currentComponent = "tPostgresqlInput_5";

					}
				} finally {
					stmt_tPostgresqlInput_5.close();

				}
				globalMap.put("tPostgresqlInput_5_NB_LINE",
						nb_line_tPostgresqlInput_5);

				ok_Hash.put("tPostgresqlInput_5", true);
				end_Hash.put("tPostgresqlInput_5", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_5",
						end_Hash.get("tPostgresqlInput_5")
								- start_Hash.get("tPostgresqlInput_5"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_5 finally ] start
				 */

				currentComponent = "tPostgresqlInput_5";

				/**
				 * [tPostgresqlInput_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row6 finally ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				/**
				 * [tAdvancedHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements
			routines.system.IPersistableComparableLookupRow<row7Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id_tenant;

		public long getId_tenant() {
			return this.id_tenant;
		}

		public String tenant_code;

		public String getTenant_code() {
			return this.tenant_code;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.tenant_code == null) ? 0 : this.tenant_code
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.tenant_code == null) {
				if (other.tenant_code != null)
					return false;

			} else if (!this.tenant_code.equals(other.tenant_code))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.id_tenant = this.id_tenant;
			other.tenant_code = this.tenant_code;
			other.description = this.description;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.tenant_code = this.tenant_code;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.tenant_code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.tenant_code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_tenant = dis.readLong();

				this.description = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.id_tenant);

				writeString(this.description, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_tenant=" + String.valueOf(id_tenant));
			sb.append(",tenant_code=" + tenant_code);
			sb.append(",description=" + description);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.tenant_code,
					other.tenant_code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_6Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tAdvancedHash_row7 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row7", false);
				start_Hash
						.put("tAdvancedHash_row7", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row7";

				int tos_count_tAdvancedHash_row7 = 0;

				// connection name:row7
				// source node:tPostgresqlInput_6 -
				// inputs:(after_tPostgresqlInput_4) outputs:(row7,row7) |
				// target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
				// linked node: tMap_5 - inputs:(row5,row6,row7)
				// outputs:(USER_TENANT)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row7Struct> getLookup(matchingModeEnum_row7);

				globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);

				/**
				 * [tAdvancedHash_row7 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_6 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_6", false);
				start_Hash
						.put("tPostgresqlInput_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_6");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_6";

				int tos_count_tPostgresqlInput_6 = 0;

				int nb_line_tPostgresqlInput_6 = 0;
				java.sql.Connection conn_tPostgresqlInput_6 = null;
				conn_tPostgresqlInput_6 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");

				java.sql.Statement stmt_tPostgresqlInput_6 = conn_tPostgresqlInput_6
						.createStatement();

				String dbquery_tPostgresqlInput_6 = "SELECT \n  \"tenant\".\"id_tenant\",\n  \"tenant\".\"tenant_code\",\n  \"tenant\".\"description\"\nFROM \"tenant\"";

				globalMap.put("tPostgresqlInput_6_QUERY",
						dbquery_tPostgresqlInput_6);
				java.sql.ResultSet rs_tPostgresqlInput_6 = null;
				try {
					rs_tPostgresqlInput_6 = stmt_tPostgresqlInput_6
							.executeQuery(dbquery_tPostgresqlInput_6);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_6 = rs_tPostgresqlInput_6
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_6 = rsmd_tPostgresqlInput_6
							.getColumnCount();

					String tmpContent_tPostgresqlInput_6 = null;

					while (rs_tPostgresqlInput_6.next()) {
						nb_line_tPostgresqlInput_6++;

						if (colQtyInRs_tPostgresqlInput_6 < 1) {
							row7.id_tenant = 0;
						} else {

							if (rs_tPostgresqlInput_6.getObject(1) != null) {
								row7.id_tenant = rs_tPostgresqlInput_6
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_6 < 2) {
							row7.tenant_code = null;
						} else {

							tmpContent_tPostgresqlInput_6 = rs_tPostgresqlInput_6
									.getString(2);
							if (tmpContent_tPostgresqlInput_6 != null) {
								row7.tenant_code = tmpContent_tPostgresqlInput_6
										.trim();
							} else {
								row7.tenant_code = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_6 < 3) {
							row7.description = null;
						} else {

							tmpContent_tPostgresqlInput_6 = rs_tPostgresqlInput_6
									.getString(3);
							if (tmpContent_tPostgresqlInput_6 != null) {
								row7.description = tmpContent_tPostgresqlInput_6
										.trim();
							} else {
								row7.description = null;
							}
						}

						/**
						 * [tPostgresqlInput_6 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_6 main ] start
						 */

						currentComponent = "tPostgresqlInput_6";

						tos_count_tPostgresqlInput_6++;

						/**
						 * [tPostgresqlInput_6 main ] stop
						 */

						/**
						 * [tAdvancedHash_row7 main ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						row7Struct row7_HashRow = new row7Struct();

						row7_HashRow.id_tenant = row7.id_tenant;

						row7_HashRow.tenant_code = row7.tenant_code;

						row7_HashRow.description = row7.description;

						tHash_Lookup_row7.put(row7_HashRow);

						tos_count_tAdvancedHash_row7++;

						/**
						 * [tAdvancedHash_row7 main ] stop
						 */

						/**
						 * [tPostgresqlInput_6 end ] start
						 */

						currentComponent = "tPostgresqlInput_6";

					}
				} finally {
					stmt_tPostgresqlInput_6.close();

				}
				globalMap.put("tPostgresqlInput_6_NB_LINE",
						nb_line_tPostgresqlInput_6);

				ok_Hash.put("tPostgresqlInput_6", true);
				end_Hash.put("tPostgresqlInput_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_6",
						end_Hash.get("tPostgresqlInput_6")
								- start_Hash.get("tPostgresqlInput_6"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row7 end ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				tHash_Lookup_row7.endPut();

				ok_Hash.put("tAdvancedHash_row7", true);
				end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row7 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_6 finally ] start
				 */

				currentComponent = "tPostgresqlInput_6";

				/**
				 * [tPostgresqlInput_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row7 finally ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				/**
				 * [tAdvancedHash_row7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableComparableLookupRow<row8Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long comune_id;

		public long getComune_id() {
			return this.comune_id;
		}

		public String comune;

		public String getComune() {
			return this.comune;
		}

		public String sigla_provincia;

		public String getSigla_provincia() {
			return this.sigla_provincia;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.comune_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.comune_id != other.comune_id)
				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.comune_id = this.comune_id;
			other.comune = this.comune;
			other.sigla_provincia = this.sigla_provincia;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.comune_id = this.comune_id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.comune_id = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.comune_id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.comune = readString(dis, ois);

				this.sigla_provincia = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.comune, dos, oos);

				writeString(this.sigla_provincia, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("comune_id=" + String.valueOf(comune_id));
			sb.append(",comune=" + comune);
			sb.append(",sigla_provincia=" + sigla_provincia);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.comune_id, other.comune_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_7Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tAdvancedHash_row8 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row8", false);
				start_Hash
						.put("tAdvancedHash_row8", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row8";

				int tos_count_tAdvancedHash_row8 = 0;

				// connection name:row8
				// source node:tPostgresqlInput_7 -
				// inputs:(after_tPostgresqlInput_4) outputs:(row8,row8) |
				// target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
				// linked node: tMap_6 - inputs:(USER_TENANT,row8)
				// outputs:(USER_MYPIVOT)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row8Struct> getLookup(matchingModeEnum_row8);

				globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);

				/**
				 * [tAdvancedHash_row8 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_7 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_7", false);
				start_Hash
						.put("tPostgresqlInput_7", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_7";

				int tos_count_tPostgresqlInput_7 = 0;

				int nb_line_tPostgresqlInput_7 = 0;
				java.sql.Connection conn_tPostgresqlInput_7 = null;
				conn_tPostgresqlInput_7 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_7 = conn_tPostgresqlInput_7
						.createStatement();

				String dbquery_tPostgresqlInput_7 = "SELECT \n  \"mygov_comune\".\"comune_id\", \n  \"mygov_comune\".\"comune\", \n  \"mygov_comune\".\"sigla_provincia\"\nFROM \"mygov_comune\"";

				globalMap.put("tPostgresqlInput_7_QUERY",
						dbquery_tPostgresqlInput_7);
				java.sql.ResultSet rs_tPostgresqlInput_7 = null;
				try {
					rs_tPostgresqlInput_7 = stmt_tPostgresqlInput_7
							.executeQuery(dbquery_tPostgresqlInput_7);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_7 = rs_tPostgresqlInput_7
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_7 = rsmd_tPostgresqlInput_7
							.getColumnCount();

					String tmpContent_tPostgresqlInput_7 = null;

					while (rs_tPostgresqlInput_7.next()) {
						nb_line_tPostgresqlInput_7++;

						if (colQtyInRs_tPostgresqlInput_7 < 1) {
							row8.comune_id = 0;
						} else {

							if (rs_tPostgresqlInput_7.getObject(1) != null) {
								row8.comune_id = rs_tPostgresqlInput_7
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_7 < 2) {
							row8.comune = null;
						} else {

							tmpContent_tPostgresqlInput_7 = rs_tPostgresqlInput_7
									.getString(2);
							if (tmpContent_tPostgresqlInput_7 != null) {
								row8.comune = tmpContent_tPostgresqlInput_7;
							} else {
								row8.comune = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_7 < 3) {
							row8.sigla_provincia = null;
						} else {

							tmpContent_tPostgresqlInput_7 = rs_tPostgresqlInput_7
									.getString(3);
							if (tmpContent_tPostgresqlInput_7 != null) {
								row8.sigla_provincia = tmpContent_tPostgresqlInput_7;
							} else {
								row8.sigla_provincia = null;
							}
						}

						/**
						 * [tPostgresqlInput_7 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_7 main ] start
						 */

						currentComponent = "tPostgresqlInput_7";

						tos_count_tPostgresqlInput_7++;

						/**
						 * [tPostgresqlInput_7 main ] stop
						 */

						/**
						 * [tAdvancedHash_row8 main ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						row8Struct row8_HashRow = new row8Struct();

						row8_HashRow.comune_id = row8.comune_id;

						row8_HashRow.comune = row8.comune;

						row8_HashRow.sigla_provincia = row8.sigla_provincia;

						tHash_Lookup_row8.put(row8_HashRow);

						tos_count_tAdvancedHash_row8++;

						/**
						 * [tAdvancedHash_row8 main ] stop
						 */

						/**
						 * [tPostgresqlInput_7 end ] start
						 */

						currentComponent = "tPostgresqlInput_7";

					}
				} finally {
					stmt_tPostgresqlInput_7.close();

				}
				globalMap.put("tPostgresqlInput_7_NB_LINE",
						nb_line_tPostgresqlInput_7);

				ok_Hash.put("tPostgresqlInput_7", true);
				end_Hash.put("tPostgresqlInput_7", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_row8 end ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				tHash_Lookup_row8.endPut();

				ok_Hash.put("tAdvancedHash_row8", true);
				end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_7 finally ] start
				 */

				currentComponent = "tPostgresqlInput_7";

				/**
				 * [tPostgresqlInput_7 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row8 finally ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				/**
				 * [tAdvancedHash_row8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row13Struct implements
			routines.system.IPersistableComparableLookupRow<row13Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id_tenant;

		public long getId_tenant() {
			return this.id_tenant;
		}

		public String tenant_code;

		public String getTenant_code() {
			return this.tenant_code;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.tenant_code == null) ? 0 : this.tenant_code
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row13Struct other = (row13Struct) obj;

			if (this.tenant_code == null) {
				if (other.tenant_code != null)
					return false;

			} else if (!this.tenant_code.equals(other.tenant_code))

				return false;

			return true;
		}

		public void copyDataTo(row13Struct other) {

			other.id_tenant = this.id_tenant;
			other.tenant_code = this.tenant_code;

		}

		public void copyKeysDataTo(row13Struct other) {

			other.tenant_code = this.tenant_code;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.tenant_code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.tenant_code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_tenant = dis.readLong();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.id_tenant);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_tenant=" + String.valueOf(id_tenant));
			sb.append(",tenant_code=" + tenant_code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.tenant_code,
					other.tenant_code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_10Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();

				/**
				 * [tAdvancedHash_row13 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row13", false);
				start_Hash.put("tAdvancedHash_row13",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row13";

				int tos_count_tAdvancedHash_row13 = 0;

				// connection name:row13
				// source node:tPostgresqlInput_10 -
				// inputs:(after_tPostgresqlInput_8) outputs:(row13,row13) |
				// target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
				// linked node: tMap_7 - inputs:(row9,row13,row14,row21,row24)
				// outputs:(USER_ROLE_MYPIVOT)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row13Struct> getLookup(matchingModeEnum_row13);

				globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);

				/**
				 * [tAdvancedHash_row13 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_10 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_10", false);
				start_Hash.put("tPostgresqlInput_10",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_10");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_10";

				int tos_count_tPostgresqlInput_10 = 0;

				int nb_line_tPostgresqlInput_10 = 0;
				java.sql.Connection conn_tPostgresqlInput_10 = null;
				conn_tPostgresqlInput_10 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");

				java.sql.Statement stmt_tPostgresqlInput_10 = conn_tPostgresqlInput_10
						.createStatement();

				String dbquery_tPostgresqlInput_10 = "SELECT \n  \"tenant\".\"id_tenant\",\n  \"tenant\".\"tenant_code\"\nFROM \"tenant\"";

				globalMap.put("tPostgresqlInput_10_QUERY",
						dbquery_tPostgresqlInput_10);
				java.sql.ResultSet rs_tPostgresqlInput_10 = null;
				try {
					rs_tPostgresqlInput_10 = stmt_tPostgresqlInput_10
							.executeQuery(dbquery_tPostgresqlInput_10);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_10 = rs_tPostgresqlInput_10
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_10 = rsmd_tPostgresqlInput_10
							.getColumnCount();

					String tmpContent_tPostgresqlInput_10 = null;

					while (rs_tPostgresqlInput_10.next()) {
						nb_line_tPostgresqlInput_10++;

						if (colQtyInRs_tPostgresqlInput_10 < 1) {
							row13.id_tenant = 0;
						} else {

							if (rs_tPostgresqlInput_10.getObject(1) != null) {
								row13.id_tenant = rs_tPostgresqlInput_10
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_10 < 2) {
							row13.tenant_code = null;
						} else {

							tmpContent_tPostgresqlInput_10 = rs_tPostgresqlInput_10
									.getString(2);
							if (tmpContent_tPostgresqlInput_10 != null) {
								row13.tenant_code = tmpContent_tPostgresqlInput_10
										.trim();
							} else {
								row13.tenant_code = null;
							}
						}

						/**
						 * [tPostgresqlInput_10 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_10 main ] start
						 */

						currentComponent = "tPostgresqlInput_10";

						tos_count_tPostgresqlInput_10++;

						/**
						 * [tPostgresqlInput_10 main ] stop
						 */

						/**
						 * [tAdvancedHash_row13 main ] start
						 */

						currentComponent = "tAdvancedHash_row13";

						row13Struct row13_HashRow = new row13Struct();

						row13_HashRow.id_tenant = row13.id_tenant;

						row13_HashRow.tenant_code = row13.tenant_code;

						tHash_Lookup_row13.put(row13_HashRow);

						tos_count_tAdvancedHash_row13++;

						/**
						 * [tAdvancedHash_row13 main ] stop
						 */

						/**
						 * [tPostgresqlInput_10 end ] start
						 */

						currentComponent = "tPostgresqlInput_10";

					}
				} finally {
					stmt_tPostgresqlInput_10.close();

				}
				globalMap.put("tPostgresqlInput_10_NB_LINE",
						nb_line_tPostgresqlInput_10);

				ok_Hash.put("tPostgresqlInput_10", true);
				end_Hash.put("tPostgresqlInput_10", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_10",
						end_Hash.get("tPostgresqlInput_10")
								- start_Hash.get("tPostgresqlInput_10"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_10 end ] stop
				 */

				/**
				 * [tAdvancedHash_row13 end ] start
				 */

				currentComponent = "tAdvancedHash_row13";

				tHash_Lookup_row13.endPut();

				ok_Hash.put("tAdvancedHash_row13", true);
				end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row13 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_10 finally ] start
				 */

				currentComponent = "tPostgresqlInput_10";

				/**
				 * [tPostgresqlInput_10 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row13 finally ] start
				 */

				currentComponent = "tAdvancedHash_row13";

				/**
				 * [tAdvancedHash_row13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_10_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements
			routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public long id_role;

		public long getId_role() {
			return this.id_role;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.id_role = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id_role);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_role=" + String.valueOf(id_role));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_17Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();

				/**
				 * [tAdvancedHash_row14 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row14", false);
				start_Hash.put("tAdvancedHash_row14",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row14";

				int tos_count_tAdvancedHash_row14 = 0;

				// connection name:row14
				// source node:tPostgresqlInput_17 -
				// inputs:(after_tPostgresqlInput_8) outputs:(row14,row14) |
				// target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
				// linked node: tMap_7 - inputs:(row9,row13,row14,row21,row24)
				// outputs:(USER_ROLE_MYPIVOT)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row14Struct> getLookup(matchingModeEnum_row14);

				globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);

				/**
				 * [tAdvancedHash_row14 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_17 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_17", false);
				start_Hash.put("tPostgresqlInput_17",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_17";

				int tos_count_tPostgresqlInput_17 = 0;

				int nb_line_tPostgresqlInput_17 = 0;
				java.sql.Connection conn_tPostgresqlInput_17 = null;
				conn_tPostgresqlInput_17 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");

				java.sql.Statement stmt_tPostgresqlInput_17 = conn_tPostgresqlInput_17
						.createStatement();

				String dbquery_tPostgresqlInput_17 = "SELECT \n  \"role\".\"id_role\"\nFROM \"role\"\nWHERE role_name = 'ROLE_ADMIN' \n          OR role_name = 'ROLE_VISUAL'\n";

				globalMap.put("tPostgresqlInput_17_QUERY",
						dbquery_tPostgresqlInput_17);
				java.sql.ResultSet rs_tPostgresqlInput_17 = null;
				try {
					rs_tPostgresqlInput_17 = stmt_tPostgresqlInput_17
							.executeQuery(dbquery_tPostgresqlInput_17);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_17 = rs_tPostgresqlInput_17
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_17 = rsmd_tPostgresqlInput_17
							.getColumnCount();

					String tmpContent_tPostgresqlInput_17 = null;

					while (rs_tPostgresqlInput_17.next()) {
						nb_line_tPostgresqlInput_17++;

						if (colQtyInRs_tPostgresqlInput_17 < 1) {
							row14.id_role = 0;
						} else {

							if (rs_tPostgresqlInput_17.getObject(1) != null) {
								row14.id_role = rs_tPostgresqlInput_17
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tPostgresqlInput_17 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_17 main ] start
						 */

						currentComponent = "tPostgresqlInput_17";

						tos_count_tPostgresqlInput_17++;

						/**
						 * [tPostgresqlInput_17 main ] stop
						 */

						/**
						 * [tAdvancedHash_row14 main ] start
						 */

						currentComponent = "tAdvancedHash_row14";

						row14Struct row14_HashRow = new row14Struct();

						row14_HashRow.id_role = row14.id_role;

						tHash_Lookup_row14.put(row14_HashRow);

						tos_count_tAdvancedHash_row14++;

						/**
						 * [tAdvancedHash_row14 main ] stop
						 */

						/**
						 * [tPostgresqlInput_17 end ] start
						 */

						currentComponent = "tPostgresqlInput_17";

					}
				} finally {
					stmt_tPostgresqlInput_17.close();

				}
				globalMap.put("tPostgresqlInput_17_NB_LINE",
						nb_line_tPostgresqlInput_17);

				ok_Hash.put("tPostgresqlInput_17", true);
				end_Hash.put("tPostgresqlInput_17", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_17 end ] stop
				 */

				/**
				 * [tAdvancedHash_row14 end ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				tHash_Lookup_row14.endPut();

				ok_Hash.put("tAdvancedHash_row14", true);
				end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row14 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_17 finally ] start
				 */

				currentComponent = "tPostgresqlInput_17";

				/**
				 * [tPostgresqlInput_17 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row14 finally ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				/**
				 * [tAdvancedHash_row14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_17_SUBPROCESS_STATE", 1);
	}

	public static class row21Struct implements
			routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public long id_application;

		public long getId_application() {
			return this.id_application;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.id_application = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id_application);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_application=" + String.valueOf(id_application));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_18Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_18_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row21Struct row21 = new row21Struct();

				/**
				 * [tAdvancedHash_row21 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row21", false);
				start_Hash.put("tAdvancedHash_row21",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row21";

				int tos_count_tAdvancedHash_row21 = 0;

				// connection name:row21
				// source node:tPostgresqlInput_18 -
				// inputs:(after_tPostgresqlInput_8) outputs:(row21,row21) |
				// target node:tAdvancedHash_row21 - inputs:(row21) outputs:()
				// linked node: tMap_7 - inputs:(row9,row13,row14,row21,row24)
				// outputs:(USER_ROLE_MYPIVOT)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row21 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row21Struct> getLookup(matchingModeEnum_row21);

				globalMap.put("tHash_Lookup_row21", tHash_Lookup_row21);

				/**
				 * [tAdvancedHash_row21 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_18 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_18", false);
				start_Hash.put("tPostgresqlInput_18",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_18");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_18";

				int tos_count_tPostgresqlInput_18 = 0;

				int nb_line_tPostgresqlInput_18 = 0;
				java.sql.Connection conn_tPostgresqlInput_18 = null;
				conn_tPostgresqlInput_18 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");

				java.sql.Statement stmt_tPostgresqlInput_18 = conn_tPostgresqlInput_18
						.createStatement();

				String dbquery_tPostgresqlInput_18 = "SELECT \n  \"application\".\"id_application\"\nFROM \"application\"\nWHERE application_code = 'MY_PIVOT'\n";

				globalMap.put("tPostgresqlInput_18_QUERY",
						dbquery_tPostgresqlInput_18);
				java.sql.ResultSet rs_tPostgresqlInput_18 = null;
				try {
					rs_tPostgresqlInput_18 = stmt_tPostgresqlInput_18
							.executeQuery(dbquery_tPostgresqlInput_18);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_18 = rs_tPostgresqlInput_18
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_18 = rsmd_tPostgresqlInput_18
							.getColumnCount();

					String tmpContent_tPostgresqlInput_18 = null;

					while (rs_tPostgresqlInput_18.next()) {
						nb_line_tPostgresqlInput_18++;

						if (colQtyInRs_tPostgresqlInput_18 < 1) {
							row21.id_application = 0;
						} else {

							if (rs_tPostgresqlInput_18.getObject(1) != null) {
								row21.id_application = rs_tPostgresqlInput_18
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						/**
						 * [tPostgresqlInput_18 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_18 main ] start
						 */

						currentComponent = "tPostgresqlInput_18";

						tos_count_tPostgresqlInput_18++;

						/**
						 * [tPostgresqlInput_18 main ] stop
						 */

						/**
						 * [tAdvancedHash_row21 main ] start
						 */

						currentComponent = "tAdvancedHash_row21";

						row21Struct row21_HashRow = new row21Struct();

						row21_HashRow.id_application = row21.id_application;

						tHash_Lookup_row21.put(row21_HashRow);

						tos_count_tAdvancedHash_row21++;

						/**
						 * [tAdvancedHash_row21 main ] stop
						 */

						/**
						 * [tPostgresqlInput_18 end ] start
						 */

						currentComponent = "tPostgresqlInput_18";

					}
				} finally {
					stmt_tPostgresqlInput_18.close();

				}
				globalMap.put("tPostgresqlInput_18_NB_LINE",
						nb_line_tPostgresqlInput_18);

				ok_Hash.put("tPostgresqlInput_18", true);
				end_Hash.put("tPostgresqlInput_18", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_18",
						end_Hash.get("tPostgresqlInput_18")
								- start_Hash.get("tPostgresqlInput_18"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_18 end ] stop
				 */

				/**
				 * [tAdvancedHash_row21 end ] start
				 */

				currentComponent = "tAdvancedHash_row21";

				tHash_Lookup_row21.endPut();

				ok_Hash.put("tAdvancedHash_row21", true);
				end_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row21 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_18 finally ] start
				 */

				currentComponent = "tPostgresqlInput_18";

				/**
				 * [tPostgresqlInput_18 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row21 finally ] start
				 */

				currentComponent = "tAdvancedHash_row21";

				/**
				 * [tAdvancedHash_row21 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_18_SUBPROCESS_STATE", 1);
	}

	public static class row24Struct implements
			routines.system.IPersistableComparableLookupRow<row24Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long id_user;

		public long getId_user() {
			return this.id_user;
		}

		public String user_code;

		public String getUser_code() {
			return this.user_code;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.user_code == null) ? 0 : this.user_code
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row24Struct other = (row24Struct) obj;

			if (this.user_code == null) {
				if (other.user_code != null)
					return false;

			} else if (!this.user_code.equals(other.user_code))

				return false;

			return true;
		}

		public void copyDataTo(row24Struct other) {

			other.id_user = this.id_user;
			other.user_code = this.user_code;

		}

		public void copyKeysDataTo(row24Struct other) {

			other.user_code = this.user_code;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.user_code = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.user_code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.id_user = dis.readLong();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.id_user);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_user=" + String.valueOf(id_user));
			sb.append(",user_code=" + user_code);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.user_code, other.user_code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_19Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_19_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row24Struct row24 = new row24Struct();

				/**
				 * [tAdvancedHash_row24 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row24", false);
				start_Hash.put("tAdvancedHash_row24",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row24";

				int tos_count_tAdvancedHash_row24 = 0;

				// connection name:row24
				// source node:tPostgresqlInput_19 -
				// inputs:(after_tPostgresqlInput_8) outputs:(row24,row24) |
				// target node:tAdvancedHash_row24 - inputs:(row24) outputs:()
				// linked node: tMap_7 - inputs:(row9,row13,row14,row21,row24)
				// outputs:(USER_ROLE_MYPIVOT)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row24 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row24Struct> getLookup(matchingModeEnum_row24);

				globalMap.put("tHash_Lookup_row24", tHash_Lookup_row24);

				/**
				 * [tAdvancedHash_row24 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_19 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_19", false);
				start_Hash.put("tPostgresqlInput_19",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_19";

				int tos_count_tPostgresqlInput_19 = 0;

				int nb_line_tPostgresqlInput_19 = 0;
				java.sql.Connection conn_tPostgresqlInput_19 = null;
				conn_tPostgresqlInput_19 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_4");

				java.sql.Statement stmt_tPostgresqlInput_19 = conn_tPostgresqlInput_19
						.createStatement();

				String dbquery_tPostgresqlInput_19 = "SELECT \n  \"user\".\"id_user\",\n  \"user\".\"user_code\"\nFROM \"user\"";

				globalMap.put("tPostgresqlInput_19_QUERY",
						dbquery_tPostgresqlInput_19);
				java.sql.ResultSet rs_tPostgresqlInput_19 = null;
				try {
					rs_tPostgresqlInput_19 = stmt_tPostgresqlInput_19
							.executeQuery(dbquery_tPostgresqlInput_19);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_19 = rs_tPostgresqlInput_19
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_19 = rsmd_tPostgresqlInput_19
							.getColumnCount();

					String tmpContent_tPostgresqlInput_19 = null;

					while (rs_tPostgresqlInput_19.next()) {
						nb_line_tPostgresqlInput_19++;

						if (colQtyInRs_tPostgresqlInput_19 < 1) {
							row24.id_user = 0;
						} else {

							if (rs_tPostgresqlInput_19.getObject(1) != null) {
								row24.id_user = rs_tPostgresqlInput_19
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_19 < 2) {
							row24.user_code = null;
						} else {

							tmpContent_tPostgresqlInput_19 = rs_tPostgresqlInput_19
									.getString(2);
							if (tmpContent_tPostgresqlInput_19 != null) {
								row24.user_code = tmpContent_tPostgresqlInput_19;
							} else {
								row24.user_code = null;
							}
						}

						/**
						 * [tPostgresqlInput_19 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_19 main ] start
						 */

						currentComponent = "tPostgresqlInput_19";

						tos_count_tPostgresqlInput_19++;

						/**
						 * [tPostgresqlInput_19 main ] stop
						 */

						/**
						 * [tAdvancedHash_row24 main ] start
						 */

						currentComponent = "tAdvancedHash_row24";

						row24Struct row24_HashRow = new row24Struct();

						row24_HashRow.id_user = row24.id_user;

						row24_HashRow.user_code = row24.user_code;

						tHash_Lookup_row24.put(row24_HashRow);

						tos_count_tAdvancedHash_row24++;

						/**
						 * [tAdvancedHash_row24 main ] stop
						 */

						/**
						 * [tPostgresqlInput_19 end ] start
						 */

						currentComponent = "tPostgresqlInput_19";

					}
				} finally {
					stmt_tPostgresqlInput_19.close();

				}
				globalMap.put("tPostgresqlInput_19_NB_LINE",
						nb_line_tPostgresqlInput_19);

				ok_Hash.put("tPostgresqlInput_19", true);
				end_Hash.put("tPostgresqlInput_19", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_19 end ] stop
				 */

				/**
				 * [tAdvancedHash_row24 end ] start
				 */

				currentComponent = "tAdvancedHash_row24";

				tHash_Lookup_row24.endPut();

				ok_Hash.put("tAdvancedHash_row24", true);
				end_Hash.put("tAdvancedHash_row24", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row24 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_19 finally ] start
				 */

				currentComponent = "tPostgresqlInput_19";

				/**
				 * [tPostgresqlInput_19 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row24 finally ] start
				 */

				currentComponent = "tAdvancedHash_row24";

				/**
				 * [tAdvancedHash_row24 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_19_SUBPROCESS_STATE", 1);
	}

	public static class row29Struct implements
			routines.system.IPersistableComparableLookupRow<row29Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_operatore_id;

		public long getMygov_operatore_id() {
			return this.mygov_operatore_id;
		}

		public String ruolo;

		public String getRuolo() {
			return this.ruolo;
		}

		public String cod_fed_user_id;

		public String getCod_fed_user_id() {
			return this.cod_fed_user_id;
		}

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.mygov_operatore_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row29Struct other = (row29Struct) obj;

			if (this.mygov_operatore_id != other.mygov_operatore_id)
				return false;

			return true;
		}

		public void copyDataTo(row29Struct other) {

			other.mygov_operatore_id = this.mygov_operatore_id;
			other.ruolo = this.ruolo;
			other.cod_fed_user_id = this.cod_fed_user_id;
			other.cod_ipa_ente = this.cod_ipa_ente;

		}

		public void copyKeysDataTo(row29Struct other) {

			other.mygov_operatore_id = this.mygov_operatore_id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_operatore_id = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_operatore_id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ruolo = readString(dis, ois);

				this.cod_fed_user_id = readString(dis, ois);

				this.cod_ipa_ente = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.ruolo, dos, oos);

				writeString(this.cod_fed_user_id, dos, oos);

				writeString(this.cod_ipa_ente, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_operatore_id="
					+ String.valueOf(mygov_operatore_id));
			sb.append(",ruolo=" + ruolo);
			sb.append(",cod_fed_user_id=" + cod_fed_user_id);
			sb.append(",cod_ipa_ente=" + cod_ipa_ente);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.mygov_operatore_id,
					other.mygov_operatore_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_24Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_24_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row29Struct row29 = new row29Struct();

				/**
				 * [tAdvancedHash_row29 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row29", false);
				start_Hash.put("tAdvancedHash_row29",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row29";

				int tos_count_tAdvancedHash_row29 = 0;

				// connection name:row29
				// source node:tPostgresqlInput_24 -
				// inputs:(after_tPostgresqlInput_16) outputs:(row29,row29) |
				// target node:tAdvancedHash_row29 - inputs:(row29) outputs:()
				// linked node: tMap_8 -
				// inputs:(row20,row29,pa_ente_tipo_dovuto)
				// outputs:(ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTO)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row29 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct> tHash_Lookup_row29 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row29Struct> getLookup(matchingModeEnum_row29);

				globalMap.put("tHash_Lookup_row29", tHash_Lookup_row29);

				/**
				 * [tAdvancedHash_row29 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_24 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_24", false);
				start_Hash.put("tPostgresqlInput_24",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_24");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_24";

				int tos_count_tPostgresqlInput_24 = 0;

				int nb_line_tPostgresqlInput_24 = 0;
				java.sql.Connection conn_tPostgresqlInput_24 = null;
				conn_tPostgresqlInput_24 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_24 = conn_tPostgresqlInput_24
						.createStatement();

				String dbquery_tPostgresqlInput_24 = "SELECT \n  \"mygov_operatore\".\"mygov_operatore_id\", \n  \"mygov_operatore\".\"ruolo\", \n  \"mygov_operatore\".\"cod_fed_user_id\", \n  \"mygov_operatore\".\"cod_ipa_ente\"\nFROM \"mygov_operatore\"\nWHERE split_part(\"mygov_operatore\".\"cod_fed_user_id\", '-', 2) <> 'WS_USER'\n";

				globalMap.put("tPostgresqlInput_24_QUERY",
						dbquery_tPostgresqlInput_24);
				java.sql.ResultSet rs_tPostgresqlInput_24 = null;
				try {
					rs_tPostgresqlInput_24 = stmt_tPostgresqlInput_24
							.executeQuery(dbquery_tPostgresqlInput_24);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_24 = rs_tPostgresqlInput_24
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_24 = rsmd_tPostgresqlInput_24
							.getColumnCount();

					String tmpContent_tPostgresqlInput_24 = null;

					while (rs_tPostgresqlInput_24.next()) {
						nb_line_tPostgresqlInput_24++;

						if (colQtyInRs_tPostgresqlInput_24 < 1) {
							row29.mygov_operatore_id = 0;
						} else {

							if (rs_tPostgresqlInput_24.getObject(1) != null) {
								row29.mygov_operatore_id = rs_tPostgresqlInput_24
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_24 < 2) {
							row29.ruolo = null;
						} else {

							tmpContent_tPostgresqlInput_24 = rs_tPostgresqlInput_24
									.getString(2);
							if (tmpContent_tPostgresqlInput_24 != null) {
								row29.ruolo = tmpContent_tPostgresqlInput_24
										.trim();
							} else {
								row29.ruolo = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_24 < 3) {
							row29.cod_fed_user_id = null;
						} else {

							tmpContent_tPostgresqlInput_24 = rs_tPostgresqlInput_24
									.getString(3);
							if (tmpContent_tPostgresqlInput_24 != null) {
								row29.cod_fed_user_id = tmpContent_tPostgresqlInput_24
										.trim();
							} else {
								row29.cod_fed_user_id = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_24 < 4) {
							row29.cod_ipa_ente = null;
						} else {

							tmpContent_tPostgresqlInput_24 = rs_tPostgresqlInput_24
									.getString(4);
							if (tmpContent_tPostgresqlInput_24 != null) {
								row29.cod_ipa_ente = tmpContent_tPostgresqlInput_24
										.trim();
							} else {
								row29.cod_ipa_ente = null;
							}
						}

						/**
						 * [tPostgresqlInput_24 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_24 main ] start
						 */

						currentComponent = "tPostgresqlInput_24";

						tos_count_tPostgresqlInput_24++;

						/**
						 * [tPostgresqlInput_24 main ] stop
						 */

						/**
						 * [tAdvancedHash_row29 main ] start
						 */

						currentComponent = "tAdvancedHash_row29";

						row29Struct row29_HashRow = new row29Struct();

						row29_HashRow.mygov_operatore_id = row29.mygov_operatore_id;

						row29_HashRow.ruolo = row29.ruolo;

						row29_HashRow.cod_fed_user_id = row29.cod_fed_user_id;

						row29_HashRow.cod_ipa_ente = row29.cod_ipa_ente;

						tHash_Lookup_row29.put(row29_HashRow);

						tos_count_tAdvancedHash_row29++;

						/**
						 * [tAdvancedHash_row29 main ] stop
						 */

						/**
						 * [tPostgresqlInput_24 end ] start
						 */

						currentComponent = "tPostgresqlInput_24";

					}
				} finally {
					stmt_tPostgresqlInput_24.close();

				}
				globalMap.put("tPostgresqlInput_24_NB_LINE",
						nb_line_tPostgresqlInput_24);

				ok_Hash.put("tPostgresqlInput_24", true);
				end_Hash.put("tPostgresqlInput_24", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_24",
						end_Hash.get("tPostgresqlInput_24")
								- start_Hash.get("tPostgresqlInput_24"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_24 end ] stop
				 */

				/**
				 * [tAdvancedHash_row29 end ] start
				 */

				currentComponent = "tAdvancedHash_row29";

				tHash_Lookup_row29.endPut();

				ok_Hash.put("tAdvancedHash_row29", true);
				end_Hash.put("tAdvancedHash_row29", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row29 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_24 finally ] start
				 */

				currentComponent = "tPostgresqlInput_24";

				/**
				 * [tPostgresqlInput_24 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row29 finally ] start
				 */

				currentComponent = "tAdvancedHash_row29";

				/**
				 * [tAdvancedHash_row29 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_24_SUBPROCESS_STATE", 1);
	}

	public static class ente_tipo_dovutoStruct
			implements
			routines.system.IPersistableComparableLookupRow<ente_tipo_dovutoStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_ente_tipo_dovuto_id;

		public long getMygov_ente_tipo_dovuto_id() {
			return this.mygov_ente_tipo_dovuto_id;
		}

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		public String cod_tipo;

		public String getCod_tipo() {
			return this.cod_tipo;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.cod_ipa_ente == null) ? 0 : this.cod_ipa_ente
								.hashCode());

				result = prime
						* result
						+ ((this.cod_tipo == null) ? 0 : this.cod_tipo
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final ente_tipo_dovutoStruct other = (ente_tipo_dovutoStruct) obj;

			if (this.cod_ipa_ente == null) {
				if (other.cod_ipa_ente != null)
					return false;

			} else if (!this.cod_ipa_ente.equals(other.cod_ipa_ente))

				return false;

			if (this.cod_tipo == null) {
				if (other.cod_tipo != null)
					return false;

			} else if (!this.cod_tipo.equals(other.cod_tipo))

				return false;

			return true;
		}

		public void copyDataTo(ente_tipo_dovutoStruct other) {

			other.mygov_ente_tipo_dovuto_id = this.mygov_ente_tipo_dovuto_id;
			other.cod_ipa_ente = this.cod_ipa_ente;
			other.cod_tipo = this.cod_tipo;

		}

		public void copyKeysDataTo(ente_tipo_dovutoStruct other) {

			other.cod_ipa_ente = this.cod_ipa_ente;
			other.cod_tipo = this.cod_tipo;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.cod_ipa_ente = readString(dis);

					this.cod_tipo = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.cod_ipa_ente, dos);

				// String

				writeString(this.cod_tipo, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.mygov_ente_tipo_dovuto_id = dis.readLong();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.mygov_ente_tipo_dovuto_id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_ente_tipo_dovuto_id="
					+ String.valueOf(mygov_ente_tipo_dovuto_id));
			sb.append(",cod_ipa_ente=" + cod_ipa_ente);
			sb.append(",cod_tipo=" + cod_tipo);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ente_tipo_dovutoStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.cod_ipa_ente,
					other.cod_ipa_ente);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.cod_tipo, other.cod_tipo);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row28Struct implements
			routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public long mygov_ente_tipo_dovuto_id;

		public long getMygov_ente_tipo_dovuto_id() {
			return this.mygov_ente_tipo_dovuto_id;
		}

		public long mygov_ente_id;

		public long getMygov_ente_id() {
			return this.mygov_ente_id;
		}

		public String cod_tipo;

		public String getCod_tipo() {
			return this.cod_tipo;
		}

		public String de_tipo;

		public String getDe_tipo() {
			return this.de_tipo;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_ente_tipo_dovuto_id = dis.readLong();

					this.mygov_ente_id = dis.readLong();

					this.cod_tipo = readString(dis);

					this.de_tipo = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_ente_tipo_dovuto_id);

				// long

				dos.writeLong(this.mygov_ente_id);

				// String

				writeString(this.cod_tipo, dos);

				// String

				writeString(this.de_tipo, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_ente_tipo_dovuto_id="
					+ String.valueOf(mygov_ente_tipo_dovuto_id));
			sb.append(",mygov_ente_id=" + String.valueOf(mygov_ente_id));
			sb.append(",cod_tipo=" + cod_tipo);
			sb.append(",de_tipo=" + de_tipo);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tPostgresqlInput_23Struct implements
			routines.system.IPersistableRow<after_tPostgresqlInput_23Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_ente_tipo_dovuto_id;

		public long getMygov_ente_tipo_dovuto_id() {
			return this.mygov_ente_tipo_dovuto_id;
		}

		public long mygov_ente_id;

		public long getMygov_ente_id() {
			return this.mygov_ente_id;
		}

		public String cod_tipo;

		public String getCod_tipo() {
			return this.cod_tipo;
		}

		public String de_tipo;

		public String getDe_tipo() {
			return this.de_tipo;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.mygov_ente_tipo_dovuto_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tPostgresqlInput_23Struct other = (after_tPostgresqlInput_23Struct) obj;

			if (this.mygov_ente_tipo_dovuto_id != other.mygov_ente_tipo_dovuto_id)
				return false;

			return true;
		}

		public void copyDataTo(after_tPostgresqlInput_23Struct other) {

			other.mygov_ente_tipo_dovuto_id = this.mygov_ente_tipo_dovuto_id;
			other.mygov_ente_id = this.mygov_ente_id;
			other.cod_tipo = this.cod_tipo;
			other.de_tipo = this.de_tipo;

		}

		public void copyKeysDataTo(after_tPostgresqlInput_23Struct other) {

			other.mygov_ente_tipo_dovuto_id = this.mygov_ente_tipo_dovuto_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_ente_tipo_dovuto_id = dis.readLong();

					this.mygov_ente_id = dis.readLong();

					this.cod_tipo = readString(dis);

					this.de_tipo = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_ente_tipo_dovuto_id);

				// long

				dos.writeLong(this.mygov_ente_id);

				// String

				writeString(this.cod_tipo, dos);

				// String

				writeString(this.de_tipo, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_ente_tipo_dovuto_id="
					+ String.valueOf(mygov_ente_tipo_dovuto_id));
			sb.append(",mygov_ente_id=" + String.valueOf(mygov_ente_id));
			sb.append(",cod_tipo=" + cod_tipo);
			sb.append(",de_tipo=" + de_tipo);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tPostgresqlInput_23Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.mygov_ente_tipo_dovuto_id,
					other.mygov_ente_tipo_dovuto_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_23Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_23_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_25Process(globalMap);

				row28Struct row28 = new row28Struct();
				ente_tipo_dovutoStruct ente_tipo_dovuto = new ente_tipo_dovutoStruct();

				/**
				 * [tAdvancedHash_ente_tipo_dovuto begin ] start
				 */

				ok_Hash.put("tAdvancedHash_ente_tipo_dovuto", false);
				start_Hash.put("tAdvancedHash_ente_tipo_dovuto",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_ente_tipo_dovuto";

				int tos_count_tAdvancedHash_ente_tipo_dovuto = 0;

				// connection name:ente_tipo_dovuto
				// source node:tMap_10 - inputs:(row28,row19)
				// outputs:(ente_tipo_dovuto,ente_tipo_dovuto) | target
				// node:tAdvancedHash_ente_tipo_dovuto -
				// inputs:(ente_tipo_dovuto) outputs:()
				// linked node: tMap_9 -
				// inputs:(ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTO,ente_tipo_dovuto)
				// outputs:(MAPPING_OPERATORE_ENTE_TIPO_DOVUTO)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ente_tipo_dovuto = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ente_tipo_dovutoStruct> tHash_Lookup_ente_tipo_dovuto = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<ente_tipo_dovutoStruct> getLookup(matchingModeEnum_ente_tipo_dovuto);

				globalMap.put("tHash_Lookup_ente_tipo_dovuto",
						tHash_Lookup_ente_tipo_dovuto);

				/**
				 * [tAdvancedHash_ente_tipo_dovuto begin ] stop
				 */

				/**
				 * [tMap_10 begin ] start
				 */

				ok_Hash.put("tMap_10", false);
				start_Hash.put("tMap_10", System.currentTimeMillis());

				currentComponent = "tMap_10";

				int tos_count_tMap_10 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) globalMap
						.get("tHash_Lookup_row19"));

				row19Struct row19HashKey = new row19Struct();
				row19Struct row19Default = new row19Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_10__Struct {
				}
				Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				ente_tipo_dovutoStruct ente_tipo_dovuto_tmp = new ente_tipo_dovutoStruct();
				// ###############################

				/**
				 * [tMap_10 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_23 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_23", false);
				start_Hash.put("tPostgresqlInput_23",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_23");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_23";

				int tos_count_tPostgresqlInput_23 = 0;

				int nb_line_tPostgresqlInput_23 = 0;
				java.sql.Connection conn_tPostgresqlInput_23 = null;
				conn_tPostgresqlInput_23 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_3");

				java.sql.Statement stmt_tPostgresqlInput_23 = conn_tPostgresqlInput_23
						.createStatement();

				String dbquery_tPostgresqlInput_23 = "SELECT \n  \"mygov_ente_tipo_dovuto\".\"mygov_ente_tipo_dovuto_id\", \n  \"mygov_ente_tipo_dovuto\".\"mygov_ente_id\", \n  \"mygov_ente_tipo_dovuto\".\"cod_tipo\", \n  \"mygov_ente_tipo_dovuto\".\"de_tipo\"\nFROM \"mygov_ente_tipo_dovuto\"";

				globalMap.put("tPostgresqlInput_23_QUERY",
						dbquery_tPostgresqlInput_23);
				java.sql.ResultSet rs_tPostgresqlInput_23 = null;
				try {
					rs_tPostgresqlInput_23 = stmt_tPostgresqlInput_23
							.executeQuery(dbquery_tPostgresqlInput_23);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_23 = rs_tPostgresqlInput_23
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_23 = rsmd_tPostgresqlInput_23
							.getColumnCount();

					String tmpContent_tPostgresqlInput_23 = null;

					while (rs_tPostgresqlInput_23.next()) {
						nb_line_tPostgresqlInput_23++;

						if (colQtyInRs_tPostgresqlInput_23 < 1) {
							row28.mygov_ente_tipo_dovuto_id = 0;
						} else {

							if (rs_tPostgresqlInput_23.getObject(1) != null) {
								row28.mygov_ente_tipo_dovuto_id = rs_tPostgresqlInput_23
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_23 < 2) {
							row28.mygov_ente_id = 0;
						} else {

							if (rs_tPostgresqlInput_23.getObject(2) != null) {
								row28.mygov_ente_id = rs_tPostgresqlInput_23
										.getLong(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_23 < 3) {
							row28.cod_tipo = null;
						} else {

							tmpContent_tPostgresqlInput_23 = rs_tPostgresqlInput_23
									.getString(3);
							if (tmpContent_tPostgresqlInput_23 != null) {
								row28.cod_tipo = tmpContent_tPostgresqlInput_23
										.trim();
							} else {
								row28.cod_tipo = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_23 < 4) {
							row28.de_tipo = null;
						} else {

							tmpContent_tPostgresqlInput_23 = rs_tPostgresqlInput_23
									.getString(4);
							if (tmpContent_tPostgresqlInput_23 != null) {
								row28.de_tipo = tmpContent_tPostgresqlInput_23
										.trim();
							} else {
								row28.de_tipo = null;
							}
						}

						/**
						 * [tPostgresqlInput_23 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_23 main ] start
						 */

						currentComponent = "tPostgresqlInput_23";

						tos_count_tPostgresqlInput_23++;

						/**
						 * [tPostgresqlInput_23 main ] stop
						 */

						/**
						 * [tMap_10 main ] start
						 */

						currentComponent = "tMap_10";

						boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_10 = false;
						boolean mainRowRejected_tMap_10 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row19"
						// /////////////////////////////////////////////

						boolean forceLooprow19 = false;

						row19Struct row19ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_10) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_10 = false;

							Object exprKeyValue_row19__mygov_ente_id = row28.mygov_ente_id;
							if (exprKeyValue_row19__mygov_ente_id == null) {
								hasCasePrimitiveKeyWithNull_tMap_10 = true;
							} else {
								row19HashKey.mygov_ente_id = (long) (Long) exprKeyValue_row19__mygov_ente_id;
							}

							row19HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_10) { // G_TM_M_091

								tHash_Lookup_row19.lookup(row19HashKey);

							} // G_TM_M_091

							if (hasCasePrimitiveKeyWithNull_tMap_10
									|| !tHash_Lookup_row19.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_10 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row19 != null
								&& tHash_Lookup_row19.getCount(row19HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row19' and it contains more one result from keys :  row19.mygov_ente_id = '"
							// + row19HashKey.mygov_ente_id + "'");
						} // G 071

						row19Struct row19 = null;

						row19Struct fromLookup_row19 = null;
						row19 = row19Default;

						if (tHash_Lookup_row19 != null
								&& tHash_Lookup_row19.hasNext()) { // G 099

							fromLookup_row19 = tHash_Lookup_row19.next();

						} // G 099

						if (fromLookup_row19 != null) {
							row19 = fromLookup_row19;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
							// ###############################
							// # Output tables

							ente_tipo_dovuto = null;

							if (!rejectedInnerJoin_tMap_10) {

								// # Output table : 'ente_tipo_dovuto'
								ente_tipo_dovuto_tmp.mygov_ente_tipo_dovuto_id = row28.mygov_ente_tipo_dovuto_id;
								ente_tipo_dovuto_tmp.cod_ipa_ente = row19.cod_ipa_ente;
								ente_tipo_dovuto_tmp.cod_tipo = row28.cod_tipo;
								ente_tipo_dovuto = ente_tipo_dovuto_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_10 = false;

						tos_count_tMap_10++;

						/**
						 * [tMap_10 main ] stop
						 */
						// Start of branch "ente_tipo_dovuto"
						if (ente_tipo_dovuto != null) {

							/**
							 * [tAdvancedHash_ente_tipo_dovuto main ] start
							 */

							currentComponent = "tAdvancedHash_ente_tipo_dovuto";

							ente_tipo_dovutoStruct ente_tipo_dovuto_HashRow = new ente_tipo_dovutoStruct();

							ente_tipo_dovuto_HashRow.mygov_ente_tipo_dovuto_id = ente_tipo_dovuto.mygov_ente_tipo_dovuto_id;

							ente_tipo_dovuto_HashRow.cod_ipa_ente = ente_tipo_dovuto.cod_ipa_ente;

							ente_tipo_dovuto_HashRow.cod_tipo = ente_tipo_dovuto.cod_tipo;

							tHash_Lookup_ente_tipo_dovuto
									.put(ente_tipo_dovuto_HashRow);

							tos_count_tAdvancedHash_ente_tipo_dovuto++;

							/**
							 * [tAdvancedHash_ente_tipo_dovuto main ] stop
							 */

						} // End of branch "ente_tipo_dovuto"

						/**
						 * [tPostgresqlInput_23 end ] start
						 */

						currentComponent = "tPostgresqlInput_23";

					}
				} finally {
					stmt_tPostgresqlInput_23.close();

				}
				globalMap.put("tPostgresqlInput_23_NB_LINE",
						nb_line_tPostgresqlInput_23);

				ok_Hash.put("tPostgresqlInput_23", true);
				end_Hash.put("tPostgresqlInput_23", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_23",
						end_Hash.get("tPostgresqlInput_23")
								- start_Hash.get("tPostgresqlInput_23"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_23 end ] stop
				 */

				/**
				 * [tMap_10 end ] start
				 */

				currentComponent = "tMap_10";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row19 != null) {
					tHash_Lookup_row19.endGet();
				}
				globalMap.remove("tHash_Lookup_row19");

				// ###############################

				ok_Hash.put("tMap_10", true);
				end_Hash.put("tMap_10", System.currentTimeMillis());

				/**
				 * [tMap_10 end ] stop
				 */

				/**
				 * [tAdvancedHash_ente_tipo_dovuto end ] start
				 */

				currentComponent = "tAdvancedHash_ente_tipo_dovuto";

				tHash_Lookup_ente_tipo_dovuto.endPut();

				ok_Hash.put("tAdvancedHash_ente_tipo_dovuto", true);
				end_Hash.put("tAdvancedHash_ente_tipo_dovuto",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_ente_tipo_dovuto end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_10"
			globalMap.remove("tHash_Lookup_row19");

			try {

				/**
				 * [tPostgresqlInput_23 finally ] start
				 */

				currentComponent = "tPostgresqlInput_23";

				/**
				 * [tPostgresqlInput_23 finally ] stop
				 */

				/**
				 * [tMap_10 finally ] start
				 */

				currentComponent = "tMap_10";

				/**
				 * [tMap_10 finally ] stop
				 */

				/**
				 * [tAdvancedHash_ente_tipo_dovuto finally ] start
				 */

				currentComponent = "tAdvancedHash_ente_tipo_dovuto";

				/**
				 * [tAdvancedHash_ente_tipo_dovuto finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_23_SUBPROCESS_STATE", 1);
	}

	public static class row19Struct implements
			routines.system.IPersistableComparableLookupRow<row19Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_ente_id;

		public long getMygov_ente_id() {
			return this.mygov_ente_id;
		}

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		public String codice_fiscale_ente;

		public String getCodice_fiscale_ente() {
			return this.codice_fiscale_ente;
		}

		public String de_nome_ente;

		public String getDe_nome_ente() {
			return this.de_nome_ente;
		}

		public String email_amministratore;

		public String getEmail_amministratore() {
			return this.email_amministratore;
		}

		public java.util.Date dt_creazione;

		public java.util.Date getDt_creazione() {
			return this.dt_creazione;
		}

		public java.util.Date dt_ultima_modifica;

		public java.util.Date getDt_ultima_modifica() {
			return this.dt_ultima_modifica;
		}

		public String mybox_client_key;

		public String getMybox_client_key() {
			return this.mybox_client_key;
		}

		public String mybox_client_secret;

		public String getMybox_client_secret() {
			return this.mybox_client_secret;
		}

		public int num_giorni_pagamento_presunti;

		public int getNum_giorni_pagamento_presunti() {
			return this.num_giorni_pagamento_presunti;
		}

		public String de_password;

		public String getDe_password() {
			return this.de_password;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.mygov_ente_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row19Struct other = (row19Struct) obj;

			if (this.mygov_ente_id != other.mygov_ente_id)
				return false;

			return true;
		}

		public void copyDataTo(row19Struct other) {

			other.mygov_ente_id = this.mygov_ente_id;
			other.cod_ipa_ente = this.cod_ipa_ente;
			other.codice_fiscale_ente = this.codice_fiscale_ente;
			other.de_nome_ente = this.de_nome_ente;
			other.email_amministratore = this.email_amministratore;
			other.dt_creazione = this.dt_creazione;
			other.dt_ultima_modifica = this.dt_ultima_modifica;
			other.mybox_client_key = this.mybox_client_key;
			other.mybox_client_secret = this.mybox_client_secret;
			other.num_giorni_pagamento_presunti = this.num_giorni_pagamento_presunti;
			other.de_password = this.de_password;

		}

		public void copyKeysDataTo(row19Struct other) {

			other.mygov_ente_id = this.mygov_ente_id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_ente_id = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_ente_id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.cod_ipa_ente = readString(dis, ois);

				this.codice_fiscale_ente = readString(dis, ois);

				this.de_nome_ente = readString(dis, ois);

				this.email_amministratore = readString(dis, ois);

				this.dt_creazione = readDate(dis, ois);

				this.dt_ultima_modifica = readDate(dis, ois);

				this.mybox_client_key = readString(dis, ois);

				this.mybox_client_secret = readString(dis, ois);

				this.num_giorni_pagamento_presunti = dis.readInt();

				this.de_password = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.cod_ipa_ente, dos, oos);

				writeString(this.codice_fiscale_ente, dos, oos);

				writeString(this.de_nome_ente, dos, oos);

				writeString(this.email_amministratore, dos, oos);

				writeDate(this.dt_creazione, dos, oos);

				writeDate(this.dt_ultima_modifica, dos, oos);

				writeString(this.mybox_client_key, dos, oos);

				writeString(this.mybox_client_secret, dos, oos);

				dos.writeInt(this.num_giorni_pagamento_presunti);

				writeString(this.de_password, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_ente_id=" + String.valueOf(mygov_ente_id));
			sb.append(",cod_ipa_ente=" + cod_ipa_ente);
			sb.append(",codice_fiscale_ente=" + codice_fiscale_ente);
			sb.append(",de_nome_ente=" + de_nome_ente);
			sb.append(",email_amministratore=" + email_amministratore);
			sb.append(",dt_creazione=" + String.valueOf(dt_creazione));
			sb.append(",dt_ultima_modifica="
					+ String.valueOf(dt_ultima_modifica));
			sb.append(",mybox_client_key=" + mybox_client_key);
			sb.append(",mybox_client_secret=" + mybox_client_secret);
			sb.append(",num_giorni_pagamento_presunti="
					+ String.valueOf(num_giorni_pagamento_presunti));
			sb.append(",de_password=" + de_password);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.mygov_ente_id,
					other.mygov_ente_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_25Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_25_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row19Struct row19 = new row19Struct();

				/**
				 * [tAdvancedHash_row19 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row19", false);
				start_Hash.put("tAdvancedHash_row19",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row19";

				int tos_count_tAdvancedHash_row19 = 0;

				// connection name:row19
				// source node:tPostgresqlInput_25 -
				// inputs:(after_tPostgresqlInput_23) outputs:(row19,row19) |
				// target node:tAdvancedHash_row19 - inputs:(row19) outputs:()
				// linked node: tMap_10 - inputs:(row28,row19)
				// outputs:(ente_tipo_dovuto,ente_tipo_dovuto)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row19 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row19Struct> getLookup(matchingModeEnum_row19);

				globalMap.put("tHash_Lookup_row19", tHash_Lookup_row19);

				/**
				 * [tAdvancedHash_row19 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_25 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_25", false);
				start_Hash.put("tPostgresqlInput_25",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_25");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_25";

				int tos_count_tPostgresqlInput_25 = 0;

				int nb_line_tPostgresqlInput_25 = 0;
				java.sql.Connection conn_tPostgresqlInput_25 = null;
				conn_tPostgresqlInput_25 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_3");

				java.sql.Statement stmt_tPostgresqlInput_25 = conn_tPostgresqlInput_25
						.createStatement();

				String dbquery_tPostgresqlInput_25 = "SELECT \n  \"mygov_ente\".\"mygov_ente_id\", \n  \"mygov_ente\".\"cod_ipa_ente\", \n  \"mygov_ente\".\"codice_fiscale_ente\", \n  \"mygov_ente\".\"de_nome_ente\", \n  \"mygov_ente\".\"email_amministratore\", \n  \"mygov_ente\".\"dt_creazione\", \n  \"mygov_ente\".\"dt_ultima_modifica\", \n  \"mygov_ente\".\"mybox_client_key\", \n  \"mygov_ente\".\"mybox_client_secret\", \n  \"mygov_ente\".\"num_giorni_pagamento_presunti\", \n  \"mygov_ente\".\"de_password\"\nFROM \"mygov_ente\"";

				globalMap.put("tPostgresqlInput_25_QUERY",
						dbquery_tPostgresqlInput_25);
				java.sql.ResultSet rs_tPostgresqlInput_25 = null;
				try {
					rs_tPostgresqlInput_25 = stmt_tPostgresqlInput_25
							.executeQuery(dbquery_tPostgresqlInput_25);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_25 = rs_tPostgresqlInput_25
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_25 = rsmd_tPostgresqlInput_25
							.getColumnCount();

					String tmpContent_tPostgresqlInput_25 = null;

					while (rs_tPostgresqlInput_25.next()) {
						nb_line_tPostgresqlInput_25++;

						if (colQtyInRs_tPostgresqlInput_25 < 1) {
							row19.mygov_ente_id = 0;
						} else {

							if (rs_tPostgresqlInput_25.getObject(1) != null) {
								row19.mygov_ente_id = rs_tPostgresqlInput_25
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_25 < 2) {
							row19.cod_ipa_ente = null;
						} else {

							tmpContent_tPostgresqlInput_25 = rs_tPostgresqlInput_25
									.getString(2);
							if (tmpContent_tPostgresqlInput_25 != null) {
								row19.cod_ipa_ente = tmpContent_tPostgresqlInput_25
										.trim();
							} else {
								row19.cod_ipa_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_25 < 3) {
							row19.codice_fiscale_ente = null;
						} else {

							tmpContent_tPostgresqlInput_25 = rs_tPostgresqlInput_25
									.getString(3);
							if (tmpContent_tPostgresqlInput_25 != null) {
								row19.codice_fiscale_ente = tmpContent_tPostgresqlInput_25
										.trim();
							} else {
								row19.codice_fiscale_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_25 < 4) {
							row19.de_nome_ente = null;
						} else {

							tmpContent_tPostgresqlInput_25 = rs_tPostgresqlInput_25
									.getString(4);
							if (tmpContent_tPostgresqlInput_25 != null) {
								row19.de_nome_ente = tmpContent_tPostgresqlInput_25
										.trim();
							} else {
								row19.de_nome_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_25 < 5) {
							row19.email_amministratore = null;
						} else {

							tmpContent_tPostgresqlInput_25 = rs_tPostgresqlInput_25
									.getString(5);
							if (tmpContent_tPostgresqlInput_25 != null) {
								row19.email_amministratore = tmpContent_tPostgresqlInput_25
										.trim();
							} else {
								row19.email_amministratore = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_25 < 6) {
							row19.dt_creazione = null;
						} else {

							if (rs_tPostgresqlInput_25.getTimestamp(6) != null) {
								row19.dt_creazione = new java.util.Date(
										rs_tPostgresqlInput_25.getTimestamp(6)
												.getTime());
							} else {
								row19.dt_creazione = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_25 < 7) {
							row19.dt_ultima_modifica = null;
						} else {

							if (rs_tPostgresqlInput_25.getTimestamp(7) != null) {
								row19.dt_ultima_modifica = new java.util.Date(
										rs_tPostgresqlInput_25.getTimestamp(7)
												.getTime());
							} else {
								row19.dt_ultima_modifica = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_25 < 8) {
							row19.mybox_client_key = null;
						} else {

							tmpContent_tPostgresqlInput_25 = rs_tPostgresqlInput_25
									.getString(8);
							if (tmpContent_tPostgresqlInput_25 != null) {
								row19.mybox_client_key = tmpContent_tPostgresqlInput_25
										.trim();
							} else {
								row19.mybox_client_key = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_25 < 9) {
							row19.mybox_client_secret = null;
						} else {

							tmpContent_tPostgresqlInput_25 = rs_tPostgresqlInput_25
									.getString(9);
							if (tmpContent_tPostgresqlInput_25 != null) {
								row19.mybox_client_secret = tmpContent_tPostgresqlInput_25
										.trim();
							} else {
								row19.mybox_client_secret = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_25 < 10) {
							row19.num_giorni_pagamento_presunti = 0;
						} else {

							if (rs_tPostgresqlInput_25.getObject(10) != null) {
								row19.num_giorni_pagamento_presunti = rs_tPostgresqlInput_25
										.getInt(10);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_25 < 11) {
							row19.de_password = null;
						} else {

							tmpContent_tPostgresqlInput_25 = rs_tPostgresqlInput_25
									.getString(11);
							if (tmpContent_tPostgresqlInput_25 != null) {
								row19.de_password = tmpContent_tPostgresqlInput_25
										.trim();
							} else {
								row19.de_password = null;
							}
						}

						/**
						 * [tPostgresqlInput_25 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_25 main ] start
						 */

						currentComponent = "tPostgresqlInput_25";

						tos_count_tPostgresqlInput_25++;

						/**
						 * [tPostgresqlInput_25 main ] stop
						 */

						/**
						 * [tAdvancedHash_row19 main ] start
						 */

						currentComponent = "tAdvancedHash_row19";

						row19Struct row19_HashRow = new row19Struct();

						row19_HashRow.mygov_ente_id = row19.mygov_ente_id;

						row19_HashRow.cod_ipa_ente = row19.cod_ipa_ente;

						row19_HashRow.codice_fiscale_ente = row19.codice_fiscale_ente;

						row19_HashRow.de_nome_ente = row19.de_nome_ente;

						row19_HashRow.email_amministratore = row19.email_amministratore;

						row19_HashRow.dt_creazione = row19.dt_creazione;

						row19_HashRow.dt_ultima_modifica = row19.dt_ultima_modifica;

						row19_HashRow.mybox_client_key = row19.mybox_client_key;

						row19_HashRow.mybox_client_secret = row19.mybox_client_secret;

						row19_HashRow.num_giorni_pagamento_presunti = row19.num_giorni_pagamento_presunti;

						row19_HashRow.de_password = row19.de_password;

						tHash_Lookup_row19.put(row19_HashRow);

						tos_count_tAdvancedHash_row19++;

						/**
						 * [tAdvancedHash_row19 main ] stop
						 */

						/**
						 * [tPostgresqlInput_25 end ] start
						 */

						currentComponent = "tPostgresqlInput_25";

					}
				} finally {
					stmt_tPostgresqlInput_25.close();

				}
				globalMap.put("tPostgresqlInput_25_NB_LINE",
						nb_line_tPostgresqlInput_25);

				ok_Hash.put("tPostgresqlInput_25", true);
				end_Hash.put("tPostgresqlInput_25", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_25",
						end_Hash.get("tPostgresqlInput_25")
								- start_Hash.get("tPostgresqlInput_25"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_25 end ] stop
				 */

				/**
				 * [tAdvancedHash_row19 end ] start
				 */

				currentComponent = "tAdvancedHash_row19";

				tHash_Lookup_row19.endPut();

				ok_Hash.put("tAdvancedHash_row19", true);
				end_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row19 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_25 finally ] start
				 */

				currentComponent = "tPostgresqlInput_25";

				/**
				 * [tPostgresqlInput_25 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row19 finally ] start
				 */

				currentComponent = "tAdvancedHash_row19";

				/**
				 * [tAdvancedHash_row19 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_25_SUBPROCESS_STATE", 1);
	}

	public static class pa_ente_tipo_dovutoStruct
			implements
			routines.system.IPersistableComparableLookupRow<pa_ente_tipo_dovutoStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_ente_tipo_dovuto_id;

		public long getMygov_ente_tipo_dovuto_id() {
			return this.mygov_ente_tipo_dovuto_id;
		}

		public String cod_tipo;

		public String getCod_tipo() {
			return this.cod_tipo;
		}

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.mygov_ente_tipo_dovuto_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final pa_ente_tipo_dovutoStruct other = (pa_ente_tipo_dovutoStruct) obj;

			if (this.mygov_ente_tipo_dovuto_id != other.mygov_ente_tipo_dovuto_id)
				return false;

			return true;
		}

		public void copyDataTo(pa_ente_tipo_dovutoStruct other) {

			other.mygov_ente_tipo_dovuto_id = this.mygov_ente_tipo_dovuto_id;
			other.cod_tipo = this.cod_tipo;
			other.cod_ipa_ente = this.cod_ipa_ente;

		}

		public void copyKeysDataTo(pa_ente_tipo_dovutoStruct other) {

			other.mygov_ente_tipo_dovuto_id = this.mygov_ente_tipo_dovuto_id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_ente_tipo_dovuto_id = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_ente_tipo_dovuto_id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.cod_tipo = readString(dis, ois);

				this.cod_ipa_ente = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.cod_tipo, dos, oos);

				writeString(this.cod_ipa_ente, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_ente_tipo_dovuto_id="
					+ String.valueOf(mygov_ente_tipo_dovuto_id));
			sb.append(",cod_tipo=" + cod_tipo);
			sb.append(",cod_ipa_ente=" + cod_ipa_ente);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(pa_ente_tipo_dovutoStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.mygov_ente_tipo_dovuto_id,
					other.mygov_ente_tipo_dovuto_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row27Struct implements
			routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];

		public long mygov_ente_tipo_dovuto_id;

		public long getMygov_ente_tipo_dovuto_id() {
			return this.mygov_ente_tipo_dovuto_id;
		}

		public long mygov_ente_id;

		public long getMygov_ente_id() {
			return this.mygov_ente_id;
		}

		public String cod_tipo;

		public String getCod_tipo() {
			return this.cod_tipo;
		}

		public String de_tipo;

		public String getDe_tipo() {
			return this.de_tipo;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_ente_tipo_dovuto_id = dis.readLong();

					this.mygov_ente_id = dis.readLong();

					this.cod_tipo = readString(dis);

					this.de_tipo = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_ente_tipo_dovuto_id);

				// long

				dos.writeLong(this.mygov_ente_id);

				// String

				writeString(this.cod_tipo, dos);

				// String

				writeString(this.de_tipo, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_ente_tipo_dovuto_id="
					+ String.valueOf(mygov_ente_tipo_dovuto_id));
			sb.append(",mygov_ente_id=" + String.valueOf(mygov_ente_id));
			sb.append(",cod_tipo=" + cod_tipo);
			sb.append(",de_tipo=" + de_tipo);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tPostgresqlInput_22Struct implements
			routines.system.IPersistableRow<after_tPostgresqlInput_22Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_ente_tipo_dovuto_id;

		public long getMygov_ente_tipo_dovuto_id() {
			return this.mygov_ente_tipo_dovuto_id;
		}

		public long mygov_ente_id;

		public long getMygov_ente_id() {
			return this.mygov_ente_id;
		}

		public String cod_tipo;

		public String getCod_tipo() {
			return this.cod_tipo;
		}

		public String de_tipo;

		public String getDe_tipo() {
			return this.de_tipo;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.mygov_ente_tipo_dovuto_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tPostgresqlInput_22Struct other = (after_tPostgresqlInput_22Struct) obj;

			if (this.mygov_ente_tipo_dovuto_id != other.mygov_ente_tipo_dovuto_id)
				return false;

			return true;
		}

		public void copyDataTo(after_tPostgresqlInput_22Struct other) {

			other.mygov_ente_tipo_dovuto_id = this.mygov_ente_tipo_dovuto_id;
			other.mygov_ente_id = this.mygov_ente_id;
			other.cod_tipo = this.cod_tipo;
			other.de_tipo = this.de_tipo;

		}

		public void copyKeysDataTo(after_tPostgresqlInput_22Struct other) {

			other.mygov_ente_tipo_dovuto_id = this.mygov_ente_tipo_dovuto_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_Allinea, 0,
						length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_Allinea, 0, length,
						utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_ente_tipo_dovuto_id = dis.readLong();

					this.mygov_ente_id = dis.readLong();

					this.cod_tipo = readString(dis);

					this.de_tipo = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_ente_tipo_dovuto_id);

				// long

				dos.writeLong(this.mygov_ente_id);

				// String

				writeString(this.cod_tipo, dos);

				// String

				writeString(this.de_tipo, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_ente_tipo_dovuto_id="
					+ String.valueOf(mygov_ente_tipo_dovuto_id));
			sb.append(",mygov_ente_id=" + String.valueOf(mygov_ente_id));
			sb.append(",cod_tipo=" + cod_tipo);
			sb.append(",de_tipo=" + de_tipo);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tPostgresqlInput_22Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.mygov_ente_tipo_dovuto_id,
					other.mygov_ente_tipo_dovuto_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_22Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_22_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_9Process(globalMap);

				row27Struct row27 = new row27Struct();
				pa_ente_tipo_dovutoStruct pa_ente_tipo_dovuto = new pa_ente_tipo_dovutoStruct();

				/**
				 * [tAdvancedHash_pa_ente_tipo_dovuto begin ] start
				 */

				ok_Hash.put("tAdvancedHash_pa_ente_tipo_dovuto", false);
				start_Hash.put("tAdvancedHash_pa_ente_tipo_dovuto",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_pa_ente_tipo_dovuto";

				int tos_count_tAdvancedHash_pa_ente_tipo_dovuto = 0;

				// connection name:pa_ente_tipo_dovuto
				// source node:tMap_14 - inputs:(row27,row10)
				// outputs:(pa_ente_tipo_dovuto,pa_ente_tipo_dovuto) | target
				// node:tAdvancedHash_pa_ente_tipo_dovuto -
				// inputs:(pa_ente_tipo_dovuto) outputs:()
				// linked node: tMap_8 -
				// inputs:(row20,row29,pa_ente_tipo_dovuto)
				// outputs:(ASSOCIAZIONE_OPERATORE_ENTE_TIPO_DOVUTO)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_pa_ente_tipo_dovuto = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<pa_ente_tipo_dovutoStruct> tHash_Lookup_pa_ente_tipo_dovuto = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<pa_ente_tipo_dovutoStruct> getLookup(matchingModeEnum_pa_ente_tipo_dovuto);

				globalMap.put("tHash_Lookup_pa_ente_tipo_dovuto",
						tHash_Lookup_pa_ente_tipo_dovuto);

				/**
				 * [tAdvancedHash_pa_ente_tipo_dovuto begin ] stop
				 */

				/**
				 * [tMap_14 begin ] start
				 */

				ok_Hash.put("tMap_14", false);
				start_Hash.put("tMap_14", System.currentTimeMillis());

				currentComponent = "tMap_14";

				int tos_count_tMap_14 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) globalMap
						.get("tHash_Lookup_row10"));

				row10Struct row10HashKey = new row10Struct();
				row10Struct row10Default = new row10Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_14__Struct {
				}
				Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				pa_ente_tipo_dovutoStruct pa_ente_tipo_dovuto_tmp = new pa_ente_tipo_dovutoStruct();
				// ###############################

				/**
				 * [tMap_14 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_22 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_22", false);
				start_Hash.put("tPostgresqlInput_22",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_22");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_22";

				int tos_count_tPostgresqlInput_22 = 0;

				int nb_line_tPostgresqlInput_22 = 0;
				java.sql.Connection conn_tPostgresqlInput_22 = null;
				conn_tPostgresqlInput_22 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_22 = conn_tPostgresqlInput_22
						.createStatement();

				String dbquery_tPostgresqlInput_22 = "SELECT \n  \"mygov_ente_tipo_dovuto\".\"mygov_ente_tipo_dovuto_id\", \n  \"mygov_ente_tipo_dovuto\".\"mygov_ente_id\", \n  \"mygov_ente_tipo_dovuto\".\"cod_tipo\", \n  \"mygov_ente_tipo_dovuto\".\"de_tipo\"\nFROM \"mygov_ente_tipo_dovuto\"";

				globalMap.put("tPostgresqlInput_22_QUERY",
						dbquery_tPostgresqlInput_22);
				java.sql.ResultSet rs_tPostgresqlInput_22 = null;
				try {
					rs_tPostgresqlInput_22 = stmt_tPostgresqlInput_22
							.executeQuery(dbquery_tPostgresqlInput_22);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_22 = rs_tPostgresqlInput_22
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_22 = rsmd_tPostgresqlInput_22
							.getColumnCount();

					String tmpContent_tPostgresqlInput_22 = null;

					while (rs_tPostgresqlInput_22.next()) {
						nb_line_tPostgresqlInput_22++;

						if (colQtyInRs_tPostgresqlInput_22 < 1) {
							row27.mygov_ente_tipo_dovuto_id = 0;
						} else {

							if (rs_tPostgresqlInput_22.getObject(1) != null) {
								row27.mygov_ente_tipo_dovuto_id = rs_tPostgresqlInput_22
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_22 < 2) {
							row27.mygov_ente_id = 0;
						} else {

							if (rs_tPostgresqlInput_22.getObject(2) != null) {
								row27.mygov_ente_id = rs_tPostgresqlInput_22
										.getLong(2);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_22 < 3) {
							row27.cod_tipo = null;
						} else {

							tmpContent_tPostgresqlInput_22 = rs_tPostgresqlInput_22
									.getString(3);
							if (tmpContent_tPostgresqlInput_22 != null) {
								row27.cod_tipo = tmpContent_tPostgresqlInput_22
										.trim();
							} else {
								row27.cod_tipo = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_22 < 4) {
							row27.de_tipo = null;
						} else {

							tmpContent_tPostgresqlInput_22 = rs_tPostgresqlInput_22
									.getString(4);
							if (tmpContent_tPostgresqlInput_22 != null) {
								row27.de_tipo = tmpContent_tPostgresqlInput_22
										.trim();
							} else {
								row27.de_tipo = null;
							}
						}

						/**
						 * [tPostgresqlInput_22 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_22 main ] start
						 */

						currentComponent = "tPostgresqlInput_22";

						tos_count_tPostgresqlInput_22++;

						/**
						 * [tPostgresqlInput_22 main ] stop
						 */

						/**
						 * [tMap_14 main ] start
						 */

						currentComponent = "tMap_14";

						boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_14 = false;
						boolean mainRowRejected_tMap_14 = false;

						// /////////////////////////////////////////////
						// Starting Lookup Table "row10"
						// /////////////////////////////////////////////

						boolean forceLooprow10 = false;

						row10Struct row10ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_14) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_14 = false;

							Object exprKeyValue_row10__mygov_ente_id = row27.mygov_ente_id;
							if (exprKeyValue_row10__mygov_ente_id == null) {
								hasCasePrimitiveKeyWithNull_tMap_14 = true;
							} else {
								row10HashKey.mygov_ente_id = (long) (Long) exprKeyValue_row10__mygov_ente_id;
							}

							row10HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_14) { // G_TM_M_091

								tHash_Lookup_row10.lookup(row10HashKey);

							} // G_TM_M_091

							if (hasCasePrimitiveKeyWithNull_tMap_14
									|| !tHash_Lookup_row10.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_14 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row10 != null
								&& tHash_Lookup_row10.getCount(row10HashKey) > 1) { // G
																					// 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row10' and it contains more one result from keys :  row10.mygov_ente_id = '"
							// + row10HashKey.mygov_ente_id + "'");
						} // G 071

						row10Struct row10 = null;

						row10Struct fromLookup_row10 = null;
						row10 = row10Default;

						if (tHash_Lookup_row10 != null
								&& tHash_Lookup_row10.hasNext()) { // G 099

							fromLookup_row10 = tHash_Lookup_row10.next();

						} // G 099

						if (fromLookup_row10 != null) {
							row10 = fromLookup_row10;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
							// ###############################
							// # Output tables

							pa_ente_tipo_dovuto = null;

							if (!rejectedInnerJoin_tMap_14) {

								// # Output table : 'pa_ente_tipo_dovuto'
								pa_ente_tipo_dovuto_tmp.mygov_ente_tipo_dovuto_id = row27.mygov_ente_tipo_dovuto_id;
								pa_ente_tipo_dovuto_tmp.cod_tipo = row27.cod_tipo;
								pa_ente_tipo_dovuto_tmp.cod_ipa_ente = row10.cod_ipa_ente;
								pa_ente_tipo_dovuto = pa_ente_tipo_dovuto_tmp;
							} // closing inner join bracket (2)
								// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_14 = false;

						tos_count_tMap_14++;

						/**
						 * [tMap_14 main ] stop
						 */
						// Start of branch "pa_ente_tipo_dovuto"
						if (pa_ente_tipo_dovuto != null) {

							/**
							 * [tAdvancedHash_pa_ente_tipo_dovuto main ] start
							 */

							currentComponent = "tAdvancedHash_pa_ente_tipo_dovuto";

							pa_ente_tipo_dovutoStruct pa_ente_tipo_dovuto_HashRow = new pa_ente_tipo_dovutoStruct();

							pa_ente_tipo_dovuto_HashRow.mygov_ente_tipo_dovuto_id = pa_ente_tipo_dovuto.mygov_ente_tipo_dovuto_id;

							pa_ente_tipo_dovuto_HashRow.cod_tipo = pa_ente_tipo_dovuto.cod_tipo;

							pa_ente_tipo_dovuto_HashRow.cod_ipa_ente = pa_ente_tipo_dovuto.cod_ipa_ente;

							tHash_Lookup_pa_ente_tipo_dovuto
									.put(pa_ente_tipo_dovuto_HashRow);

							tos_count_tAdvancedHash_pa_ente_tipo_dovuto++;

							/**
							 * [tAdvancedHash_pa_ente_tipo_dovuto main ] stop
							 */

						} // End of branch "pa_ente_tipo_dovuto"

						/**
						 * [tPostgresqlInput_22 end ] start
						 */

						currentComponent = "tPostgresqlInput_22";

					}
				} finally {
					stmt_tPostgresqlInput_22.close();

				}
				globalMap.put("tPostgresqlInput_22_NB_LINE",
						nb_line_tPostgresqlInput_22);

				ok_Hash.put("tPostgresqlInput_22", true);
				end_Hash.put("tPostgresqlInput_22", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_22",
						end_Hash.get("tPostgresqlInput_22")
								- start_Hash.get("tPostgresqlInput_22"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_22 end ] stop
				 */

				/**
				 * [tMap_14 end ] start
				 */

				currentComponent = "tMap_14";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row10 != null) {
					tHash_Lookup_row10.endGet();
				}
				globalMap.remove("tHash_Lookup_row10");

				// ###############################

				ok_Hash.put("tMap_14", true);
				end_Hash.put("tMap_14", System.currentTimeMillis());

				/**
				 * [tMap_14 end ] stop
				 */

				/**
				 * [tAdvancedHash_pa_ente_tipo_dovuto end ] start
				 */

				currentComponent = "tAdvancedHash_pa_ente_tipo_dovuto";

				tHash_Lookup_pa_ente_tipo_dovuto.endPut();

				ok_Hash.put("tAdvancedHash_pa_ente_tipo_dovuto", true);
				end_Hash.put("tAdvancedHash_pa_ente_tipo_dovuto",
						System.currentTimeMillis());

				/**
				 * [tAdvancedHash_pa_ente_tipo_dovuto end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_14"
			globalMap.remove("tHash_Lookup_row10");

			try {

				/**
				 * [tPostgresqlInput_22 finally ] start
				 */

				currentComponent = "tPostgresqlInput_22";

				/**
				 * [tPostgresqlInput_22 finally ] stop
				 */

				/**
				 * [tMap_14 finally ] start
				 */

				currentComponent = "tMap_14";

				/**
				 * [tMap_14 finally ] stop
				 */

				/**
				 * [tAdvancedHash_pa_ente_tipo_dovuto finally ] start
				 */

				currentComponent = "tAdvancedHash_pa_ente_tipo_dovuto";

				/**
				 * [tAdvancedHash_pa_ente_tipo_dovuto finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_22_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements
			routines.system.IPersistableComparableLookupRow<row10Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_ente_id;

		public long getMygov_ente_id() {
			return this.mygov_ente_id;
		}

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		public String codice_fiscale_ente;

		public String getCodice_fiscale_ente() {
			return this.codice_fiscale_ente;
		}

		public String de_nome_ente;

		public String getDe_nome_ente() {
			return this.de_nome_ente;
		}

		public String email_amministratore;

		public String getEmail_amministratore() {
			return this.email_amministratore;
		}

		public java.util.Date dt_creazione;

		public java.util.Date getDt_creazione() {
			return this.dt_creazione;
		}

		public java.util.Date dt_ultima_modifica;

		public java.util.Date getDt_ultima_modifica() {
			return this.dt_ultima_modifica;
		}

		public String cod_rp_dati_vers_tipo_versamento;

		public String getCod_rp_dati_vers_tipo_versamento() {
			return this.cod_rp_dati_vers_tipo_versamento;
		}

		public Double num_rp_dati_vers_dati_sing_vers_commissione_carico_pa;

		public Double getNum_rp_dati_vers_dati_sing_vers_commissione_carico_pa() {
			return this.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa;
		}

		public String cod_rp_dati_vers_dati_sing_vers_iban_accredito;

		public String getCod_rp_dati_vers_dati_sing_vers_iban_accredito() {
			return this.cod_rp_dati_vers_dati_sing_vers_iban_accredito;
		}

		public String cod_rp_dati_vers_dati_sing_vers_bic_accredito;

		public String getCod_rp_dati_vers_dati_sing_vers_bic_accredito() {
			return this.cod_rp_dati_vers_dati_sing_vers_bic_accredito;
		}

		public String cod_rp_dati_vers_dati_sing_vers_iban_appoggio;

		public String getCod_rp_dati_vers_dati_sing_vers_iban_appoggio() {
			return this.cod_rp_dati_vers_dati_sing_vers_iban_appoggio;
		}

		public String cod_rp_dati_vers_dati_sing_vers_bic_appoggio;

		public String getCod_rp_dati_vers_dati_sing_vers_bic_appoggio() {
			return this.cod_rp_dati_vers_dati_sing_vers_bic_appoggio;
		}

		public String mybox_client_key;

		public String getMybox_client_key() {
			return this.mybox_client_key;
		}

		public String mybox_client_secret;

		public String getMybox_client_secret() {
			return this.mybox_client_secret;
		}

		public String ente_sil_invia_risposta_pagamento_url;

		public String getEnte_sil_invia_risposta_pagamento_url() {
			return this.ente_sil_invia_risposta_pagamento_url;
		}

		public String cod_global_location_number;

		public String getCod_global_location_number() {
			return this.cod_global_location_number;
		}

		public String de_password;

		public String getDe_password() {
			return this.de_password;
		}

		public String de_rp_ente_benef_denominazione_beneficiario;

		public String getDe_rp_ente_benef_denominazione_beneficiario() {
			return this.de_rp_ente_benef_denominazione_beneficiario;
		}

		public String de_rp_ente_benef_indirizzo_beneficiario;

		public String getDe_rp_ente_benef_indirizzo_beneficiario() {
			return this.de_rp_ente_benef_indirizzo_beneficiario;
		}

		public String de_rp_ente_benef_civico_beneficiario;

		public String getDe_rp_ente_benef_civico_beneficiario() {
			return this.de_rp_ente_benef_civico_beneficiario;
		}

		public String cod_rp_ente_benef_cap_beneficiario;

		public String getCod_rp_ente_benef_cap_beneficiario() {
			return this.cod_rp_ente_benef_cap_beneficiario;
		}

		public String de_rp_ente_benef_localita_beneficiario;

		public String getDe_rp_ente_benef_localita_beneficiario() {
			return this.de_rp_ente_benef_localita_beneficiario;
		}

		public String de_rp_ente_benef_provincia_beneficiario;

		public String getDe_rp_ente_benef_provincia_beneficiario() {
			return this.de_rp_ente_benef_provincia_beneficiario;
		}

		public String cod_rp_ente_benef_nazione_beneficiario;

		public String getCod_rp_ente_benef_nazione_beneficiario() {
			return this.cod_rp_ente_benef_nazione_beneficiario;
		}

		public String de_rp_ente_benef_telefono_beneficiario;

		public String getDe_rp_ente_benef_telefono_beneficiario() {
			return this.de_rp_ente_benef_telefono_beneficiario;
		}

		public String de_rp_ente_benef_sito_web_beneficiario;

		public String getDe_rp_ente_benef_sito_web_beneficiario() {
			return this.de_rp_ente_benef_sito_web_beneficiario;
		}

		public String de_rp_ente_benef_email_beneficiario;

		public String getDe_rp_ente_benef_email_beneficiario() {
			return this.de_rp_ente_benef_email_beneficiario;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.mygov_ente_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.mygov_ente_id != other.mygov_ente_id)
				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.mygov_ente_id = this.mygov_ente_id;
			other.cod_ipa_ente = this.cod_ipa_ente;
			other.codice_fiscale_ente = this.codice_fiscale_ente;
			other.de_nome_ente = this.de_nome_ente;
			other.email_amministratore = this.email_amministratore;
			other.dt_creazione = this.dt_creazione;
			other.dt_ultima_modifica = this.dt_ultima_modifica;
			other.cod_rp_dati_vers_tipo_versamento = this.cod_rp_dati_vers_tipo_versamento;
			other.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa = this.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa;
			other.cod_rp_dati_vers_dati_sing_vers_iban_accredito = this.cod_rp_dati_vers_dati_sing_vers_iban_accredito;
			other.cod_rp_dati_vers_dati_sing_vers_bic_accredito = this.cod_rp_dati_vers_dati_sing_vers_bic_accredito;
			other.cod_rp_dati_vers_dati_sing_vers_iban_appoggio = this.cod_rp_dati_vers_dati_sing_vers_iban_appoggio;
			other.cod_rp_dati_vers_dati_sing_vers_bic_appoggio = this.cod_rp_dati_vers_dati_sing_vers_bic_appoggio;
			other.mybox_client_key = this.mybox_client_key;
			other.mybox_client_secret = this.mybox_client_secret;
			other.ente_sil_invia_risposta_pagamento_url = this.ente_sil_invia_risposta_pagamento_url;
			other.cod_global_location_number = this.cod_global_location_number;
			other.de_password = this.de_password;
			other.de_rp_ente_benef_denominazione_beneficiario = this.de_rp_ente_benef_denominazione_beneficiario;
			other.de_rp_ente_benef_indirizzo_beneficiario = this.de_rp_ente_benef_indirizzo_beneficiario;
			other.de_rp_ente_benef_civico_beneficiario = this.de_rp_ente_benef_civico_beneficiario;
			other.cod_rp_ente_benef_cap_beneficiario = this.cod_rp_ente_benef_cap_beneficiario;
			other.de_rp_ente_benef_localita_beneficiario = this.de_rp_ente_benef_localita_beneficiario;
			other.de_rp_ente_benef_provincia_beneficiario = this.de_rp_ente_benef_provincia_beneficiario;
			other.cod_rp_ente_benef_nazione_beneficiario = this.cod_rp_ente_benef_nazione_beneficiario;
			other.de_rp_ente_benef_telefono_beneficiario = this.de_rp_ente_benef_telefono_beneficiario;
			other.de_rp_ente_benef_sito_web_beneficiario = this.de_rp_ente_benef_sito_web_beneficiario;
			other.de_rp_ente_benef_email_beneficiario = this.de_rp_ente_benef_email_beneficiario;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.mygov_ente_id = this.mygov_ente_id;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_Allinea) {

				try {

					int length = 0;

					this.mygov_ente_id = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_ente_id);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.cod_ipa_ente = readString(dis, ois);

				this.codice_fiscale_ente = readString(dis, ois);

				this.de_nome_ente = readString(dis, ois);

				this.email_amministratore = readString(dis, ois);

				this.dt_creazione = readDate(dis, ois);

				this.dt_ultima_modifica = readDate(dis, ois);

				this.cod_rp_dati_vers_tipo_versamento = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa = null;
				} else {
					this.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa = dis
							.readDouble();
				}

				this.cod_rp_dati_vers_dati_sing_vers_iban_accredito = readString(
						dis, ois);

				this.cod_rp_dati_vers_dati_sing_vers_bic_accredito = readString(
						dis, ois);

				this.cod_rp_dati_vers_dati_sing_vers_iban_appoggio = readString(
						dis, ois);

				this.cod_rp_dati_vers_dati_sing_vers_bic_appoggio = readString(
						dis, ois);

				this.mybox_client_key = readString(dis, ois);

				this.mybox_client_secret = readString(dis, ois);

				this.ente_sil_invia_risposta_pagamento_url = readString(dis,
						ois);

				this.cod_global_location_number = readString(dis, ois);

				this.de_password = readString(dis, ois);

				this.de_rp_ente_benef_denominazione_beneficiario = readString(
						dis, ois);

				this.de_rp_ente_benef_indirizzo_beneficiario = readString(dis,
						ois);

				this.de_rp_ente_benef_civico_beneficiario = readString(dis, ois);

				this.cod_rp_ente_benef_cap_beneficiario = readString(dis, ois);

				this.de_rp_ente_benef_localita_beneficiario = readString(dis,
						ois);

				this.de_rp_ente_benef_provincia_beneficiario = readString(dis,
						ois);

				this.cod_rp_ente_benef_nazione_beneficiario = readString(dis,
						ois);

				this.de_rp_ente_benef_telefono_beneficiario = readString(dis,
						ois);

				this.de_rp_ente_benef_sito_web_beneficiario = readString(dis,
						ois);

				this.de_rp_ente_benef_email_beneficiario = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.cod_ipa_ente, dos, oos);

				writeString(this.codice_fiscale_ente, dos, oos);

				writeString(this.de_nome_ente, dos, oos);

				writeString(this.email_amministratore, dos, oos);

				writeDate(this.dt_creazione, dos, oos);

				writeDate(this.dt_ultima_modifica, dos, oos);

				writeString(this.cod_rp_dati_vers_tipo_versamento, dos, oos);

				if (this.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa);
				}

				writeString(
						this.cod_rp_dati_vers_dati_sing_vers_iban_accredito,
						dos, oos);

				writeString(this.cod_rp_dati_vers_dati_sing_vers_bic_accredito,
						dos, oos);

				writeString(this.cod_rp_dati_vers_dati_sing_vers_iban_appoggio,
						dos, oos);

				writeString(this.cod_rp_dati_vers_dati_sing_vers_bic_appoggio,
						dos, oos);

				writeString(this.mybox_client_key, dos, oos);

				writeString(this.mybox_client_secret, dos, oos);

				writeString(this.ente_sil_invia_risposta_pagamento_url, dos,
						oos);

				writeString(this.cod_global_location_number, dos, oos);

				writeString(this.de_password, dos, oos);

				writeString(this.de_rp_ente_benef_denominazione_beneficiario,
						dos, oos);

				writeString(this.de_rp_ente_benef_indirizzo_beneficiario, dos,
						oos);

				writeString(this.de_rp_ente_benef_civico_beneficiario, dos, oos);

				writeString(this.cod_rp_ente_benef_cap_beneficiario, dos, oos);

				writeString(this.de_rp_ente_benef_localita_beneficiario, dos,
						oos);

				writeString(this.de_rp_ente_benef_provincia_beneficiario, dos,
						oos);

				writeString(this.cod_rp_ente_benef_nazione_beneficiario, dos,
						oos);

				writeString(this.de_rp_ente_benef_telefono_beneficiario, dos,
						oos);

				writeString(this.de_rp_ente_benef_sito_web_beneficiario, dos,
						oos);

				writeString(this.de_rp_ente_benef_email_beneficiario, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_ente_id=" + String.valueOf(mygov_ente_id));
			sb.append(",cod_ipa_ente=" + cod_ipa_ente);
			sb.append(",codice_fiscale_ente=" + codice_fiscale_ente);
			sb.append(",de_nome_ente=" + de_nome_ente);
			sb.append(",email_amministratore=" + email_amministratore);
			sb.append(",dt_creazione=" + String.valueOf(dt_creazione));
			sb.append(",dt_ultima_modifica="
					+ String.valueOf(dt_ultima_modifica));
			sb.append(",cod_rp_dati_vers_tipo_versamento="
					+ cod_rp_dati_vers_tipo_versamento);
			sb.append(",num_rp_dati_vers_dati_sing_vers_commissione_carico_pa="
					+ String.valueOf(num_rp_dati_vers_dati_sing_vers_commissione_carico_pa));
			sb.append(",cod_rp_dati_vers_dati_sing_vers_iban_accredito="
					+ cod_rp_dati_vers_dati_sing_vers_iban_accredito);
			sb.append(",cod_rp_dati_vers_dati_sing_vers_bic_accredito="
					+ cod_rp_dati_vers_dati_sing_vers_bic_accredito);
			sb.append(",cod_rp_dati_vers_dati_sing_vers_iban_appoggio="
					+ cod_rp_dati_vers_dati_sing_vers_iban_appoggio);
			sb.append(",cod_rp_dati_vers_dati_sing_vers_bic_appoggio="
					+ cod_rp_dati_vers_dati_sing_vers_bic_appoggio);
			sb.append(",mybox_client_key=" + mybox_client_key);
			sb.append(",mybox_client_secret=" + mybox_client_secret);
			sb.append(",ente_sil_invia_risposta_pagamento_url="
					+ ente_sil_invia_risposta_pagamento_url);
			sb.append(",cod_global_location_number="
					+ cod_global_location_number);
			sb.append(",de_password=" + de_password);
			sb.append(",de_rp_ente_benef_denominazione_beneficiario="
					+ de_rp_ente_benef_denominazione_beneficiario);
			sb.append(",de_rp_ente_benef_indirizzo_beneficiario="
					+ de_rp_ente_benef_indirizzo_beneficiario);
			sb.append(",de_rp_ente_benef_civico_beneficiario="
					+ de_rp_ente_benef_civico_beneficiario);
			sb.append(",cod_rp_ente_benef_cap_beneficiario="
					+ cod_rp_ente_benef_cap_beneficiario);
			sb.append(",de_rp_ente_benef_localita_beneficiario="
					+ de_rp_ente_benef_localita_beneficiario);
			sb.append(",de_rp_ente_benef_provincia_beneficiario="
					+ de_rp_ente_benef_provincia_beneficiario);
			sb.append(",cod_rp_ente_benef_nazione_beneficiario="
					+ cod_rp_ente_benef_nazione_beneficiario);
			sb.append(",de_rp_ente_benef_telefono_beneficiario="
					+ de_rp_ente_benef_telefono_beneficiario);
			sb.append(",de_rp_ente_benef_sito_web_beneficiario="
					+ de_rp_ente_benef_sito_web_beneficiario);
			sb.append(",de_rp_ente_benef_email_beneficiario="
					+ de_rp_ente_benef_email_beneficiario);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.mygov_ente_id,
					other.mygov_ente_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_9Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();

				/**
				 * [tAdvancedHash_row10 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row10", false);
				start_Hash.put("tAdvancedHash_row10",
						System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row10";

				int tos_count_tAdvancedHash_row10 = 0;

				// connection name:row10
				// source node:tPostgresqlInput_9 -
				// inputs:(after_tPostgresqlInput_22) outputs:(row10,row10) |
				// target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
				// linked node: tMap_14 - inputs:(row27,row10)
				// outputs:(pa_ente_tipo_dovuto,pa_ente_tipo_dovuto)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row10Struct> getLookup(matchingModeEnum_row10);

				globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);

				/**
				 * [tAdvancedHash_row10 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_9 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_9", false);
				start_Hash
						.put("tPostgresqlInput_9", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_9");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_9";

				int tos_count_tPostgresqlInput_9 = 0;

				int nb_line_tPostgresqlInput_9 = 0;
				java.sql.Connection conn_tPostgresqlInput_9 = null;
				conn_tPostgresqlInput_9 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_9 = conn_tPostgresqlInput_9
						.createStatement();

				String dbquery_tPostgresqlInput_9 = "SELECT \n  \"mygov_ente\".\"mygov_ente_id\", \n  \"mygov_ente\".\"cod_ipa_ente\", \n  \"mygov_ente\".\"codice_fiscale_ente\", \n  \"mygov_ente\".\"de_nome_ente\", \n  \"mygov_ente\".\"email_amministratore\", \n  \"mygov_ente\".\"dt_creazione\", \n  \"mygov_ente\".\"dt_ultima_modifica\", \n  \"mygov_ente\".\"cod_rp_dati_vers_tipo_versamento\",  \n  \"mygov_ente\".\"num_rp_dati_vers_dati_sing_vers_commissione_carico_pa\",  \n  \"mygov_ente\".\"cod_rp_dati_vers_dati_sing_vers_iban_accredito\", \n  \"mygov_ente\".\"cod_rp_dati_vers_dati_sing_vers_bic_accredito\",  \n  \"mygov_ente\".\"cod_rp_dati_vers_dati_sing_vers_iban_appoggio\",  \n  \"mygov_ente\".\"cod_rp_dati_vers_dati_sing_vers_bic_appoggio\", \n  \"mygov_ente\".\"mybox_client_key\", \n  \"mygov_ente\".\"mybox_client_secret\", \n  \"mygov_ente\".\"ente_sil_invia_risposta_pagamento_url\", \n  \"mygov_ente\".\"cod_global_location_number\", \n  \"mygov_ente\".\"de_password\", \n  \"mygov_ente\".\"de_rp_ente_benef_denominazione_beneficiario\", \n  \"mygov_ente\".\"de_rp_ente_benef_indirizzo_beneficiario\", \n  \"mygov_ente\".\"de_rp_ente_benef_civico_beneficiario\", \n  \"mygov_ente\".\"cod_rp_ente_benef_cap_beneficiario\", \n  \"mygov_ente\".\"de_rp_ente_benef_localita_beneficiario\", \n  \"mygov_ente\".\"de_rp_ente_benef_provincia_beneficiario\", \n  \"mygov_ente\".\"cod_rp_ente_benef_nazione_beneficiario\", \n  \"mygov_ente\".\"de_rp_ente_benef_telefono_beneficiario\", \n  \"mygov_ente\".\"de_rp_ente_benef_sito_web_beneficiario\", \n  \"mygov_ente\".\"de_rp_ente_benef_email_beneficiario\"\nFROM \"mygov_ente\"";

				globalMap.put("tPostgresqlInput_9_QUERY",
						dbquery_tPostgresqlInput_9);
				java.sql.ResultSet rs_tPostgresqlInput_9 = null;
				try {
					rs_tPostgresqlInput_9 = stmt_tPostgresqlInput_9
							.executeQuery(dbquery_tPostgresqlInput_9);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_9 = rs_tPostgresqlInput_9
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_9 = rsmd_tPostgresqlInput_9
							.getColumnCount();

					String tmpContent_tPostgresqlInput_9 = null;

					while (rs_tPostgresqlInput_9.next()) {
						nb_line_tPostgresqlInput_9++;

						if (colQtyInRs_tPostgresqlInput_9 < 1) {
							row10.mygov_ente_id = 0;
						} else {

							if (rs_tPostgresqlInput_9.getObject(1) != null) {
								row10.mygov_ente_id = rs_tPostgresqlInput_9
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 2) {
							row10.cod_ipa_ente = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(2);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.cod_ipa_ente = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.cod_ipa_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 3) {
							row10.codice_fiscale_ente = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(3);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.codice_fiscale_ente = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.codice_fiscale_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 4) {
							row10.de_nome_ente = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(4);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.de_nome_ente = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.de_nome_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 5) {
							row10.email_amministratore = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(5);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.email_amministratore = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.email_amministratore = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 6) {
							row10.dt_creazione = null;
						} else {

							if (rs_tPostgresqlInput_9.getTimestamp(6) != null) {
								row10.dt_creazione = new java.util.Date(
										rs_tPostgresqlInput_9.getTimestamp(6)
												.getTime());
							} else {
								row10.dt_creazione = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 7) {
							row10.dt_ultima_modifica = null;
						} else {

							if (rs_tPostgresqlInput_9.getTimestamp(7) != null) {
								row10.dt_ultima_modifica = new java.util.Date(
										rs_tPostgresqlInput_9.getTimestamp(7)
												.getTime());
							} else {
								row10.dt_ultima_modifica = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 8) {
							row10.cod_rp_dati_vers_tipo_versamento = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(8);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.cod_rp_dati_vers_tipo_versamento = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.cod_rp_dati_vers_tipo_versamento = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 9) {
							row10.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa = null;
						} else {

							if (rs_tPostgresqlInput_9.getObject(9) != null) {
								row10.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa = rs_tPostgresqlInput_9
										.getDouble(9);
							} else {
								row10.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 10) {
							row10.cod_rp_dati_vers_dati_sing_vers_iban_accredito = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(10);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.cod_rp_dati_vers_dati_sing_vers_iban_accredito = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.cod_rp_dati_vers_dati_sing_vers_iban_accredito = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 11) {
							row10.cod_rp_dati_vers_dati_sing_vers_bic_accredito = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(11);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.cod_rp_dati_vers_dati_sing_vers_bic_accredito = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.cod_rp_dati_vers_dati_sing_vers_bic_accredito = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 12) {
							row10.cod_rp_dati_vers_dati_sing_vers_iban_appoggio = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(12);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.cod_rp_dati_vers_dati_sing_vers_iban_appoggio = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.cod_rp_dati_vers_dati_sing_vers_iban_appoggio = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 13) {
							row10.cod_rp_dati_vers_dati_sing_vers_bic_appoggio = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(13);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.cod_rp_dati_vers_dati_sing_vers_bic_appoggio = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.cod_rp_dati_vers_dati_sing_vers_bic_appoggio = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 14) {
							row10.mybox_client_key = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(14);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.mybox_client_key = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.mybox_client_key = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 15) {
							row10.mybox_client_secret = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(15);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.mybox_client_secret = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.mybox_client_secret = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 16) {
							row10.ente_sil_invia_risposta_pagamento_url = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(16);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.ente_sil_invia_risposta_pagamento_url = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.ente_sil_invia_risposta_pagamento_url = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 17) {
							row10.cod_global_location_number = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(17);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.cod_global_location_number = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.cod_global_location_number = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 18) {
							row10.de_password = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(18);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.de_password = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.de_password = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 19) {
							row10.de_rp_ente_benef_denominazione_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(19);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.de_rp_ente_benef_denominazione_beneficiario = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.de_rp_ente_benef_denominazione_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 20) {
							row10.de_rp_ente_benef_indirizzo_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(20);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.de_rp_ente_benef_indirizzo_beneficiario = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.de_rp_ente_benef_indirizzo_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 21) {
							row10.de_rp_ente_benef_civico_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(21);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.de_rp_ente_benef_civico_beneficiario = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.de_rp_ente_benef_civico_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 22) {
							row10.cod_rp_ente_benef_cap_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(22);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.cod_rp_ente_benef_cap_beneficiario = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.cod_rp_ente_benef_cap_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 23) {
							row10.de_rp_ente_benef_localita_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(23);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.de_rp_ente_benef_localita_beneficiario = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.de_rp_ente_benef_localita_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 24) {
							row10.de_rp_ente_benef_provincia_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(24);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.de_rp_ente_benef_provincia_beneficiario = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.de_rp_ente_benef_provincia_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 25) {
							row10.cod_rp_ente_benef_nazione_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(25);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.cod_rp_ente_benef_nazione_beneficiario = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.cod_rp_ente_benef_nazione_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 26) {
							row10.de_rp_ente_benef_telefono_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(26);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.de_rp_ente_benef_telefono_beneficiario = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.de_rp_ente_benef_telefono_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 27) {
							row10.de_rp_ente_benef_sito_web_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(27);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.de_rp_ente_benef_sito_web_beneficiario = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.de_rp_ente_benef_sito_web_beneficiario = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_9 < 28) {
							row10.de_rp_ente_benef_email_beneficiario = null;
						} else {

							tmpContent_tPostgresqlInput_9 = rs_tPostgresqlInput_9
									.getString(28);
							if (tmpContent_tPostgresqlInput_9 != null) {
								row10.de_rp_ente_benef_email_beneficiario = tmpContent_tPostgresqlInput_9
										.trim();
							} else {
								row10.de_rp_ente_benef_email_beneficiario = null;
							}
						}

						/**
						 * [tPostgresqlInput_9 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_9 main ] start
						 */

						currentComponent = "tPostgresqlInput_9";

						tos_count_tPostgresqlInput_9++;

						/**
						 * [tPostgresqlInput_9 main ] stop
						 */

						/**
						 * [tAdvancedHash_row10 main ] start
						 */

						currentComponent = "tAdvancedHash_row10";

						row10Struct row10_HashRow = new row10Struct();

						row10_HashRow.mygov_ente_id = row10.mygov_ente_id;

						row10_HashRow.cod_ipa_ente = row10.cod_ipa_ente;

						row10_HashRow.codice_fiscale_ente = row10.codice_fiscale_ente;

						row10_HashRow.de_nome_ente = row10.de_nome_ente;

						row10_HashRow.email_amministratore = row10.email_amministratore;

						row10_HashRow.dt_creazione = row10.dt_creazione;

						row10_HashRow.dt_ultima_modifica = row10.dt_ultima_modifica;

						row10_HashRow.cod_rp_dati_vers_tipo_versamento = row10.cod_rp_dati_vers_tipo_versamento;

						row10_HashRow.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa = row10.num_rp_dati_vers_dati_sing_vers_commissione_carico_pa;

						row10_HashRow.cod_rp_dati_vers_dati_sing_vers_iban_accredito = row10.cod_rp_dati_vers_dati_sing_vers_iban_accredito;

						row10_HashRow.cod_rp_dati_vers_dati_sing_vers_bic_accredito = row10.cod_rp_dati_vers_dati_sing_vers_bic_accredito;

						row10_HashRow.cod_rp_dati_vers_dati_sing_vers_iban_appoggio = row10.cod_rp_dati_vers_dati_sing_vers_iban_appoggio;

						row10_HashRow.cod_rp_dati_vers_dati_sing_vers_bic_appoggio = row10.cod_rp_dati_vers_dati_sing_vers_bic_appoggio;

						row10_HashRow.mybox_client_key = row10.mybox_client_key;

						row10_HashRow.mybox_client_secret = row10.mybox_client_secret;

						row10_HashRow.ente_sil_invia_risposta_pagamento_url = row10.ente_sil_invia_risposta_pagamento_url;

						row10_HashRow.cod_global_location_number = row10.cod_global_location_number;

						row10_HashRow.de_password = row10.de_password;

						row10_HashRow.de_rp_ente_benef_denominazione_beneficiario = row10.de_rp_ente_benef_denominazione_beneficiario;

						row10_HashRow.de_rp_ente_benef_indirizzo_beneficiario = row10.de_rp_ente_benef_indirizzo_beneficiario;

						row10_HashRow.de_rp_ente_benef_civico_beneficiario = row10.de_rp_ente_benef_civico_beneficiario;

						row10_HashRow.cod_rp_ente_benef_cap_beneficiario = row10.cod_rp_ente_benef_cap_beneficiario;

						row10_HashRow.de_rp_ente_benef_localita_beneficiario = row10.de_rp_ente_benef_localita_beneficiario;

						row10_HashRow.de_rp_ente_benef_provincia_beneficiario = row10.de_rp_ente_benef_provincia_beneficiario;

						row10_HashRow.cod_rp_ente_benef_nazione_beneficiario = row10.cod_rp_ente_benef_nazione_beneficiario;

						row10_HashRow.de_rp_ente_benef_telefono_beneficiario = row10.de_rp_ente_benef_telefono_beneficiario;

						row10_HashRow.de_rp_ente_benef_sito_web_beneficiario = row10.de_rp_ente_benef_sito_web_beneficiario;

						row10_HashRow.de_rp_ente_benef_email_beneficiario = row10.de_rp_ente_benef_email_beneficiario;

						tHash_Lookup_row10.put(row10_HashRow);

						tos_count_tAdvancedHash_row10++;

						/**
						 * [tAdvancedHash_row10 main ] stop
						 */

						/**
						 * [tPostgresqlInput_9 end ] start
						 */

						currentComponent = "tPostgresqlInput_9";

					}
				} finally {
					stmt_tPostgresqlInput_9.close();

				}
				globalMap.put("tPostgresqlInput_9_NB_LINE",
						nb_line_tPostgresqlInput_9);

				ok_Hash.put("tPostgresqlInput_9", true);
				end_Hash.put("tPostgresqlInput_9", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_9",
						end_Hash.get("tPostgresqlInput_9")
								- start_Hash.get("tPostgresqlInput_9"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_9 end ] stop
				 */

				/**
				 * [tAdvancedHash_row10 end ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				tHash_Lookup_row10.endPut();

				ok_Hash.put("tAdvancedHash_row10", true);
				end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row10 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_9 finally ] start
				 */

				currentComponent = "tPostgresqlInput_9";

				/**
				 * [tPostgresqlInput_9 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row10 finally ] start
				 */

				currentComponent = "tAdvancedHash_row10";

				/**
				 * [tAdvancedHash_row10 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_9_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Allinea AllineaClass = new Allinea();

		int exitCode = AllineaClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Allinea.class.getClassLoader()
					.getResourceAsStream(
							"allinea_database/allinea_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.conn_db_900_6 = (String) context
					.getProperty("conn_db_900_6");
			context.conn_host_900_6 = (String) context
					.getProperty("conn_host_900_6");
			context.conn_port_900_6 = (String) context
					.getProperty("conn_port_900_6");
			context.conn_psw_900_6 = (String) context
					.getProperty("conn_psw_900_6");
			context.conn_schema_900_6 = (String) context
					.getProperty("conn_schema_900_6");
			context.conn_usr_900_6 = (String) context
					.getProperty("conn_usr_900_6");
			context.conn_db_E45_1 = (String) context
					.getProperty("conn_db_E45_1");
			context.conn_host_E45_1 = (String) context
					.getProperty("conn_host_E45_1");
			context.conn_port_E45_1 = (String) context
					.getProperty("conn_port_E45_1");
			context.conn_psw_E45_1 = (String) context
					.getProperty("conn_psw_E45_1");
			context.conn_schema_E45_1 = (String) context
					.getProperty("conn_schema_E45_1");
			context.conn_usr_E45_1 = (String) context
					.getProperty("conn_usr_E45_1");
			context.conn_db_E45_2 = (String) context
					.getProperty("conn_db_E45_2");
			context.conn_host_E45_2 = (String) context
					.getProperty("conn_host_E45_2");
			context.conn_port_E45_2 = (String) context
					.getProperty("conn_port_E45_2");
			context.conn_psw_E45_2 = (String) context
					.getProperty("conn_psw_E45_2");
			context.conn_schema_E45_2 = (String) context
					.getProperty("conn_schema_E45_2");
			context.conn_usr_E45_2 = (String) context
					.getProperty("conn_usr_E45_2");
			context.conn_db_E45_4 = (String) context
					.getProperty("conn_db_E45_4");
			context.conn_host_E45_4 = (String) context
					.getProperty("conn_host_E45_4");
			context.conn_port_E45_4 = (String) context
					.getProperty("conn_port_E45_4");
			context.conn_psw_E45_4 = (String) context
					.getProperty("conn_psw_E45_4");
			context.conn_schema_E45_4 = (String) context
					.getProperty("conn_schema_E45_4");
			context.conn_usr_E45_4 = (String) context
					.getProperty("conn_usr_E45_4");
			context.ambiente = (String) context.getProperty("ambiente");
			context.directory_talend = (String) context
					.getProperty("directory_talend");
			try {
				context.numero_minuti_avviso = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("numero_minuti_avviso"));
			} catch (NumberFormatException e) {
				context.numero_minuti_avviso = null;
			}
			try {
				context.numero_ore_trigger_batch = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("numero_ore_trigger_batch"));
			} catch (NumberFormatException e) {
				context.numero_ore_trigger_batch = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("conn_db_900_6")) {
				context.conn_db_900_6 = (String) parentContextMap
						.get("conn_db_900_6");
			}
			if (parentContextMap.containsKey("conn_host_900_6")) {
				context.conn_host_900_6 = (String) parentContextMap
						.get("conn_host_900_6");
			}
			if (parentContextMap.containsKey("conn_port_900_6")) {
				context.conn_port_900_6 = (String) parentContextMap
						.get("conn_port_900_6");
			}
			if (parentContextMap.containsKey("conn_psw_900_6")) {
				context.conn_psw_900_6 = (String) parentContextMap
						.get("conn_psw_900_6");
			}
			if (parentContextMap.containsKey("conn_schema_900_6")) {
				context.conn_schema_900_6 = (String) parentContextMap
						.get("conn_schema_900_6");
			}
			if (parentContextMap.containsKey("conn_usr_900_6")) {
				context.conn_usr_900_6 = (String) parentContextMap
						.get("conn_usr_900_6");
			}
			if (parentContextMap.containsKey("conn_db_E45_1")) {
				context.conn_db_E45_1 = (String) parentContextMap
						.get("conn_db_E45_1");
			}
			if (parentContextMap.containsKey("conn_host_E45_1")) {
				context.conn_host_E45_1 = (String) parentContextMap
						.get("conn_host_E45_1");
			}
			if (parentContextMap.containsKey("conn_port_E45_1")) {
				context.conn_port_E45_1 = (String) parentContextMap
						.get("conn_port_E45_1");
			}
			if (parentContextMap.containsKey("conn_psw_E45_1")) {
				context.conn_psw_E45_1 = (String) parentContextMap
						.get("conn_psw_E45_1");
			}
			if (parentContextMap.containsKey("conn_schema_E45_1")) {
				context.conn_schema_E45_1 = (String) parentContextMap
						.get("conn_schema_E45_1");
			}
			if (parentContextMap.containsKey("conn_usr_E45_1")) {
				context.conn_usr_E45_1 = (String) parentContextMap
						.get("conn_usr_E45_1");
			}
			if (parentContextMap.containsKey("conn_db_E45_2")) {
				context.conn_db_E45_2 = (String) parentContextMap
						.get("conn_db_E45_2");
			}
			if (parentContextMap.containsKey("conn_host_E45_2")) {
				context.conn_host_E45_2 = (String) parentContextMap
						.get("conn_host_E45_2");
			}
			if (parentContextMap.containsKey("conn_port_E45_2")) {
				context.conn_port_E45_2 = (String) parentContextMap
						.get("conn_port_E45_2");
			}
			if (parentContextMap.containsKey("conn_psw_E45_2")) {
				context.conn_psw_E45_2 = (String) parentContextMap
						.get("conn_psw_E45_2");
			}
			if (parentContextMap.containsKey("conn_schema_E45_2")) {
				context.conn_schema_E45_2 = (String) parentContextMap
						.get("conn_schema_E45_2");
			}
			if (parentContextMap.containsKey("conn_usr_E45_2")) {
				context.conn_usr_E45_2 = (String) parentContextMap
						.get("conn_usr_E45_2");
			}
			if (parentContextMap.containsKey("conn_db_E45_4")) {
				context.conn_db_E45_4 = (String) parentContextMap
						.get("conn_db_E45_4");
			}
			if (parentContextMap.containsKey("conn_host_E45_4")) {
				context.conn_host_E45_4 = (String) parentContextMap
						.get("conn_host_E45_4");
			}
			if (parentContextMap.containsKey("conn_port_E45_4")) {
				context.conn_port_E45_4 = (String) parentContextMap
						.get("conn_port_E45_4");
			}
			if (parentContextMap.containsKey("conn_psw_E45_4")) {
				context.conn_psw_E45_4 = (String) parentContextMap
						.get("conn_psw_E45_4");
			}
			if (parentContextMap.containsKey("conn_schema_E45_4")) {
				context.conn_schema_E45_4 = (String) parentContextMap
						.get("conn_schema_E45_4");
			}
			if (parentContextMap.containsKey("conn_usr_E45_4")) {
				context.conn_usr_E45_4 = (String) parentContextMap
						.get("conn_usr_E45_4");
			}
			if (parentContextMap.containsKey("ambiente")) {
				context.ambiente = (String) parentContextMap.get("ambiente");
			}
			if (parentContextMap.containsKey("directory_talend")) {
				context.directory_talend = (String) parentContextMap
						.get("directory_talend");
			}
			if (parentContextMap.containsKey("numero_minuti_avviso")) {
				context.numero_minuti_avviso = (Integer) parentContextMap
						.get("numero_minuti_avviso");
			}
			if (parentContextMap.containsKey("numero_ore_trigger_batch")) {
				context.numero_ore_trigger_batch = (Integer) parentContextMap
						.get("numero_ore_trigger_batch");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_1) {
			globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

			e_tJava_1.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_2) {
			globalMap.put("tJava_2_SUBPROCESS_STATE", -1);

			e_tJava_2.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_3) {
			globalMap.put("tJava_3_SUBPROCESS_STATE", -1);

			e_tJava_3.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_4) {
			globalMap.put("tJava_4_SUBPROCESS_STATE", -1);

			e_tJava_4.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_5) {
			globalMap.put("tJava_5_SUBPROCESS_STATE", -1);

			e_tJava_5.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_6) {
			globalMap.put("tJava_6_SUBPROCESS_STATE", -1);

			e_tJava_6.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_7Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_7) {
			globalMap.put("tJava_7_SUBPROCESS_STATE", -1);

			e_tJava_7.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_8Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_8) {
			globalMap.put("tJava_8_SUBPROCESS_STATE", -1);

			e_tJava_8.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_9Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_9) {
			globalMap.put("tJava_9_SUBPROCESS_STATE", -1);

			e_tJava_9.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Allinea");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status,
				(end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		closeSqlDbConnections();

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {
		closeSqlDbConnections();
	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tPostgresqlConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tPostgresqlConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tPostgresqlConnection_3");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tPostgresqlConnection_4");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tPostgresqlConnection_1",
				globalMap.get("conn_tPostgresqlConnection_1"));
		connections.put("conn_tPostgresqlConnection_2",
				globalMap.get("conn_tPostgresqlConnection_2"));
		connections.put("conn_tPostgresqlConnection_3",
				globalMap.get("conn_tPostgresqlConnection_3"));
		connections.put("conn_tPostgresqlConnection_4",
				globalMap.get("conn_tPostgresqlConnection_4"));
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 977064 characters generated by Talend Open Studio for Data Integration on the
 * March 1, 2017 9:29:16 AM CET
 ************************************************************************************************/
