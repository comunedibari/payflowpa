// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package allinea_database_mybox.allinea_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.Utilities;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;
import routines.Utilities;

//the import part of tLibraryLoad_1

//the import part of tJava_12
//import java.util.List;

//the import part of tJava_14
//import java.util.List;

//the import part of tJava_15
//import java.util.List;

//the import part of tJava_6
//import java.util.List;

//the import part of tJava_9
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: Allinea Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 6.0.1.20150908_1633
 * @status 
 */
public class Allinea implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (conn_db_900_6 != null) {

				this.setProperty("conn_db_900_6", conn_db_900_6.toString());

			}

			if (conn_host_900_6 != null) {

				this.setProperty("conn_host_900_6", conn_host_900_6.toString());

			}

			if (conn_port_900_6 != null) {

				this.setProperty("conn_port_900_6", conn_port_900_6.toString());

			}

			if (conn_psw_900_6 != null) {

				this.setProperty("conn_psw_900_6", conn_psw_900_6.toString());

			}

			if (conn_schema_900_6 != null) {

				this.setProperty("conn_schema_900_6",
						conn_schema_900_6.toString());

			}

			if (conn_usr_900_6 != null) {

				this.setProperty("conn_usr_900_6", conn_usr_900_6.toString());

			}

			if (conn_db_E45_1 != null) {

				this.setProperty("conn_db_E45_1", conn_db_E45_1.toString());

			}

			if (conn_host_E45_1 != null) {

				this.setProperty("conn_host_E45_1", conn_host_E45_1.toString());

			}

			if (conn_port_E45_1 != null) {

				this.setProperty("conn_port_E45_1", conn_port_E45_1.toString());

			}

			if (conn_psw_E45_1 != null) {

				this.setProperty("conn_psw_E45_1", conn_psw_E45_1.toString());

			}

			if (conn_schema_E45_1 != null) {

				this.setProperty("conn_schema_E45_1",
						conn_schema_E45_1.toString());

			}

			if (conn_usr_E45_1 != null) {

				this.setProperty("conn_usr_E45_1", conn_usr_E45_1.toString());

			}

			if (conn_db_E45_2 != null) {

				this.setProperty("conn_db_E45_2", conn_db_E45_2.toString());

			}

			if (conn_host_E45_2 != null) {

				this.setProperty("conn_host_E45_2", conn_host_E45_2.toString());

			}

			if (conn_port_E45_2 != null) {

				this.setProperty("conn_port_E45_2", conn_port_E45_2.toString());

			}

			if (conn_psw_E45_2 != null) {

				this.setProperty("conn_psw_E45_2", conn_psw_E45_2.toString());

			}

			if (conn_schema_E45_2 != null) {

				this.setProperty("conn_schema_E45_2",
						conn_schema_E45_2.toString());

			}

			if (conn_usr_E45_2 != null) {

				this.setProperty("conn_usr_E45_2", conn_usr_E45_2.toString());

			}

			if (conn_db_E45_3 != null) {

				this.setProperty("conn_db_E45_3", conn_db_E45_3.toString());

			}

			if (conn_host_E45_3 != null) {

				this.setProperty("conn_host_E45_3", conn_host_E45_3.toString());

			}

			if (conn_port_E45_3 != null) {

				this.setProperty("conn_port_E45_3", conn_port_E45_3.toString());

			}

			if (conn_psw_E45_3 != null) {

				this.setProperty("conn_psw_E45_3", conn_psw_E45_3.toString());

			}

			if (conn_schema_E45_3 != null) {

				this.setProperty("conn_schema_E45_3",
						conn_schema_E45_3.toString());

			}

			if (conn_usr_E45_3 != null) {

				this.setProperty("conn_usr_E45_3", conn_usr_E45_3.toString());

			}

			if (conn_db_E45_4 != null) {

				this.setProperty("conn_db_E45_4", conn_db_E45_4.toString());

			}

			if (conn_host_E45_4 != null) {

				this.setProperty("conn_host_E45_4", conn_host_E45_4.toString());

			}

			if (conn_port_E45_4 != null) {

				this.setProperty("conn_port_E45_4", conn_port_E45_4.toString());

			}

			if (conn_psw_E45_4 != null) {

				this.setProperty("conn_psw_E45_4", conn_psw_E45_4.toString());

			}

			if (conn_schema_E45_4 != null) {

				this.setProperty("conn_schema_E45_4",
						conn_schema_E45_4.toString());

			}

			if (conn_usr_E45_4 != null) {

				this.setProperty("conn_usr_E45_4", conn_usr_E45_4.toString());

			}

			if (ambiente != null) {

				this.setProperty("ambiente", ambiente.toString());

			}

			if (codice_applicazione_mypay_fesp != null) {

				this.setProperty("codice_applicazione_mypay_fesp",
						codice_applicazione_mypay_fesp.toString());

			}

			if (codice_applicazione_mypay_pa != null) {

				this.setProperty("codice_applicazione_mypay_pa",
						codice_applicazione_mypay_pa.toString());

			}

			if (codice_applicazione_mypivot != null) {

				this.setProperty("codice_applicazione_mypivot",
						codice_applicazione_mypivot.toString());

			}

			if (directory_talend != null) {

				this.setProperty("directory_talend",
						directory_talend.toString());

			}

			if (ente_predefinito != null) {

				this.setProperty("ente_predefinito",
						ente_predefinito.toString());

			}

			if (numero_minuti_avviso != null) {

				this.setProperty("numero_minuti_avviso",
						numero_minuti_avviso.toString());

			}

			if (numero_ore_trigger_batch != null) {

				this.setProperty("numero_ore_trigger_batch",
						numero_ore_trigger_batch.toString());

			}

			if (pa_public_url != null) {

				this.setProperty("pa_public_url", pa_public_url.toString());

			}

		}

		public String conn_db_900_6;

		public String getConn_db_900_6() {
			return this.conn_db_900_6;
		}

		public String conn_host_900_6;

		public String getConn_host_900_6() {
			return this.conn_host_900_6;
		}

		public String conn_port_900_6;

		public String getConn_port_900_6() {
			return this.conn_port_900_6;
		}

		public String conn_psw_900_6;

		public String getConn_psw_900_6() {
			return this.conn_psw_900_6;
		}

		public String conn_schema_900_6;

		public String getConn_schema_900_6() {
			return this.conn_schema_900_6;
		}

		public String conn_usr_900_6;

		public String getConn_usr_900_6() {
			return this.conn_usr_900_6;
		}

		public String conn_db_E45_1;

		public String getConn_db_E45_1() {
			return this.conn_db_E45_1;
		}

		public String conn_host_E45_1;

		public String getConn_host_E45_1() {
			return this.conn_host_E45_1;
		}

		public String conn_port_E45_1;

		public String getConn_port_E45_1() {
			return this.conn_port_E45_1;
		}

		public String conn_psw_E45_1;

		public String getConn_psw_E45_1() {
			return this.conn_psw_E45_1;
		}

		public String conn_schema_E45_1;

		public String getConn_schema_E45_1() {
			return this.conn_schema_E45_1;
		}

		public String conn_usr_E45_1;

		public String getConn_usr_E45_1() {
			return this.conn_usr_E45_1;
		}

		public String conn_db_E45_2;

		public String getConn_db_E45_2() {
			return this.conn_db_E45_2;
		}

		public String conn_host_E45_2;

		public String getConn_host_E45_2() {
			return this.conn_host_E45_2;
		}

		public String conn_port_E45_2;

		public String getConn_port_E45_2() {
			return this.conn_port_E45_2;
		}

		public String conn_psw_E45_2;

		public String getConn_psw_E45_2() {
			return this.conn_psw_E45_2;
		}

		public String conn_schema_E45_2;

		public String getConn_schema_E45_2() {
			return this.conn_schema_E45_2;
		}

		public String conn_usr_E45_2;

		public String getConn_usr_E45_2() {
			return this.conn_usr_E45_2;
		}

		public String conn_db_E45_3;

		public String getConn_db_E45_3() {
			return this.conn_db_E45_3;
		}

		public String conn_host_E45_3;

		public String getConn_host_E45_3() {
			return this.conn_host_E45_3;
		}

		public String conn_port_E45_3;

		public String getConn_port_E45_3() {
			return this.conn_port_E45_3;
		}

		public String conn_psw_E45_3;

		public String getConn_psw_E45_3() {
			return this.conn_psw_E45_3;
		}

		public String conn_schema_E45_3;

		public String getConn_schema_E45_3() {
			return this.conn_schema_E45_3;
		}

		public String conn_usr_E45_3;

		public String getConn_usr_E45_3() {
			return this.conn_usr_E45_3;
		}

		public String conn_db_E45_4;

		public String getConn_db_E45_4() {
			return this.conn_db_E45_4;
		}

		public String conn_host_E45_4;

		public String getConn_host_E45_4() {
			return this.conn_host_E45_4;
		}

		public String conn_port_E45_4;

		public String getConn_port_E45_4() {
			return this.conn_port_E45_4;
		}

		public String conn_psw_E45_4;

		public String getConn_psw_E45_4() {
			return this.conn_psw_E45_4;
		}

		public String conn_schema_E45_4;

		public String getConn_schema_E45_4() {
			return this.conn_schema_E45_4;
		}

		public String conn_usr_E45_4;

		public String getConn_usr_E45_4() {
			return this.conn_usr_E45_4;
		}

		public String ambiente;

		public String getAmbiente() {
			return this.ambiente;
		}

		public String codice_applicazione_mypay_fesp;

		public String getCodice_applicazione_mypay_fesp() {
			return this.codice_applicazione_mypay_fesp;
		}

		public String codice_applicazione_mypay_pa;

		public String getCodice_applicazione_mypay_pa() {
			return this.codice_applicazione_mypay_pa;
		}

		public String codice_applicazione_mypivot;

		public String getCodice_applicazione_mypivot() {
			return this.codice_applicazione_mypivot;
		}

		public String directory_talend;

		public String getDirectory_talend() {
			return this.directory_talend;
		}

		public String ente_predefinito;

		public String getEnte_predefinito() {
			return this.ente_predefinito;
		}

		public Integer numero_minuti_avviso;

		public Integer getNumero_minuti_avviso() {
			return this.numero_minuti_avviso;
		}

		public Integer numero_ore_trigger_batch;

		public Integer getNumero_ore_trigger_batch() {
			return this.numero_ore_trigger_batch;
		}

		public String pa_public_url;

		public String getPa_public_url() {
			return this.pa_public_url;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Allinea";
	private final String projectName = "ALLINEA_DATABASE_MYBOX";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils(
			"_cjz1YKi2EeW5YPVxY5qP5g", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Allinea.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Allinea.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlConnection_5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		try {

			errorCode = null;
			tJava_14Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tPostgresqlConnection_5_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlConnection_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		try {

			errorCode = null;
			tJava_12Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tPostgresqlConnection_3_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLibraryLoad_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlRow_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlRow_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_11_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_13_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_11_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlCommit_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlCommit_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlRollback_4_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlRollback_4_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tStatCatcher_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLog4JCatch_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLog4JCatch_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLog4J_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLog4J_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_12_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_14_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_15_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlRow_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_11_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlCommit_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlRollback_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tStatCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLog4J_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				globalMap.put("errorAllinea", false);

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_1",
						end_Hash.get("tJava_1") - start_Hash.get("tJava_1"));
				tStatCatcher_1Process(globalMap);
				if (true) {

					tPostgresqlConnection_5Process(globalMap);
				}

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tJava_15Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlConnection_5Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_5 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_5", false);
				start_Hash.put("tPostgresqlConnection_5",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlConnection_5");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlConnection_5";

				int tos_count_tPostgresqlConnection_5 = 0;

				String url_tPostgresqlConnection_5 = "jdbc:postgresql://"
						+ context.conn_host_E45_3 + ":"
						+ context.conn_port_E45_3 + "/" + context.conn_db_E45_3
						+ "?currentSchema=" + context.conn_schema_E45_3;

				String dbUser_tPostgresqlConnection_5 = context.conn_usr_E45_3;

				final String decryptedPassword_tPostgresqlConnection_5 = context.conn_psw_E45_3;
				String dbPwd_tPostgresqlConnection_5 = decryptedPassword_tPostgresqlConnection_5;

				java.sql.Connection conn_tPostgresqlConnection_5 = null;

				String driverClass_tPostgresqlConnection_5 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlConnection_5);

				conn_tPostgresqlConnection_5 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_5,
								dbUser_tPostgresqlConnection_5,
								dbPwd_tPostgresqlConnection_5);

				globalMap.put("conn_tPostgresqlConnection_5",
						conn_tPostgresqlConnection_5);
				if (null != conn_tPostgresqlConnection_5) {

					conn_tPostgresqlConnection_5.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_5",
						context.conn_schema_E45_3);

				globalMap.put("conn_" + "tPostgresqlConnection_5",
						conn_tPostgresqlConnection_5);

				/**
				 * [tPostgresqlConnection_5 begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_5 main ] start
				 */

				currentComponent = "tPostgresqlConnection_5";

				tos_count_tPostgresqlConnection_5++;

				/**
				 * [tPostgresqlConnection_5 main ] stop
				 */

				/**
				 * [tPostgresqlConnection_5 end ] start
				 */

				currentComponent = "tPostgresqlConnection_5";

				ok_Hash.put("tPostgresqlConnection_5", true);
				end_Hash.put("tPostgresqlConnection_5",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlConnection_5",
						end_Hash.get("tPostgresqlConnection_5")
								- start_Hash.get("tPostgresqlConnection_5"));
				tStatCatcher_1Process(globalMap);
				tPostgresqlConnection_3Process(globalMap);

				/**
				 * [tPostgresqlConnection_5 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlConnection_5 finally ] start
				 */

				currentComponent = "tPostgresqlConnection_5";

				/**
				 * [tPostgresqlConnection_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlConnection_5_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlConnection_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_3", false);
				start_Hash.put("tPostgresqlConnection_3",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlConnection_3");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlConnection_3";

				int tos_count_tPostgresqlConnection_3 = 0;

				String url_tPostgresqlConnection_3 = "jdbc:postgresql://"
						+ context.conn_host_E45_4 + ":"
						+ context.conn_port_E45_4 + "/" + context.conn_db_E45_4
						+ "?currentSchema=" + context.conn_schema_E45_4;

				String dbUser_tPostgresqlConnection_3 = context.conn_usr_E45_4;

				final String decryptedPassword_tPostgresqlConnection_3 = context.conn_psw_E45_4;
				String dbPwd_tPostgresqlConnection_3 = decryptedPassword_tPostgresqlConnection_3;

				java.sql.Connection conn_tPostgresqlConnection_3 = null;

				String driverClass_tPostgresqlConnection_3 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlConnection_3);

				conn_tPostgresqlConnection_3 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_3,
								dbUser_tPostgresqlConnection_3,
								dbPwd_tPostgresqlConnection_3);

				globalMap.put("conn_tPostgresqlConnection_3",
						conn_tPostgresqlConnection_3);
				if (null != conn_tPostgresqlConnection_3) {

					conn_tPostgresqlConnection_3.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_3",
						context.conn_schema_E45_4);

				globalMap.put("conn_" + "tPostgresqlConnection_3",
						conn_tPostgresqlConnection_3);

				/**
				 * [tPostgresqlConnection_3 begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_3 main ] start
				 */

				currentComponent = "tPostgresqlConnection_3";

				tos_count_tPostgresqlConnection_3++;

				/**
				 * [tPostgresqlConnection_3 main ] stop
				 */

				/**
				 * [tPostgresqlConnection_3 end ] start
				 */

				currentComponent = "tPostgresqlConnection_3";

				ok_Hash.put("tPostgresqlConnection_3", true);
				end_Hash.put("tPostgresqlConnection_3",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlConnection_3",
						end_Hash.get("tPostgresqlConnection_3")
								- start_Hash.get("tPostgresqlConnection_3"));
				tStatCatcher_1Process(globalMap);
				tLibraryLoad_1Process(globalMap);

				/**
				 * [tPostgresqlConnection_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlConnection_3 finally ] start
				 */

				currentComponent = "tPostgresqlConnection_3";

				/**
				 * [tPostgresqlConnection_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlConnection_3_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tLibraryLoad_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */

				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */

				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tLibraryLoad_1",
						end_Hash.get("tLibraryLoad_1")
								- start_Hash.get("tLibraryLoad_1"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tLibraryLoad_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLibraryLoad_1 finally ] start
				 */

				currentComponent = "tLibraryLoad_1";

				/**
				 * [tLibraryLoad_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_12 begin ] start
				 */

				ok_Hash.put("tJava_12", false);
				start_Hash.put("tJava_12", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_12");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_12";

				int tos_count_tJava_12 = 0;

				globalMap.put("errorAllinea", true);
				// ((String)globalMap.get("tPostgresqlConnection_2_ERROR_MESSAGE"));

				/**
				 * [tJava_12 begin ] stop
				 */

				/**
				 * [tJava_12 main ] start
				 */

				currentComponent = "tJava_12";

				tos_count_tJava_12++;

				/**
				 * [tJava_12 main ] stop
				 */

				/**
				 * [tJava_12 end ] start
				 */

				currentComponent = "tJava_12";

				ok_Hash.put("tJava_12", true);
				end_Hash.put("tJava_12", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_12",
						end_Hash.get("tJava_12") - start_Hash.get("tJava_12"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tJava_12 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_12 finally ] start
				 */

				currentComponent = "tJava_12";

				/**
				 * [tJava_12 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}

	public void tJava_14Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_14 begin ] start
				 */

				ok_Hash.put("tJava_14", false);
				start_Hash.put("tJava_14", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_14");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_14";

				int tos_count_tJava_14 = 0;

				globalMap.put("errorAllinea", true);

				/**
				 * [tJava_14 begin ] stop
				 */

				/**
				 * [tJava_14 main ] start
				 */

				currentComponent = "tJava_14";

				tos_count_tJava_14++;

				/**
				 * [tJava_14 main ] stop
				 */

				/**
				 * [tJava_14 end ] start
				 */

				currentComponent = "tJava_14";

				ok_Hash.put("tJava_14", true);
				end_Hash.put("tJava_14", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_14",
						end_Hash.get("tJava_14") - start_Hash.get("tJava_14"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tJava_14 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_14 finally ] start
				 */

				currentComponent = "tJava_14";

				/**
				 * [tJava_14 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_14_SUBPROCESS_STATE", 1);
	}

	public void tJava_15Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_15 begin ] start
				 */

				ok_Hash.put("tJava_15", false);
				start_Hash.put("tJava_15", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_15");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_15";

				int tos_count_tJava_15 = 0;

				java.sql.Connection conn_tPostgresqlConnection_3 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_3");
				conn_tPostgresqlConnection_3.setReadOnly(true);

				/**
				 * [tJava_15 begin ] stop
				 */

				/**
				 * [tJava_15 main ] start
				 */

				currentComponent = "tJava_15";

				tos_count_tJava_15++;

				/**
				 * [tJava_15 main ] stop
				 */

				/**
				 * [tJava_15 end ] start
				 */

				currentComponent = "tJava_15";

				ok_Hash.put("tJava_15", true);
				end_Hash.put("tJava_15", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_15",
						end_Hash.get("tJava_15") - start_Hash.get("tJava_15"));
				tStatCatcher_1Process(globalMap);
				if (!(Boolean) globalMap.get("errorAllinea")) {

					tPostgresqlRow_4Process(globalMap);
				}

				/**
				 * [tJava_15 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_15 finally ] start
				 */

				currentComponent = "tJava_15";

				/**
				 * [tJava_15 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_15_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlRow_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlRow_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlRow_4 begin ] start
				 */

				ok_Hash.put("tPostgresqlRow_4", false);
				start_Hash.put("tPostgresqlRow_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlRow_4");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlRow_4";

				int tos_count_tPostgresqlRow_4 = 0;

				java.sql.Connection conn_tPostgresqlRow_4 = null;
				String query_tPostgresqlRow_4 = "";
				boolean whetherReject_tPostgresqlRow_4 = false;
				conn_tPostgresqlRow_4 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_5");

				java.sql.Statement stmt_tPostgresqlRow_4 = conn_tPostgresqlRow_4
						.createStatement();

				/**
				 * [tPostgresqlRow_4 begin ] stop
				 */

				/**
				 * [tPostgresqlRow_4 main ] start
				 */

				currentComponent = "tPostgresqlRow_4";

				query_tPostgresqlRow_4 = "SELECT pg_catalog.setval('mybox_client_id_seq', (select coalesce(max(mybox_client_id), 1) from mybox_client), (select count(1) > 0 from mybox_client));";
				whetherReject_tPostgresqlRow_4 = false;
				globalMap.put("tPostgresqlRow_4_QUERY", query_tPostgresqlRow_4);
				try {
					stmt_tPostgresqlRow_4.execute(query_tPostgresqlRow_4);

				} catch (java.lang.Exception e) {
					whetherReject_tPostgresqlRow_4 = true;

					throw (e);

				}

				tos_count_tPostgresqlRow_4++;

				/**
				 * [tPostgresqlRow_4 main ] stop
				 */

				/**
				 * [tPostgresqlRow_4 end ] start
				 */

				currentComponent = "tPostgresqlRow_4";

				stmt_tPostgresqlRow_4.close();

				ok_Hash.put("tPostgresqlRow_4", true);
				end_Hash.put("tPostgresqlRow_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlRow_4",
						end_Hash.get("tPostgresqlRow_4")
								- start_Hash.get("tPostgresqlRow_4"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlRow_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlRow_4 finally ] start
				 */

				currentComponent = "tPostgresqlRow_4";

				/**
				 * [tPostgresqlRow_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlRow_4_SUBPROCESS_STATE", 1);
	}

	public void tJava_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_6");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				if ("failure".equalsIgnoreCase(status)) {
					globalMap.put("errorAllinea", true);
				}

				/**
				 * [tJava_6 begin ] stop
				 */

				/**
				 * [tJava_6 main ] start
				 */

				currentComponent = "tJava_6";

				tos_count_tJava_6++;

				/**
				 * [tJava_6 main ] stop
				 */

				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_6",
						end_Hash.get("tJava_6") - start_Hash.get("tJava_6"));
				tStatCatcher_1Process(globalMap);
				if (!(Boolean) globalMap.get("errorAllinea")) {

					tPostgresqlInput_11Process(globalMap);
				}

				/**
				 * [tJava_6 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_6 finally ] start
				 */

				currentComponent = "tJava_6";

				/**
				 * [tJava_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}

	public static class MAPPING_MYBOX_CLIENTStruct implements
			routines.system.IPersistableRow<MAPPING_MYBOX_CLIENTStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_MYBOX_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mybox_client_id;

		public long getMybox_client_id() {
			return this.mybox_client_id;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		public String mybox_client_key;

		public String getMybox_client_key() {
			return this.mybox_client_key;
		}

		public String client_secret;

		public String getClient_secret() {
			return this.client_secret;
		}

		public String upload_home;

		public String getUpload_home() {
			return this.upload_home;
		}

		public String download_home;

		public String getDownload_home() {
			return this.download_home;
		}

		public boolean locked;

		public boolean getLocked() {
			return this.locked;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.mybox_client_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final MAPPING_MYBOX_CLIENTStruct other = (MAPPING_MYBOX_CLIENTStruct) obj;

			if (this.mybox_client_id != other.mybox_client_id)
				return false;

			return true;
		}

		public void copyDataTo(MAPPING_MYBOX_CLIENTStruct other) {

			other.mybox_client_id = this.mybox_client_id;
			other.version = this.version;
			other.mybox_client_key = this.mybox_client_key;
			other.client_secret = this.client_secret;
			other.upload_home = this.upload_home;
			other.download_home = this.download_home;
			other.locked = this.locked;

		}

		public void copyKeysDataTo(MAPPING_MYBOX_CLIENTStruct other) {

			other.mybox_client_id = this.mybox_client_id;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea,
						0, length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_MYBOX_Allinea) {

				try {

					int length = 0;

					this.mybox_client_id = dis.readLong();

					this.version = dis.readInt();

					this.mybox_client_key = readString(dis);

					this.client_secret = readString(dis);

					this.upload_home = readString(dis);

					this.download_home = readString(dis);

					this.locked = dis.readBoolean();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mybox_client_id);

				// int

				dos.writeInt(this.version);

				// String

				writeString(this.mybox_client_key, dos);

				// String

				writeString(this.client_secret, dos);

				// String

				writeString(this.upload_home, dos);

				// String

				writeString(this.download_home, dos);

				// boolean

				dos.writeBoolean(this.locked);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mybox_client_id=" + String.valueOf(mybox_client_id));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",mybox_client_key=" + mybox_client_key);
			sb.append(",client_secret=" + client_secret);
			sb.append(",upload_home=" + upload_home);
			sb.append(",download_home=" + download_home);
			sb.append(",locked=" + String.valueOf(locked));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(MAPPING_MYBOX_CLIENTStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.mybox_client_id,
					other.mybox_client_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements
			routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_MYBOX_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea = new byte[0];

		public long mygov_ente_id;

		public long getMygov_ente_id() {
			return this.mygov_ente_id;
		}

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		public String codice_fiscale_ente;

		public String getCodice_fiscale_ente() {
			return this.codice_fiscale_ente;
		}

		public String de_nome_ente;

		public String getDe_nome_ente() {
			return this.de_nome_ente;
		}

		public String email_amministratore;

		public String getEmail_amministratore() {
			return this.email_amministratore;
		}

		public java.util.Date dt_creazione;

		public java.util.Date getDt_creazione() {
			return this.dt_creazione;
		}

		public java.util.Date dt_ultima_modifica;

		public java.util.Date getDt_ultima_modifica() {
			return this.dt_ultima_modifica;
		}

		public String mybox_client_key;

		public String getMybox_client_key() {
			return this.mybox_client_key;
		}

		public String mybox_client_secret;

		public String getMybox_client_secret() {
			return this.mybox_client_secret;
		}

		public String de_password;

		public String getDe_password() {
			return this.de_password;
		}

		public String de_logo_ente;

		public String getDe_logo_ente() {
			return this.de_logo_ente;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea,
						0, length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_MYBOX_Allinea) {

				try {

					int length = 0;

					this.mygov_ente_id = dis.readLong();

					this.cod_ipa_ente = readString(dis);

					this.codice_fiscale_ente = readString(dis);

					this.de_nome_ente = readString(dis);

					this.email_amministratore = readString(dis);

					this.dt_creazione = readDate(dis);

					this.dt_ultima_modifica = readDate(dis);

					this.mybox_client_key = readString(dis);

					this.mybox_client_secret = readString(dis);

					this.de_password = readString(dis);

					this.de_logo_ente = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_ente_id);

				// String

				writeString(this.cod_ipa_ente, dos);

				// String

				writeString(this.codice_fiscale_ente, dos);

				// String

				writeString(this.de_nome_ente, dos);

				// String

				writeString(this.email_amministratore, dos);

				// java.util.Date

				writeDate(this.dt_creazione, dos);

				// java.util.Date

				writeDate(this.dt_ultima_modifica, dos);

				// String

				writeString(this.mybox_client_key, dos);

				// String

				writeString(this.mybox_client_secret, dos);

				// String

				writeString(this.de_password, dos);

				// String

				writeString(this.de_logo_ente, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_ente_id=" + String.valueOf(mygov_ente_id));
			sb.append(",cod_ipa_ente=" + cod_ipa_ente);
			sb.append(",codice_fiscale_ente=" + codice_fiscale_ente);
			sb.append(",de_nome_ente=" + de_nome_ente);
			sb.append(",email_amministratore=" + email_amministratore);
			sb.append(",dt_creazione=" + String.valueOf(dt_creazione));
			sb.append(",dt_ultima_modifica="
					+ String.valueOf(dt_ultima_modifica));
			sb.append(",mybox_client_key=" + mybox_client_key);
			sb.append(",mybox_client_secret=" + mybox_client_secret);
			sb.append(",de_password=" + de_password);
			sb.append(",de_logo_ente=" + de_logo_ente);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_11Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_11_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row15Struct row15 = new row15Struct();
				MAPPING_MYBOX_CLIENTStruct MAPPING_MYBOX_CLIENT = new MAPPING_MYBOX_CLIENTStruct();

				/**
				 * [tPostgresqlOutput_13 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_13", false);
				start_Hash.put("tPostgresqlOutput_13",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlOutput_13");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlOutput_13";

				int tos_count_tPostgresqlOutput_13 = 0;

				String dbschema_tPostgresqlOutput_13 = null;
				dbschema_tPostgresqlOutput_13 = (String) globalMap
						.get("schema_" + "tPostgresqlConnection_5");

				String tableName_tPostgresqlOutput_13 = null;
				if (dbschema_tPostgresqlOutput_13 == null
						|| dbschema_tPostgresqlOutput_13.trim().length() == 0) {
					tableName_tPostgresqlOutput_13 = "mybox_client";
				} else {
					tableName_tPostgresqlOutput_13 = dbschema_tPostgresqlOutput_13
							+ "\".\"" + "mybox_client";
				}

				int updateKeyCount_tPostgresqlOutput_13 = 1;
				if (updateKeyCount_tPostgresqlOutput_13 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_13 = 0;
				int nb_line_update_tPostgresqlOutput_13 = 0;
				int nb_line_inserted_tPostgresqlOutput_13 = 0;
				int nb_line_deleted_tPostgresqlOutput_13 = 0;
				int nb_line_rejected_tPostgresqlOutput_13 = 0;

				int deletedCount_tPostgresqlOutput_13 = 0;
				int updatedCount_tPostgresqlOutput_13 = 0;
				int insertedCount_tPostgresqlOutput_13 = 0;
				int rejectedCount_tPostgresqlOutput_13 = 0;

				boolean whetherReject_tPostgresqlOutput_13 = false;

				java.sql.Connection conn_tPostgresqlOutput_13 = null;
				String dbUser_tPostgresqlOutput_13 = null;

				conn_tPostgresqlOutput_13 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_5");

				int count_tPostgresqlOutput_13 = 0;
				String update_tPostgresqlOutput_13 = "UPDATE \""
						+ tableName_tPostgresqlOutput_13
						+ "\" SET \"client_secret\" = ?,\"upload_home\" = ?,\"download_home\" = ?,\"locked\" = ? WHERE \"mybox_client_key\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_13 = conn_tPostgresqlOutput_13
						.prepareStatement(update_tPostgresqlOutput_13);
				String insert_tPostgresqlOutput_13 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_13
						+ "\" (\""
						+ "mybox_client_id"
						+ "\",\"version\",\"mybox_client_key\",\"client_secret\",\"upload_home\",\"download_home\",\"locked\") VALUES ("
						+ "nextval('mybox_client_id_seq')" + ",?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_13 = conn_tPostgresqlOutput_13
						.prepareStatement(insert_tPostgresqlOutput_13);

				/**
				 * [tPostgresqlOutput_13 begin ] stop
				 */

				/**
				 * [tMap_11 begin ] start
				 */

				ok_Hash.put("tMap_11", false);
				start_Hash.put("tMap_11", System.currentTimeMillis());

				currentComponent = "tMap_11";

				int tos_count_tMap_11 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_11__Struct {
				}
				Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				MAPPING_MYBOX_CLIENTStruct MAPPING_MYBOX_CLIENT_tmp = new MAPPING_MYBOX_CLIENTStruct();
				// ###############################

				/**
				 * [tMap_11 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_11 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_11", false);
				start_Hash.put("tPostgresqlInput_11",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_11");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_11";

				int tos_count_tPostgresqlInput_11 = 0;

				int nb_line_tPostgresqlInput_11 = 0;
				java.sql.Connection conn_tPostgresqlInput_11 = null;
				conn_tPostgresqlInput_11 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_3");

				java.sql.Statement stmt_tPostgresqlInput_11 = conn_tPostgresqlInput_11
						.createStatement();

				String dbquery_tPostgresqlInput_11 = "SELECT \n  \"mygov_ente\".\"mygov_ente_id\", \n  \"mygov_ente\".\"cod_ipa_ente\", \n  \"mygov_ente\".\"codice_fiscale_ente\", \n  \"mygov_ente\".\"de_nome_ente\", \n  \"mygov_ente\".\"email_amministratore\", \n  \"mygov_ente\".\"dt_creazione\", \n  \"mygov_ente\".\"dt_ultima_modifica\", \n  \"mygov_ente\".\"mybox_client_key\", \n  \"mygov_ente\".\"mybox_client_secret\", \n  \"mygov_ente\".\"de_password\", \n  \"mygov_ente\".\"de_logo_ente\"\nFROM \"mygov_ente\"";

				globalMap.put("tPostgresqlInput_11_QUERY",
						dbquery_tPostgresqlInput_11);

				java.sql.ResultSet rs_tPostgresqlInput_11 = null;
				try {
					rs_tPostgresqlInput_11 = stmt_tPostgresqlInput_11
							.executeQuery(dbquery_tPostgresqlInput_11);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_11 = rs_tPostgresqlInput_11
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_11 = rsmd_tPostgresqlInput_11
							.getColumnCount();

					String tmpContent_tPostgresqlInput_11 = null;

					while (rs_tPostgresqlInput_11.next()) {
						nb_line_tPostgresqlInput_11++;

						if (colQtyInRs_tPostgresqlInput_11 < 1) {
							row15.mygov_ente_id = 0;
						} else {

							if (rs_tPostgresqlInput_11.getObject(1) != null) {
								row15.mygov_ente_id = rs_tPostgresqlInput_11
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 2) {
							row15.cod_ipa_ente = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(2);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.cod_ipa_ente = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.cod_ipa_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 3) {
							row15.codice_fiscale_ente = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(3);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.codice_fiscale_ente = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.codice_fiscale_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 4) {
							row15.de_nome_ente = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(4);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.de_nome_ente = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.de_nome_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 5) {
							row15.email_amministratore = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(5);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.email_amministratore = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.email_amministratore = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 6) {
							row15.dt_creazione = null;
						} else {

							if (rs_tPostgresqlInput_11.getTimestamp(6) != null) {
								row15.dt_creazione = new java.util.Date(
										rs_tPostgresqlInput_11.getTimestamp(6)
												.getTime());
							} else {
								row15.dt_creazione = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 7) {
							row15.dt_ultima_modifica = null;
						} else {

							if (rs_tPostgresqlInput_11.getTimestamp(7) != null) {
								row15.dt_ultima_modifica = new java.util.Date(
										rs_tPostgresqlInput_11.getTimestamp(7)
												.getTime());
							} else {
								row15.dt_ultima_modifica = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 8) {
							row15.mybox_client_key = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(8);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.mybox_client_key = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.mybox_client_key = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 9) {
							row15.mybox_client_secret = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(9);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.mybox_client_secret = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.mybox_client_secret = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 10) {
							row15.de_password = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(10);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.de_password = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.de_password = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_11 < 11) {
							row15.de_logo_ente = null;
						} else {

							tmpContent_tPostgresqlInput_11 = rs_tPostgresqlInput_11
									.getString(11);
							if (tmpContent_tPostgresqlInput_11 != null) {
								row15.de_logo_ente = tmpContent_tPostgresqlInput_11
										.trim();
							} else {
								row15.de_logo_ente = null;
							}
						}

						/**
						 * [tPostgresqlInput_11 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_11 main ] start
						 */

						currentComponent = "tPostgresqlInput_11";

						tos_count_tPostgresqlInput_11++;

						/**
						 * [tPostgresqlInput_11 main ] stop
						 */

						/**
						 * [tMap_11 main ] start
						 */

						currentComponent = "tMap_11";

						boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_11 = false;
						boolean mainRowRejected_tMap_11 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
							// ###############################
							// # Output tables

							MAPPING_MYBOX_CLIENT = null;

							// # Output table : 'MAPPING_MYBOX_CLIENT'
							MAPPING_MYBOX_CLIENT_tmp.mybox_client_id = 0;
							MAPPING_MYBOX_CLIENT_tmp.version = 0;
							MAPPING_MYBOX_CLIENT_tmp.mybox_client_key = row15.mybox_client_key;
							MAPPING_MYBOX_CLIENT_tmp.client_secret = row15.mybox_client_secret;
							MAPPING_MYBOX_CLIENT_tmp.upload_home = "/"
									+ row15.cod_ipa_ente;
							MAPPING_MYBOX_CLIENT_tmp.download_home = "/"
									+ row15.cod_ipa_ente;
							MAPPING_MYBOX_CLIENT_tmp.locked = false;
							MAPPING_MYBOX_CLIENT = MAPPING_MYBOX_CLIENT_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_11 = false;

						tos_count_tMap_11++;

						/**
						 * [tMap_11 main ] stop
						 */
						// Start of branch "MAPPING_MYBOX_CLIENT"
						if (MAPPING_MYBOX_CLIENT != null) {

							/**
							 * [tPostgresqlOutput_13 main ] start
							 */

							currentComponent = "tPostgresqlOutput_13";

							whetherReject_tPostgresqlOutput_13 = false;
							int updateFlag_tPostgresqlOutput_13 = 0;
							if (MAPPING_MYBOX_CLIENT.client_secret == null) {
								pstmtUpdate_tPostgresqlOutput_13.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_13.setString(1,
										MAPPING_MYBOX_CLIENT.client_secret);
							}

							if (MAPPING_MYBOX_CLIENT.upload_home == null) {
								pstmtUpdate_tPostgresqlOutput_13.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_13.setString(2,
										MAPPING_MYBOX_CLIENT.upload_home);
							}

							if (MAPPING_MYBOX_CLIENT.download_home == null) {
								pstmtUpdate_tPostgresqlOutput_13.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_13.setString(3,
										MAPPING_MYBOX_CLIENT.download_home);
							}

							pstmtUpdate_tPostgresqlOutput_13.setBoolean(4,
									MAPPING_MYBOX_CLIENT.locked);

							if (MAPPING_MYBOX_CLIENT.mybox_client_key == null) {
								pstmtUpdate_tPostgresqlOutput_13.setNull(
										5 + count_tPostgresqlOutput_13,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tPostgresqlOutput_13.setString(
										5 + count_tPostgresqlOutput_13,
										MAPPING_MYBOX_CLIENT.mybox_client_key);
							}

							try {

								updateFlag_tPostgresqlOutput_13 = pstmtUpdate_tPostgresqlOutput_13
										.executeUpdate();
								updatedCount_tPostgresqlOutput_13 = updatedCount_tPostgresqlOutput_13
										+ updateFlag_tPostgresqlOutput_13;

								if (updateFlag_tPostgresqlOutput_13 == 0) {

									pstmtInsert_tPostgresqlOutput_13.setInt(1,
											MAPPING_MYBOX_CLIENT.version);

									if (MAPPING_MYBOX_CLIENT.mybox_client_key == null) {
										pstmtInsert_tPostgresqlOutput_13
												.setNull(2,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_13
												.setString(
														2,
														MAPPING_MYBOX_CLIENT.mybox_client_key);
									}

									if (MAPPING_MYBOX_CLIENT.client_secret == null) {
										pstmtInsert_tPostgresqlOutput_13
												.setNull(3,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_13
												.setString(
														3,
														MAPPING_MYBOX_CLIENT.client_secret);
									}

									if (MAPPING_MYBOX_CLIENT.upload_home == null) {
										pstmtInsert_tPostgresqlOutput_13
												.setNull(4,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_13
												.setString(
														4,
														MAPPING_MYBOX_CLIENT.upload_home);
									}

									if (MAPPING_MYBOX_CLIENT.download_home == null) {
										pstmtInsert_tPostgresqlOutput_13
												.setNull(5,
														java.sql.Types.VARCHAR);
									} else {
										pstmtInsert_tPostgresqlOutput_13
												.setString(
														5,
														MAPPING_MYBOX_CLIENT.download_home);
									}

									pstmtInsert_tPostgresqlOutput_13
											.setBoolean(6,
													MAPPING_MYBOX_CLIENT.locked);

									insertedCount_tPostgresqlOutput_13 = insertedCount_tPostgresqlOutput_13
											+ pstmtInsert_tPostgresqlOutput_13
													.executeUpdate();
									nb_line_tPostgresqlOutput_13++;

								} else {
									nb_line_tPostgresqlOutput_13++;

								}
							} catch (java.lang.Exception e) {

								whetherReject_tPostgresqlOutput_13 = true;
								throw (e);
							}

							tos_count_tPostgresqlOutput_13++;

							/**
							 * [tPostgresqlOutput_13 main ] stop
							 */

						} // End of branch "MAPPING_MYBOX_CLIENT"

						/**
						 * [tPostgresqlInput_11 end ] start
						 */

						currentComponent = "tPostgresqlInput_11";

					}
				} finally {
					stmt_tPostgresqlInput_11.close();

				}
				globalMap.put("tPostgresqlInput_11_NB_LINE",
						nb_line_tPostgresqlInput_11);

				ok_Hash.put("tPostgresqlInput_11", true);
				end_Hash.put("tPostgresqlInput_11", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_11",
						end_Hash.get("tPostgresqlInput_11")
								- start_Hash.get("tPostgresqlInput_11"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_11 end ] stop
				 */

				/**
				 * [tMap_11 end ] start
				 */

				currentComponent = "tMap_11";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_11", true);
				end_Hash.put("tMap_11", System.currentTimeMillis());

				/**
				 * [tMap_11 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_13 end ] start
				 */

				currentComponent = "tPostgresqlOutput_13";

				if (pstmtUpdate_tPostgresqlOutput_13 != null) {
					pstmtUpdate_tPostgresqlOutput_13.close();
				}
				if (pstmtInsert_tPostgresqlOutput_13 != null) {
					pstmtInsert_tPostgresqlOutput_13.close();
				}

				nb_line_deleted_tPostgresqlOutput_13 = nb_line_deleted_tPostgresqlOutput_13
						+ deletedCount_tPostgresqlOutput_13;
				nb_line_update_tPostgresqlOutput_13 = nb_line_update_tPostgresqlOutput_13
						+ updatedCount_tPostgresqlOutput_13;
				nb_line_inserted_tPostgresqlOutput_13 = nb_line_inserted_tPostgresqlOutput_13
						+ insertedCount_tPostgresqlOutput_13;
				nb_line_rejected_tPostgresqlOutput_13 = nb_line_rejected_tPostgresqlOutput_13
						+ rejectedCount_tPostgresqlOutput_13;

				globalMap.put("tPostgresqlOutput_13_NB_LINE",
						nb_line_tPostgresqlOutput_13);
				globalMap.put("tPostgresqlOutput_13_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_13);
				globalMap.put("tPostgresqlOutput_13_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_13);
				globalMap.put("tPostgresqlOutput_13_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_13);
				globalMap.put("tPostgresqlOutput_13_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_13);

				ok_Hash.put("tPostgresqlOutput_13", true);
				end_Hash.put("tPostgresqlOutput_13", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlOutput_13",
						end_Hash.get("tPostgresqlOutput_13")
								- start_Hash.get("tPostgresqlOutput_13"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlOutput_13 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_11 finally ] start
				 */

				currentComponent = "tPostgresqlInput_11";

				/**
				 * [tPostgresqlInput_11 finally ] stop
				 */

				/**
				 * [tMap_11 finally ] start
				 */

				currentComponent = "tMap_11";

				/**
				 * [tMap_11 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_13 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_13";

				/**
				 * [tPostgresqlOutput_13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_11_SUBPROCESS_STATE", 1);
	}

	public void tJava_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_9 begin ] start
				 */

				ok_Hash.put("tJava_9", false);
				start_Hash.put("tJava_9", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_9");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_9";

				int tos_count_tJava_9 = 0;

				if ("failure".equalsIgnoreCase(status)) {
					globalMap.put("errorAllinea", true);
				}

				/**
				 * [tJava_9 begin ] stop
				 */

				/**
				 * [tJava_9 main ] start
				 */

				currentComponent = "tJava_9";

				tos_count_tJava_9++;

				/**
				 * [tJava_9 main ] stop
				 */

				/**
				 * [tJava_9 end ] start
				 */

				currentComponent = "tJava_9";

				ok_Hash.put("tJava_9", true);
				end_Hash.put("tJava_9", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_9",
						end_Hash.get("tJava_9") - start_Hash.get("tJava_9"));
				tStatCatcher_1Process(globalMap);
				if (!(Boolean) globalMap.get("errorAllinea")) {

					tPostgresqlCommit_4Process(globalMap);
				}

				if ((Boolean) globalMap.get("errorAllinea")) {

					tPostgresqlRollback_4Process(globalMap);
				}

				/**
				 * [tJava_9 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_9 finally ] start
				 */

				currentComponent = "tJava_9";

				/**
				 * [tJava_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlCommit_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlCommit_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlCommit_4 begin ] start
				 */

				ok_Hash.put("tPostgresqlCommit_4", false);
				start_Hash.put("tPostgresqlCommit_4",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlCommit_4");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlCommit_4";

				int tos_count_tPostgresqlCommit_4 = 0;

				/**
				 * [tPostgresqlCommit_4 begin ] stop
				 */

				/**
				 * [tPostgresqlCommit_4 main ] start
				 */

				currentComponent = "tPostgresqlCommit_4";

				java.sql.Connection conn_tPostgresqlCommit_4 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_5");
				if (conn_tPostgresqlCommit_4 != null
						&& !conn_tPostgresqlCommit_4.isClosed()) {

					try {

						conn_tPostgresqlCommit_4.commit();

					} finally {

						conn_tPostgresqlCommit_4.close();

					}

				}

				tos_count_tPostgresqlCommit_4++;

				/**
				 * [tPostgresqlCommit_4 main ] stop
				 */

				/**
				 * [tPostgresqlCommit_4 end ] start
				 */

				currentComponent = "tPostgresqlCommit_4";

				ok_Hash.put("tPostgresqlCommit_4", true);
				end_Hash.put("tPostgresqlCommit_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlCommit_4",
						end_Hash.get("tPostgresqlCommit_4")
								- start_Hash.get("tPostgresqlCommit_4"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlCommit_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlCommit_4 finally ] start
				 */

				currentComponent = "tPostgresqlCommit_4";

				/**
				 * [tPostgresqlCommit_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlCommit_4_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlRollback_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlRollback_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlRollback_4 begin ] start
				 */

				ok_Hash.put("tPostgresqlRollback_4", false);
				start_Hash.put("tPostgresqlRollback_4",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlRollback_4");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlRollback_4";

				int tos_count_tPostgresqlRollback_4 = 0;

				/**
				 * [tPostgresqlRollback_4 begin ] stop
				 */

				/**
				 * [tPostgresqlRollback_4 main ] start
				 */

				currentComponent = "tPostgresqlRollback_4";

				java.sql.Connection conn_tPostgresqlRollback_4 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_5");
				if (conn_tPostgresqlRollback_4 != null
						&& !conn_tPostgresqlRollback_4.isClosed()) {

					try {

						conn_tPostgresqlRollback_4.rollback();

					} finally {

						conn_tPostgresqlRollback_4.close();

					}

				}

				tos_count_tPostgresqlRollback_4++;

				/**
				 * [tPostgresqlRollback_4 main ] stop
				 */

				/**
				 * [tPostgresqlRollback_4 end ] start
				 */

				currentComponent = "tPostgresqlRollback_4";

				ok_Hash.put("tPostgresqlRollback_4", true);
				end_Hash.put("tPostgresqlRollback_4",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlRollback_4",
						end_Hash.get("tPostgresqlRollback_4")
								- start_Hash.get("tPostgresqlRollback_4"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlRollback_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlRollback_4 finally ] start
				 */

				currentComponent = "tPostgresqlRollback_4";

				/**
				 * [tPostgresqlRollback_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlRollback_4_SUBPROCESS_STATE", 1);
	}

	public static class LOG_STATStruct implements
			routines.system.IPersistableRow<LOG_STATStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_MYBOX_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea,
						0, length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_MYBOX_Allinea) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

					this.priority = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

				// Integer

				writeInteger(this.priority, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append(",priority=" + String.valueOf(priority));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(LOG_STATStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_MYBOX_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea,
						0, length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_MYBOX_Allinea) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				LOG_STATStruct LOG_STAT = new LOG_STATStruct();

				/**
				 * [tLog4JCatch_2 begin ] start
				 */

				ok_Hash.put("tLog4JCatch_2", false);
				start_Hash.put("tLog4JCatch_2", System.currentTimeMillis());

				currentComponent = "tLog4JCatch_2";

				int tos_count_tLog4JCatch_2 = 0;

				org.apache.log4j.Logger logger_tLog4JCatch_2 = org.apache.log4j.Logger
						.getLogger(this.getClass());
				int nb_line_tLog4JCatch_2 = 0;

				/**
				 * [tLog4JCatch_2 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				LOG_STATStruct LOG_STAT_tmp = new LOG_STATStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1
						.getMessages()) {
					row4.pid = pid;
					row4.root_pid = rootPid;
					row4.father_pid = fatherPid;
					row4.project = projectName;
					row4.job = jobName;
					row4.context = contextStr;
					row4.origin = (scm.getOrigin() == null
							|| scm.getOrigin().length() < 1 ? null : scm
							.getOrigin());
					row4.message = scm.getMessage();
					row4.duration = scm.getDuration();
					row4.moment = scm.getMoment();
					row4.message_type = scm.getMessageType();
					row4.job_version = scm.getJobVersion();
					row4.job_repository_id = scm.getJobId();
					row4.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
						// ###############################
						// # Output tables

						LOG_STAT = null;

						// # Output table : 'LOG_STAT'
						LOG_STAT_tmp.moment = row4.moment;
						LOG_STAT_tmp.pid = row4.pid;
						LOG_STAT_tmp.father_pid = row4.father_pid;
						LOG_STAT_tmp.root_pid = row4.root_pid;
						LOG_STAT_tmp.system_pid = row4.system_pid;
						LOG_STAT_tmp.project = row4.project;
						LOG_STAT_tmp.job = row4.job;
						LOG_STAT_tmp.job_repository_id = row4.job_repository_id;
						LOG_STAT_tmp.job_version = row4.job_version;
						LOG_STAT_tmp.context = row4.context;
						LOG_STAT_tmp.origin = row4.origin;
						LOG_STAT_tmp.message_type = row4.message_type;
						LOG_STAT_tmp.message = row4.message;
						LOG_STAT_tmp.duration = row4.duration;
						LOG_STAT_tmp.priority = 3;
						LOG_STAT = LOG_STAT_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */
					// Start of branch "LOG_STAT"
					if (LOG_STAT != null) {

						/**
						 * [tLog4JCatch_2 main ] start
						 */

						currentComponent = "tLog4JCatch_2";

						switch (LOG_STAT.priority) {
						case 1:
							logger_tLog4JCatch_2.trace(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 2:
							logger_tLog4JCatch_2.debug(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 3:
							logger_tLog4JCatch_2.info(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 4:
							logger_tLog4JCatch_2.warn(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 5:
							logger_tLog4JCatch_2.error(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 6:
							logger_tLog4JCatch_2.fatal(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						default:
							logger_tLog4JCatch_2.warn(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						}

						nb_line_tLog4JCatch_2++;

						tos_count_tLog4JCatch_2++;

						/**
						 * [tLog4JCatch_2 main ] stop
						 */

					} // End of branch "LOG_STAT"

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tLog4JCatch_2 end ] start
				 */

				currentComponent = "tLog4JCatch_2";

				globalMap.put("tLog4JCatch_2_NB_LINE", nb_line_tLog4JCatch_2);

				ok_Hash.put("tLog4JCatch_2", true);
				end_Hash.put("tLog4JCatch_2", System.currentTimeMillis());

				/**
				 * [tLog4JCatch_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tLog4JCatch_2 finally ] start
				 */

				currentComponent = "tLog4JCatch_2";

				/**
				 * [tLog4JCatch_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class LOG_ERRORStruct implements
			routines.system.IPersistableRow<LOG_ERRORStruct> {
		final static byte[] commonByteArrayLock_ALLINEA_DATABASE_MYBOX_Allinea = new byte[0];
		static byte[] commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea.length) {
					if (length < 1024
							&& commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea.length == 0) {
						commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea = new byte[1024];
					} else {
						commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea,
						0, length);
				strReturn = new String(
						commonByteArray_ALLINEA_DATABASE_MYBOX_Allinea, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALLINEA_DATABASE_MYBOX_Allinea) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(LOG_ERRORStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				LOG_ERRORStruct LOG_ERROR = new LOG_ERRORStruct();

				/**
				 * [tLog4JCatch_1 begin ] start
				 */

				ok_Hash.put("tLog4JCatch_1", false);
				start_Hash.put("tLog4JCatch_1", System.currentTimeMillis());

				currentComponent = "tLog4JCatch_1";

				int tos_count_tLog4JCatch_1 = 0;

				org.apache.log4j.Logger logger_tLog4JCatch_1 = org.apache.log4j.Logger
						.getLogger(this.getClass());
				int nb_line_tLog4JCatch_1 = 0;

				/**
				 * [tLog4JCatch_1 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					LOG_ERROR.type = lcm.getType();
					LOG_ERROR.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					LOG_ERROR.priority = lcm.getPriority();
					LOG_ERROR.message = lcm.getMessage();
					LOG_ERROR.code = lcm.getCode();

					LOG_ERROR.moment = java.util.Calendar.getInstance()
							.getTime();

					LOG_ERROR.pid = pid;
					LOG_ERROR.root_pid = rootPid;
					LOG_ERROR.father_pid = fatherPid;

					LOG_ERROR.project = projectName;
					LOG_ERROR.job = jobName;
					LOG_ERROR.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */

					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tLog4JCatch_1 main ] start
					 */

					currentComponent = "tLog4JCatch_1";

					switch (LOG_ERROR.priority) {
					case 1:
						logger_tLog4JCatch_1.trace(LOG_ERROR.moment + "|"
								+ LOG_ERROR.pid + "|" + LOG_ERROR.root_pid
								+ "|" + LOG_ERROR.father_pid + "|"
								+ LOG_ERROR.project + "|" + LOG_ERROR.job + "|"
								+ LOG_ERROR.context + "|" + LOG_ERROR.priority
								+ "|" + LOG_ERROR.type + "|" + LOG_ERROR.origin
								+ "|" + LOG_ERROR.message + "|"
								+ LOG_ERROR.code);
						break;
					case 2:
						logger_tLog4JCatch_1.debug(LOG_ERROR.moment + "|"
								+ LOG_ERROR.pid + "|" + LOG_ERROR.root_pid
								+ "|" + LOG_ERROR.father_pid + "|"
								+ LOG_ERROR.project + "|" + LOG_ERROR.job + "|"
								+ LOG_ERROR.context + "|" + LOG_ERROR.priority
								+ "|" + LOG_ERROR.type + "|" + LOG_ERROR.origin
								+ "|" + LOG_ERROR.message + "|"
								+ LOG_ERROR.code);
						break;
					case 3:
						logger_tLog4JCatch_1.info(LOG_ERROR.moment + "|"
								+ LOG_ERROR.pid + "|" + LOG_ERROR.root_pid
								+ "|" + LOG_ERROR.father_pid + "|"
								+ LOG_ERROR.project + "|" + LOG_ERROR.job + "|"
								+ LOG_ERROR.context + "|" + LOG_ERROR.priority
								+ "|" + LOG_ERROR.type + "|" + LOG_ERROR.origin
								+ "|" + LOG_ERROR.message + "|"
								+ LOG_ERROR.code);
						break;
					case 4:
						logger_tLog4JCatch_1.warn(LOG_ERROR.moment + "|"
								+ LOG_ERROR.pid + "|" + LOG_ERROR.root_pid
								+ "|" + LOG_ERROR.father_pid + "|"
								+ LOG_ERROR.project + "|" + LOG_ERROR.job + "|"
								+ LOG_ERROR.context + "|" + LOG_ERROR.priority
								+ "|" + LOG_ERROR.type + "|" + LOG_ERROR.origin
								+ "|" + LOG_ERROR.message + "|"
								+ LOG_ERROR.code);
						break;
					case 5:
						logger_tLog4JCatch_1.error(LOG_ERROR.moment + "|"
								+ LOG_ERROR.pid + "|" + LOG_ERROR.root_pid
								+ "|" + LOG_ERROR.father_pid + "|"
								+ LOG_ERROR.project + "|" + LOG_ERROR.job + "|"
								+ LOG_ERROR.context + "|" + LOG_ERROR.priority
								+ "|" + LOG_ERROR.type + "|" + LOG_ERROR.origin
								+ "|" + LOG_ERROR.message + "|"
								+ LOG_ERROR.code);
						break;
					case 6:
						logger_tLog4JCatch_1.fatal(LOG_ERROR.moment + "|"
								+ LOG_ERROR.pid + "|" + LOG_ERROR.root_pid
								+ "|" + LOG_ERROR.father_pid + "|"
								+ LOG_ERROR.project + "|" + LOG_ERROR.job + "|"
								+ LOG_ERROR.context + "|" + LOG_ERROR.priority
								+ "|" + LOG_ERROR.type + "|" + LOG_ERROR.origin
								+ "|" + LOG_ERROR.message + "|"
								+ LOG_ERROR.code);
						break;
					default:
						logger_tLog4JCatch_1.warn(LOG_ERROR.moment + "|"
								+ LOG_ERROR.pid + "|" + LOG_ERROR.root_pid
								+ "|" + LOG_ERROR.father_pid + "|"
								+ LOG_ERROR.project + "|" + LOG_ERROR.job + "|"
								+ LOG_ERROR.context + "|" + LOG_ERROR.priority
								+ "|" + LOG_ERROR.type + "|" + LOG_ERROR.origin
								+ "|" + LOG_ERROR.message + "|"
								+ LOG_ERROR.code);
						break;
					}

					nb_line_tLog4JCatch_1++;

					tos_count_tLog4JCatch_1++;

					/**
					 * [tLog4JCatch_1 main ] stop
					 */

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tLog4JCatch_1 end ] start
				 */

				currentComponent = "tLog4JCatch_1";

				globalMap.put("tLog4JCatch_1_NB_LINE", nb_line_tLog4JCatch_1);

				ok_Hash.put("tLog4JCatch_1", true);
				end_Hash.put("tLog4JCatch_1", System.currentTimeMillis());

				/**
				 * [tLog4JCatch_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLogCatcher_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tLog4J_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tLog4JCatch_1 finally ] start
				 */

				currentComponent = "tLog4JCatch_1";

				/**
				 * [tLog4JCatch_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public void tLog4J_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLog4J_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLog4J_1 begin ] start
				 */

				ok_Hash.put("tLog4J_1", false);
				start_Hash.put("tLog4J_1", System.currentTimeMillis());

				currentComponent = "tLog4J_1";

				int tos_count_tLog4J_1 = 0;

				org.apache.log4j.Logger logger_tLog4J_1 = org.apache.log4j.Logger
						.getLogger(this.getClass());

				int nb_line_tLog4J_1 = 0;
				int nb_logged_line_tLog4J_1 = 0;

				/**
				 * [tLog4J_1 begin ] stop
				 */

				/**
				 * [tLog4J_1 main ] start
				 */

				currentComponent = "tLog4J_1";

				logger_tLog4J_1.error(this.getExceptionStackTrace());
				nb_logged_line_tLog4J_1++;

				nb_line_tLog4J_1++;

				tos_count_tLog4J_1++;

				/**
				 * [tLog4J_1 main ] stop
				 */

				/**
				 * [tLog4J_1 end ] start
				 */

				currentComponent = "tLog4J_1";

				globalMap.put("tLog4J_1_NB_LINE", nb_line_tLog4J_1);
				globalMap.put("tLog4J_1_NB_LOGGED_LINE",
						nb_logged_line_tLog4J_1);

				ok_Hash.put("tLog4J_1", true);
				end_Hash.put("tLog4J_1", System.currentTimeMillis());

				/**
				 * [tLog4J_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLog4J_1 finally ] start
				 */

				currentComponent = "tLog4J_1";

				/**
				 * [tLog4J_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLog4J_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Allinea AllineaClass = new Allinea();

		int exitCode = AllineaClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Allinea.class.getClassLoader()
					.getResourceAsStream(
							"allinea_database_mybox/allinea_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.conn_db_900_6 = (String) context
					.getProperty("conn_db_900_6");
			context.conn_host_900_6 = (String) context
					.getProperty("conn_host_900_6");
			context.conn_port_900_6 = (String) context
					.getProperty("conn_port_900_6");
			context.conn_psw_900_6 = (String) context
					.getProperty("conn_psw_900_6");
			context.conn_schema_900_6 = (String) context
					.getProperty("conn_schema_900_6");
			context.conn_usr_900_6 = (String) context
					.getProperty("conn_usr_900_6");
			context.conn_db_E45_1 = (String) context
					.getProperty("conn_db_E45_1");
			context.conn_host_E45_1 = (String) context
					.getProperty("conn_host_E45_1");
			context.conn_port_E45_1 = (String) context
					.getProperty("conn_port_E45_1");
			context.conn_psw_E45_1 = (String) context
					.getProperty("conn_psw_E45_1");
			context.conn_schema_E45_1 = (String) context
					.getProperty("conn_schema_E45_1");
			context.conn_usr_E45_1 = (String) context
					.getProperty("conn_usr_E45_1");
			context.conn_db_E45_2 = (String) context
					.getProperty("conn_db_E45_2");
			context.conn_host_E45_2 = (String) context
					.getProperty("conn_host_E45_2");
			context.conn_port_E45_2 = (String) context
					.getProperty("conn_port_E45_2");
			context.conn_psw_E45_2 = (String) context
					.getProperty("conn_psw_E45_2");
			context.conn_schema_E45_2 = (String) context
					.getProperty("conn_schema_E45_2");
			context.conn_usr_E45_2 = (String) context
					.getProperty("conn_usr_E45_2");
			context.conn_db_E45_3 = (String) context
					.getProperty("conn_db_E45_3");
			context.conn_host_E45_3 = (String) context
					.getProperty("conn_host_E45_3");
			context.conn_port_E45_3 = (String) context
					.getProperty("conn_port_E45_3");
			context.conn_psw_E45_3 = (String) context
					.getProperty("conn_psw_E45_3");
			context.conn_schema_E45_3 = (String) context
					.getProperty("conn_schema_E45_3");
			context.conn_usr_E45_3 = (String) context
					.getProperty("conn_usr_E45_3");
			context.conn_db_E45_4 = (String) context
					.getProperty("conn_db_E45_4");
			context.conn_host_E45_4 = (String) context
					.getProperty("conn_host_E45_4");
			context.conn_port_E45_4 = (String) context
					.getProperty("conn_port_E45_4");
			context.conn_psw_E45_4 = (String) context
					.getProperty("conn_psw_E45_4");
			context.conn_schema_E45_4 = (String) context
					.getProperty("conn_schema_E45_4");
			context.conn_usr_E45_4 = (String) context
					.getProperty("conn_usr_E45_4");
			context.ambiente = (String) context.getProperty("ambiente");
			context.codice_applicazione_mypay_fesp = (String) context
					.getProperty("codice_applicazione_mypay_fesp");
			context.codice_applicazione_mypay_pa = (String) context
					.getProperty("codice_applicazione_mypay_pa");
			context.codice_applicazione_mypivot = (String) context
					.getProperty("codice_applicazione_mypivot");
			context.directory_talend = (String) context
					.getProperty("directory_talend");
			context.ente_predefinito = (String) context
					.getProperty("ente_predefinito");
			try {
				context.numero_minuti_avviso = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("numero_minuti_avviso"));
			} catch (NumberFormatException e) {
				context.numero_minuti_avviso = null;
			}
			try {
				context.numero_ore_trigger_batch = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("numero_ore_trigger_batch"));
			} catch (NumberFormatException e) {
				context.numero_ore_trigger_batch = null;
			}
			context.pa_public_url = (String) context
					.getProperty("pa_public_url");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("conn_db_900_6")) {
				context.conn_db_900_6 = (String) parentContextMap
						.get("conn_db_900_6");
			}
			if (parentContextMap.containsKey("conn_host_900_6")) {
				context.conn_host_900_6 = (String) parentContextMap
						.get("conn_host_900_6");
			}
			if (parentContextMap.containsKey("conn_port_900_6")) {
				context.conn_port_900_6 = (String) parentContextMap
						.get("conn_port_900_6");
			}
			if (parentContextMap.containsKey("conn_psw_900_6")) {
				context.conn_psw_900_6 = (String) parentContextMap
						.get("conn_psw_900_6");
			}
			if (parentContextMap.containsKey("conn_schema_900_6")) {
				context.conn_schema_900_6 = (String) parentContextMap
						.get("conn_schema_900_6");
			}
			if (parentContextMap.containsKey("conn_usr_900_6")) {
				context.conn_usr_900_6 = (String) parentContextMap
						.get("conn_usr_900_6");
			}
			if (parentContextMap.containsKey("conn_db_E45_1")) {
				context.conn_db_E45_1 = (String) parentContextMap
						.get("conn_db_E45_1");
			}
			if (parentContextMap.containsKey("conn_host_E45_1")) {
				context.conn_host_E45_1 = (String) parentContextMap
						.get("conn_host_E45_1");
			}
			if (parentContextMap.containsKey("conn_port_E45_1")) {
				context.conn_port_E45_1 = (String) parentContextMap
						.get("conn_port_E45_1");
			}
			if (parentContextMap.containsKey("conn_psw_E45_1")) {
				context.conn_psw_E45_1 = (String) parentContextMap
						.get("conn_psw_E45_1");
			}
			if (parentContextMap.containsKey("conn_schema_E45_1")) {
				context.conn_schema_E45_1 = (String) parentContextMap
						.get("conn_schema_E45_1");
			}
			if (parentContextMap.containsKey("conn_usr_E45_1")) {
				context.conn_usr_E45_1 = (String) parentContextMap
						.get("conn_usr_E45_1");
			}
			if (parentContextMap.containsKey("conn_db_E45_2")) {
				context.conn_db_E45_2 = (String) parentContextMap
						.get("conn_db_E45_2");
			}
			if (parentContextMap.containsKey("conn_host_E45_2")) {
				context.conn_host_E45_2 = (String) parentContextMap
						.get("conn_host_E45_2");
			}
			if (parentContextMap.containsKey("conn_port_E45_2")) {
				context.conn_port_E45_2 = (String) parentContextMap
						.get("conn_port_E45_2");
			}
			if (parentContextMap.containsKey("conn_psw_E45_2")) {
				context.conn_psw_E45_2 = (String) parentContextMap
						.get("conn_psw_E45_2");
			}
			if (parentContextMap.containsKey("conn_schema_E45_2")) {
				context.conn_schema_E45_2 = (String) parentContextMap
						.get("conn_schema_E45_2");
			}
			if (parentContextMap.containsKey("conn_usr_E45_2")) {
				context.conn_usr_E45_2 = (String) parentContextMap
						.get("conn_usr_E45_2");
			}
			if (parentContextMap.containsKey("conn_db_E45_3")) {
				context.conn_db_E45_3 = (String) parentContextMap
						.get("conn_db_E45_3");
			}
			if (parentContextMap.containsKey("conn_host_E45_3")) {
				context.conn_host_E45_3 = (String) parentContextMap
						.get("conn_host_E45_3");
			}
			if (parentContextMap.containsKey("conn_port_E45_3")) {
				context.conn_port_E45_3 = (String) parentContextMap
						.get("conn_port_E45_3");
			}
			if (parentContextMap.containsKey("conn_psw_E45_3")) {
				context.conn_psw_E45_3 = (String) parentContextMap
						.get("conn_psw_E45_3");
			}
			if (parentContextMap.containsKey("conn_schema_E45_3")) {
				context.conn_schema_E45_3 = (String) parentContextMap
						.get("conn_schema_E45_3");
			}
			if (parentContextMap.containsKey("conn_usr_E45_3")) {
				context.conn_usr_E45_3 = (String) parentContextMap
						.get("conn_usr_E45_3");
			}
			if (parentContextMap.containsKey("conn_db_E45_4")) {
				context.conn_db_E45_4 = (String) parentContextMap
						.get("conn_db_E45_4");
			}
			if (parentContextMap.containsKey("conn_host_E45_4")) {
				context.conn_host_E45_4 = (String) parentContextMap
						.get("conn_host_E45_4");
			}
			if (parentContextMap.containsKey("conn_port_E45_4")) {
				context.conn_port_E45_4 = (String) parentContextMap
						.get("conn_port_E45_4");
			}
			if (parentContextMap.containsKey("conn_psw_E45_4")) {
				context.conn_psw_E45_4 = (String) parentContextMap
						.get("conn_psw_E45_4");
			}
			if (parentContextMap.containsKey("conn_schema_E45_4")) {
				context.conn_schema_E45_4 = (String) parentContextMap
						.get("conn_schema_E45_4");
			}
			if (parentContextMap.containsKey("conn_usr_E45_4")) {
				context.conn_usr_E45_4 = (String) parentContextMap
						.get("conn_usr_E45_4");
			}
			if (parentContextMap.containsKey("ambiente")) {
				context.ambiente = (String) parentContextMap.get("ambiente");
			}
			if (parentContextMap.containsKey("codice_applicazione_mypay_fesp")) {
				context.codice_applicazione_mypay_fesp = (String) parentContextMap
						.get("codice_applicazione_mypay_fesp");
			}
			if (parentContextMap.containsKey("codice_applicazione_mypay_pa")) {
				context.codice_applicazione_mypay_pa = (String) parentContextMap
						.get("codice_applicazione_mypay_pa");
			}
			if (parentContextMap.containsKey("codice_applicazione_mypivot")) {
				context.codice_applicazione_mypivot = (String) parentContextMap
						.get("codice_applicazione_mypivot");
			}
			if (parentContextMap.containsKey("directory_talend")) {
				context.directory_talend = (String) parentContextMap
						.get("directory_talend");
			}
			if (parentContextMap.containsKey("ente_predefinito")) {
				context.ente_predefinito = (String) parentContextMap
						.get("ente_predefinito");
			}
			if (parentContextMap.containsKey("numero_minuti_avviso")) {
				context.numero_minuti_avviso = (Integer) parentContextMap
						.get("numero_minuti_avviso");
			}
			if (parentContextMap.containsKey("numero_ore_trigger_batch")) {
				context.numero_ore_trigger_batch = (Integer) parentContextMap
						.get("numero_ore_trigger_batch");
			}
			if (parentContextMap.containsKey("pa_public_url")) {
				context.pa_public_url = (String) parentContextMap
						.get("pa_public_url");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_1) {
			globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

			e_tJava_1.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_6) {
			globalMap.put("tJava_6_SUBPROCESS_STATE", -1);

			e_tJava_6.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_9Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_9) {
			globalMap.put("tJava_9_SUBPROCESS_STATE", -1);

			e_tJava_9.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Allinea");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status,
				(end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tPostgresqlConnection_5");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tPostgresqlConnection_3");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tPostgresqlConnection_5",
				globalMap.get("conn_tPostgresqlConnection_5"));
		connections.put("conn_tPostgresqlConnection_3",
				globalMap.get("conn_tPostgresqlConnection_3"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 164635 characters generated by Talend Open Studio for Data Integration on the
 * 11 marzo 2020 12.25.36 CET
 ************************************************************************************************/
