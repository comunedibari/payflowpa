// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package manage_flussi_export.inviamail_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.JobStringManage;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
import java.util.concurrent.TimeUnit;
import org.apache.commons.lang.StringUtils;

//the import part of tLibraryLoad_1
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: InviaMail Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.0.1.20150908_1633
 * @status 
 */
public class InviaMail implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (nome_file_mail != null) {

				this.setProperty("nome_file_mail", nome_file_mail.toString());

			}

			if (testo_mail != null) {

				this.setProperty("testo_mail", testo_mail.toString());

			}

			if (oggetto_mail != null) {

				this.setProperty("oggetto_mail", oggetto_mail.toString());

			}

			if (indirizzo_operatore_richiedente != null) {

				this.setProperty("indirizzo_operatore_richiedente",
						indirizzo_operatore_richiedente.toString());

			}

			if (indirizzo_amministratore_ente != null) {

				this.setProperty("indirizzo_amministratore_ente",
						indirizzo_amministratore_ente.toString());

			}

			if (tipo_invio != null) {

				this.setProperty("tipo_invio", tipo_invio.toString());

			}

			if (email_ambiente != null) {

				this.setProperty("email_ambiente", email_ambiente.toString());

			}

			if (email_amministratore != null) {

				this.setProperty("email_amministratore",
						email_amministratore.toString());

			}

			if (email_flag_attiva != null) {

				this.setProperty("email_flag_attiva",
						email_flag_attiva.toString());

			}

			if (email_indirizzo_gestore != null) {

				this.setProperty("email_indirizzo_gestore",
						email_indirizzo_gestore.toString());

			}

			if (email_psw_gestore != null) {

				this.setProperty("email_psw_gestore",
						email_psw_gestore.toString());

			}

			if (email_sendername != null) {

				this.setProperty("email_sendername",
						email_sendername.toString());

			}

			if (email_smptHost_gestore != null) {

				this.setProperty("email_smptHost_gestore",
						email_smptHost_gestore.toString());

			}

			if (email_smptPort_gestore != null) {

				this.setProperty("email_smptPort_gestore",
						email_smptPort_gestore.toString());

			}

			if (email_ssl_support != null) {

				this.setProperty("email_ssl_support",
						email_ssl_support.toString());

			}

			if (email_usr_gestore != null) {

				this.setProperty("email_usr_gestore",
						email_usr_gestore.toString());

			}

		}

		public String nome_file_mail;

		public String getNome_file_mail() {
			return this.nome_file_mail;
		}

		public String testo_mail;

		public String getTesto_mail() {
			return this.testo_mail;
		}

		public String oggetto_mail;

		public String getOggetto_mail() {
			return this.oggetto_mail;
		}

		public String indirizzo_operatore_richiedente;

		public String getIndirizzo_operatore_richiedente() {
			return this.indirizzo_operatore_richiedente;
		}

		public String indirizzo_amministratore_ente;

		public String getIndirizzo_amministratore_ente() {
			return this.indirizzo_amministratore_ente;
		}

		public String tipo_invio;

		public String getTipo_invio() {
			return this.tipo_invio;
		}

		public String email_ambiente;

		public String getEmail_ambiente() {
			return this.email_ambiente;
		}

		public String email_amministratore;

		public String getEmail_amministratore() {
			return this.email_amministratore;
		}

		public Boolean email_flag_attiva;

		public Boolean getEmail_flag_attiva() {
			return this.email_flag_attiva;
		}

		public String email_indirizzo_gestore;

		public String getEmail_indirizzo_gestore() {
			return this.email_indirizzo_gestore;
		}

		public String email_psw_gestore;

		public String getEmail_psw_gestore() {
			return this.email_psw_gestore;
		}

		public String email_sendername;

		public String getEmail_sendername() {
			return this.email_sendername;
		}

		public String email_smptHost_gestore;

		public String getEmail_smptHost_gestore() {
			return this.email_smptHost_gestore;
		}

		public String email_smptPort_gestore;

		public String getEmail_smptPort_gestore() {
			return this.email_smptPort_gestore;
		}

		public Boolean email_ssl_support;

		public Boolean getEmail_ssl_support() {
			return this.email_ssl_support;
		}

		public String email_usr_gestore;

		public String getEmail_usr_gestore() {
			return this.email_usr_gestore;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "InviaMail";
	private final String projectName = "MANAGE_FLUSSI_EXPORT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils(
			"_gnyMwLD6EeO1zYd0wpSwlA", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					InviaMail.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(InviaMail.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSendMail_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tSendMail_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSendMail_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tSendMail_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSendMail_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tSendMail_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSendMail_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tSendMail_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tStatCatcher_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLog4JCatch_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLog4JCatch_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLog4J_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLog4J_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLibraryLoad_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tLibraryLoad_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSendMail_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSendMail_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSendMail_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSendMail_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tStatCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLog4J_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLibraryLoad_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				TimeUnit.SECONDS.sleep(2);

				context.email_flag_attiva = context.email_flag_attiva != null ? context.email_flag_attiva
						: false;
				context.email_ssl_support = context.email_ssl_support != null ? context.email_ssl_support
						: false;

				globalMap.put("esiteAllegato", "N");

				if (StringUtils.isNotBlank(context.nome_file_mail)) {
					globalMap.put("esiteAllegato", "Y");
				}

				if ("REGIONE".equalsIgnoreCase(context.tipo_invio)) {
					globalMap.put("to", context.email_amministratore);
					globalMap.put("cc", "");
				}

				if ("ENTE".equalsIgnoreCase(context.tipo_invio)) {

					String mailTo = "";
					String mailCC = "";
					if (StringUtils
							.isNotBlank(context.indirizzo_operatore_richiedente)) {
						mailTo = context.indirizzo_operatore_richiedente;
						if (!context.indirizzo_operatore_richiedente
								.equals(context.indirizzo_amministratore_ente)) {
							mailCC = context.indirizzo_amministratore_ente;
						}
					} else {
						mailTo = context.indirizzo_amministratore_ente;
					}
					globalMap.put("to", mailTo);
					globalMap.put("cc", mailCC);
				}

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_1",
						end_Hash.get("tJava_1") - start_Hash.get("tJava_1"));
				tStatCatcher_1Process(globalMap);
				if ("N".equalsIgnoreCase((String) globalMap
						.get("esiteAllegato"))
						&& !context.email_ssl_support
						&& context.email_flag_attiva) {

					tSendMail_1Process(globalMap);
				}

				if ("Y".equalsIgnoreCase((String) globalMap
						.get("esiteAllegato"))
						&& !context.email_ssl_support
						&& context.email_flag_attiva) {

					tSendMail_2Process(globalMap);
				}

				if ("N".equalsIgnoreCase((String) globalMap
						.get("esiteAllegato"))
						&& context.email_ssl_support
						&& context.email_flag_attiva) {

					tSendMail_3Process(globalMap);
				}

				if ("Y".equalsIgnoreCase((String) globalMap
						.get("esiteAllegato"))
						&& context.email_ssl_support
						&& context.email_flag_attiva) {

					tSendMail_4Process(globalMap);
				}

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tSendMail_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSendMail_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSendMail_1 begin ] start
				 */

				ok_Hash.put("tSendMail_1", false);
				start_Hash.put("tSendMail_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tSendMail_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tSendMail_1";

				int tos_count_tSendMail_1 = 0;

				/**
				 * [tSendMail_1 begin ] stop
				 */

				/**
				 * [tSendMail_1 main ] start
				 */

				currentComponent = "tSendMail_1";

				String smtpHost_tSendMail_1 = context.email_smptHost_gestore;
				String smtpPort_tSendMail_1 = context.email_smptPort_gestore;
				String from_tSendMail_1 = (context.email_indirizzo_gestore);
				String to_tSendMail_1 = ((String) globalMap.get("to")).replace(
						";", ",");
				String cc_tSendMail_1 = (((String) globalMap.get("cc")) == null || ""
						.equals((String) globalMap.get("cc"))) ? null
						: ((String) globalMap.get("cc")).replace(";", ",");
				String bcc_tSendMail_1 = (("") == null || "".equals("")) ? null
						: ("").replace(";", ",");
				String subject_tSendMail_1 = (context.oggetto_mail
						+ " - Ambiente: " + context.email_ambiente);

				java.util.List<java.util.Map<String, String>> headers_tSendMail_1 = new java.util.ArrayList<java.util.Map<String, String>>();
				java.util.List<String> attachments_tSendMail_1 = new java.util.ArrayList<String>();
				java.util.List<String> contentTransferEncoding_tSendMail_1 = new java.util.ArrayList<String>();

				String message_tSendMail_1 = (("Buongiorno,"
						+ "\r\n"
						+ "\r\n"
						+ "questa e' una mail generata in automatico dal sistema "
						+ context.email_sendername
						+ ", si raccomanda di non rispondere a questo messaggio."
						+ "\r\n"
						+ "Contattare l'assistenza per richiedere, se necessario, ulteriori chiarimenti."
						+ "\r\n" + "Di seguito il testo del messaggio: "
						+ context.testo_mail + "\r\n" + "\r\n" + TalendDate
						.getDate("EEE, MMM dd yyyy, hh:mm:ss")) == null || ""
						.equals("Buongiorno,"
								+ "\r\n"
								+ "\r\n"
								+ "questa e' una mail generata in automatico dal sistema "
								+ context.email_sendername
								+ ", si raccomanda di non rispondere a questo messaggio."
								+ "\r\n"
								+ "Contattare l'assistenza per richiedere, se necessario, ulteriori chiarimenti."
								+ "\r\n"
								+ "Di seguito il testo del messaggio: "
								+ context.testo_mail
								+ "\r\n"
								+ "\r\n"
								+ TalendDate
										.getDate("EEE, MMM dd yyyy, hh:mm:ss"))) ? "\"\""
						: ("Buongiorno,"
								+ "\r\n"
								+ "\r\n"
								+ "questa e' una mail generata in automatico dal sistema "
								+ context.email_sendername
								+ ", si raccomanda di non rispondere a questo messaggio."
								+ "\r\n"
								+ "Contattare l'assistenza per richiedere, se necessario, ulteriori chiarimenti."
								+ "\r\n"
								+ "Di seguito il testo del messaggio: "
								+ context.testo_mail + "\r\n" + "\r\n" + TalendDate
								.getDate("EEE, MMM dd yyyy, hh:mm:ss"));
				java.util.Properties props_tSendMail_1 = System.getProperties();
				props_tSendMail_1.put("mail.smtp.host", smtpHost_tSendMail_1);
				props_tSendMail_1.put("mail.smtp.port", smtpPort_tSendMail_1);
				props_tSendMail_1.put("mail.mime.encodefilename", "true");
				try {

					props_tSendMail_1.put("mail.smtp.auth", "true");
					javax.mail.Session session_tSendMail_1 = javax.mail.Session
							.getInstance(props_tSendMail_1,
									new javax.mail.Authenticator() {
										protected javax.mail.PasswordAuthentication getPasswordAuthentication() {

											final String decryptedPassword_tSendMail_1 = context.email_psw_gestore;

											return new javax.mail.PasswordAuthentication(
													context.email_usr_gestore,
													decryptedPassword_tSendMail_1);
										}
									});

					javax.mail.Message msg_tSendMail_1 = new javax.mail.internet.MimeMessage(
							session_tSendMail_1);
					msg_tSendMail_1
							.setFrom(new javax.mail.internet.InternetAddress(
									from_tSendMail_1, context.email_sendername));
					msg_tSendMail_1.setRecipients(
							javax.mail.Message.RecipientType.TO,
							javax.mail.internet.InternetAddress.parse(
									to_tSendMail_1, false));
					if (cc_tSendMail_1 != null)
						msg_tSendMail_1.setRecipients(
								javax.mail.Message.RecipientType.CC,
								javax.mail.internet.InternetAddress.parse(
										cc_tSendMail_1, false));
					if (bcc_tSendMail_1 != null)
						msg_tSendMail_1.setRecipients(
								javax.mail.Message.RecipientType.BCC,
								javax.mail.internet.InternetAddress.parse(
										bcc_tSendMail_1, false));
					msg_tSendMail_1.setSubject(subject_tSendMail_1);

					for (int i_tSendMail_1 = 0; i_tSendMail_1 < headers_tSendMail_1
							.size(); i_tSendMail_1++) {
						java.util.Map<String, String> header_tSendMail_1 = headers_tSendMail_1
								.get(i_tSendMail_1);
						msg_tSendMail_1.setHeader(
								header_tSendMail_1.get("KEY"),
								header_tSendMail_1.get("VALUE"));
					}
					msg_tSendMail_1.setSentDate(new Date());
					msg_tSendMail_1.setHeader("X-Priority", "3"); // High->1
																	// Normal->3
																	// Low->5
					javax.mail.Multipart mp_tSendMail_1 = new javax.mail.internet.MimeMultipart();
					javax.mail.internet.MimeBodyPart mbpText_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
					mbpText_tSendMail_1.setText(message_tSendMail_1, "UTF-8",
							"plain");
					mp_tSendMail_1.addBodyPart(mbpText_tSendMail_1);

					javax.mail.internet.MimeBodyPart mbpFile_tSendMail_1 = null;

					for (int i_tSendMail_1 = 0; i_tSendMail_1 < attachments_tSendMail_1
							.size(); i_tSendMail_1++) {
						String filename_tSendMail_1 = attachments_tSendMail_1
								.get(i_tSendMail_1);
						javax.activation.FileDataSource fds_tSendMail_1 = null;
						java.io.File file_tSendMail_1 = new java.io.File(
								filename_tSendMail_1);

						if (!file_tSendMail_1.exists()) {
							continue;
						}

						if (file_tSendMail_1.isDirectory()) {
							java.io.File[] subFiles_tSendMail_1 = file_tSendMail_1
									.listFiles();
							for (java.io.File subFile_tSendMail_1 : subFiles_tSendMail_1) {
								if (subFile_tSendMail_1.isFile()) {
									fds_tSendMail_1 = new javax.activation.FileDataSource(
											subFile_tSendMail_1
													.getAbsolutePath());
									mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
									mbpFile_tSendMail_1
											.setDataHandler(new javax.activation.DataHandler(
													fds_tSendMail_1));
									mbpFile_tSendMail_1
											.setFileName(javax.mail.internet.MimeUtility
													.encodeText(fds_tSendMail_1
															.getName()));
									if (contentTransferEncoding_tSendMail_1
											.get(i_tSendMail_1)
											.equalsIgnoreCase("base64")) {
										mbpFile_tSendMail_1.setHeader(
												"Content-Transfer-Encoding",
												"base64");
									}
									mp_tSendMail_1
											.addBodyPart(mbpFile_tSendMail_1);
								}
							}
						} else {
							mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
							fds_tSendMail_1 = new javax.activation.FileDataSource(
									filename_tSendMail_1);
							mbpFile_tSendMail_1
									.setDataHandler(new javax.activation.DataHandler(
											fds_tSendMail_1));
							mbpFile_tSendMail_1
									.setFileName(javax.mail.internet.MimeUtility
											.encodeText(fds_tSendMail_1
													.getName()));
							if (contentTransferEncoding_tSendMail_1.get(
									i_tSendMail_1).equalsIgnoreCase("base64")) {
								mbpFile_tSendMail_1.setHeader(
										"Content-Transfer-Encoding", "base64");
							}
							mp_tSendMail_1.addBodyPart(mbpFile_tSendMail_1);
						}
					}
					// -- set the content --
					msg_tSendMail_1.setContent(mp_tSendMail_1);
					// add handlers for main MIME types
					javax.activation.MailcapCommandMap mc_tSendMail_1 = (javax.activation.MailcapCommandMap) javax.activation.CommandMap
							.getDefaultCommandMap();
					mc_tSendMail_1
							.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
					mc_tSendMail_1
							.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
					mc_tSendMail_1
							.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
					mc_tSendMail_1
							.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
					mc_tSendMail_1
							.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
					javax.activation.CommandMap
							.setDefaultCommandMap(mc_tSendMail_1);
					// -- Send the message --
					javax.mail.Transport.send(msg_tSendMail_1);
				} catch (java.lang.Exception e) {

					throw (e);

				} finally {
					props_tSendMail_1.remove("mail.smtp.host");
					props_tSendMail_1.remove("mail.smtp.port");

					props_tSendMail_1.remove("mail.mime.encodefilename");

					props_tSendMail_1.remove("mail.smtp.auth");
				}

				tos_count_tSendMail_1++;

				/**
				 * [tSendMail_1 main ] stop
				 */

				/**
				 * [tSendMail_1 end ] start
				 */

				currentComponent = "tSendMail_1";

				ok_Hash.put("tSendMail_1", true);
				end_Hash.put("tSendMail_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tSendMail_1",
						end_Hash.get("tSendMail_1")
								- start_Hash.get("tSendMail_1"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tSendMail_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSendMail_1 finally ] start
				 */

				currentComponent = "tSendMail_1";

				/**
				 * [tSendMail_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSendMail_1_SUBPROCESS_STATE", 1);
	}

	public void tSendMail_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSendMail_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSendMail_2 begin ] start
				 */

				ok_Hash.put("tSendMail_2", false);
				start_Hash.put("tSendMail_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tSendMail_2");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tSendMail_2";

				int tos_count_tSendMail_2 = 0;

				/**
				 * [tSendMail_2 begin ] stop
				 */

				/**
				 * [tSendMail_2 main ] start
				 */

				currentComponent = "tSendMail_2";

				String smtpHost_tSendMail_2 = context.email_smptHost_gestore;
				String smtpPort_tSendMail_2 = context.email_smptPort_gestore;
				String from_tSendMail_2 = (context.email_indirizzo_gestore);
				String to_tSendMail_2 = ((String) globalMap.get("to")).replace(
						";", ",");
				String cc_tSendMail_2 = (((String) globalMap.get("cc")) == null || ""
						.equals((String) globalMap.get("cc"))) ? null
						: ((String) globalMap.get("cc")).replace(";", ",");
				String bcc_tSendMail_2 = (("") == null || "".equals("")) ? null
						: ("").replace(";", ",");
				String subject_tSendMail_2 = (context.oggetto_mail
						+ " - Ambiente: " + context.email_ambiente);

				java.util.List<java.util.Map<String, String>> headers_tSendMail_2 = new java.util.ArrayList<java.util.Map<String, String>>();
				java.util.List<String> attachments_tSendMail_2 = new java.util.ArrayList<String>();
				java.util.List<String> contentTransferEncoding_tSendMail_2 = new java.util.ArrayList<String>();
				attachments_tSendMail_2.add(context.nome_file_mail);
				contentTransferEncoding_tSendMail_2.add("DEFAULT");

				String message_tSendMail_2 = (("Buongiorno,"
						+ "\r\n"
						+ "\r\n"
						+ "questa e' una mail generata in automatico dal sistema "
						+ context.email_sendername
						+ ", si raccomanda di non rispondere a questo messaggio."
						+ "\r\n"
						+ "Contattare l'assistenza per richiedere, se necessario, ulteriori chiarimenti."
						+ "\r\n" + "Di seguito il testo del messaggio: "
						+ context.testo_mail + "\r\n" + "\r\n" + TalendDate
						.getDate("EEE, MMM dd yyyy, hh:mm:ss")) == null || ""
						.equals("Buongiorno,"
								+ "\r\n"
								+ "\r\n"
								+ "questa e' una mail generata in automatico dal sistema "
								+ context.email_sendername
								+ ", si raccomanda di non rispondere a questo messaggio."
								+ "\r\n"
								+ "Contattare l'assistenza per richiedere, se necessario, ulteriori chiarimenti."
								+ "\r\n"
								+ "Di seguito il testo del messaggio: "
								+ context.testo_mail
								+ "\r\n"
								+ "\r\n"
								+ TalendDate
										.getDate("EEE, MMM dd yyyy, hh:mm:ss"))) ? "\"\""
						: ("Buongiorno,"
								+ "\r\n"
								+ "\r\n"
								+ "questa e' una mail generata in automatico dal sistema "
								+ context.email_sendername
								+ ", si raccomanda di non rispondere a questo messaggio."
								+ "\r\n"
								+ "Contattare l'assistenza per richiedere, se necessario, ulteriori chiarimenti."
								+ "\r\n"
								+ "Di seguito il testo del messaggio: "
								+ context.testo_mail + "\r\n" + "\r\n" + TalendDate
								.getDate("EEE, MMM dd yyyy, hh:mm:ss"));
				java.util.Properties props_tSendMail_2 = System.getProperties();
				props_tSendMail_2.put("mail.smtp.host", smtpHost_tSendMail_2);
				props_tSendMail_2.put("mail.smtp.port", smtpPort_tSendMail_2);
				props_tSendMail_2.put("mail.mime.encodefilename", "true");
				try {

					props_tSendMail_2.put("mail.smtp.auth", "true");
					javax.mail.Session session_tSendMail_2 = javax.mail.Session
							.getInstance(props_tSendMail_2,
									new javax.mail.Authenticator() {
										protected javax.mail.PasswordAuthentication getPasswordAuthentication() {

											final String decryptedPassword_tSendMail_2 = context.email_psw_gestore;

											return new javax.mail.PasswordAuthentication(
													context.email_usr_gestore,
													decryptedPassword_tSendMail_2);
										}
									});

					javax.mail.Message msg_tSendMail_2 = new javax.mail.internet.MimeMessage(
							session_tSendMail_2);
					msg_tSendMail_2
							.setFrom(new javax.mail.internet.InternetAddress(
									from_tSendMail_2, context.email_sendername));
					msg_tSendMail_2.setRecipients(
							javax.mail.Message.RecipientType.TO,
							javax.mail.internet.InternetAddress.parse(
									to_tSendMail_2, false));
					if (cc_tSendMail_2 != null)
						msg_tSendMail_2.setRecipients(
								javax.mail.Message.RecipientType.CC,
								javax.mail.internet.InternetAddress.parse(
										cc_tSendMail_2, false));
					if (bcc_tSendMail_2 != null)
						msg_tSendMail_2.setRecipients(
								javax.mail.Message.RecipientType.BCC,
								javax.mail.internet.InternetAddress.parse(
										bcc_tSendMail_2, false));
					msg_tSendMail_2.setSubject(subject_tSendMail_2);

					for (int i_tSendMail_2 = 0; i_tSendMail_2 < headers_tSendMail_2
							.size(); i_tSendMail_2++) {
						java.util.Map<String, String> header_tSendMail_2 = headers_tSendMail_2
								.get(i_tSendMail_2);
						msg_tSendMail_2.setHeader(
								header_tSendMail_2.get("KEY"),
								header_tSendMail_2.get("VALUE"));
					}
					msg_tSendMail_2.setSentDate(new Date());
					msg_tSendMail_2.setHeader("X-Priority", "3"); // High->1
																	// Normal->3
																	// Low->5
					javax.mail.Multipart mp_tSendMail_2 = new javax.mail.internet.MimeMultipart();
					javax.mail.internet.MimeBodyPart mbpText_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
					mbpText_tSendMail_2.setText(message_tSendMail_2, "UTF-8",
							"plain");
					mp_tSendMail_2.addBodyPart(mbpText_tSendMail_2);

					javax.mail.internet.MimeBodyPart mbpFile_tSendMail_2 = null;

					for (int i_tSendMail_2 = 0; i_tSendMail_2 < attachments_tSendMail_2
							.size(); i_tSendMail_2++) {
						String filename_tSendMail_2 = attachments_tSendMail_2
								.get(i_tSendMail_2);
						javax.activation.FileDataSource fds_tSendMail_2 = null;
						java.io.File file_tSendMail_2 = new java.io.File(
								filename_tSendMail_2);

						if (file_tSendMail_2.isDirectory()) {
							java.io.File[] subFiles_tSendMail_2 = file_tSendMail_2
									.listFiles();
							for (java.io.File subFile_tSendMail_2 : subFiles_tSendMail_2) {
								if (subFile_tSendMail_2.isFile()) {
									fds_tSendMail_2 = new javax.activation.FileDataSource(
											subFile_tSendMail_2
													.getAbsolutePath());
									mbpFile_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
									mbpFile_tSendMail_2
											.setDataHandler(new javax.activation.DataHandler(
													fds_tSendMail_2));
									mbpFile_tSendMail_2
											.setFileName(javax.mail.internet.MimeUtility
													.encodeText(fds_tSendMail_2
															.getName()));
									if (contentTransferEncoding_tSendMail_2
											.get(i_tSendMail_2)
											.equalsIgnoreCase("base64")) {
										mbpFile_tSendMail_2.setHeader(
												"Content-Transfer-Encoding",
												"base64");
									}
									mp_tSendMail_2
											.addBodyPart(mbpFile_tSendMail_2);
								}
							}
						} else {
							mbpFile_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
							fds_tSendMail_2 = new javax.activation.FileDataSource(
									filename_tSendMail_2);
							mbpFile_tSendMail_2
									.setDataHandler(new javax.activation.DataHandler(
											fds_tSendMail_2));
							mbpFile_tSendMail_2
									.setFileName(javax.mail.internet.MimeUtility
											.encodeText(fds_tSendMail_2
													.getName()));
							if (contentTransferEncoding_tSendMail_2.get(
									i_tSendMail_2).equalsIgnoreCase("base64")) {
								mbpFile_tSendMail_2.setHeader(
										"Content-Transfer-Encoding", "base64");
							}
							mp_tSendMail_2.addBodyPart(mbpFile_tSendMail_2);
						}
					}
					// -- set the content --
					msg_tSendMail_2.setContent(mp_tSendMail_2);
					// add handlers for main MIME types
					javax.activation.MailcapCommandMap mc_tSendMail_2 = (javax.activation.MailcapCommandMap) javax.activation.CommandMap
							.getDefaultCommandMap();
					mc_tSendMail_2
							.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
					mc_tSendMail_2
							.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
					mc_tSendMail_2
							.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
					mc_tSendMail_2
							.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
					mc_tSendMail_2
							.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
					javax.activation.CommandMap
							.setDefaultCommandMap(mc_tSendMail_2);
					// -- Send the message --
					javax.mail.Transport.send(msg_tSendMail_2);
				} catch (java.lang.Exception e) {

					throw (e);

				} finally {
					props_tSendMail_2.remove("mail.smtp.host");
					props_tSendMail_2.remove("mail.smtp.port");

					props_tSendMail_2.remove("mail.mime.encodefilename");

					props_tSendMail_2.remove("mail.smtp.auth");
				}

				tos_count_tSendMail_2++;

				/**
				 * [tSendMail_2 main ] stop
				 */

				/**
				 * [tSendMail_2 end ] start
				 */

				currentComponent = "tSendMail_2";

				ok_Hash.put("tSendMail_2", true);
				end_Hash.put("tSendMail_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tSendMail_2",
						end_Hash.get("tSendMail_2")
								- start_Hash.get("tSendMail_2"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tSendMail_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSendMail_2 finally ] start
				 */

				currentComponent = "tSendMail_2";

				/**
				 * [tSendMail_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSendMail_2_SUBPROCESS_STATE", 1);
	}

	public void tSendMail_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSendMail_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSendMail_3 begin ] start
				 */

				ok_Hash.put("tSendMail_3", false);
				start_Hash.put("tSendMail_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tSendMail_3");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tSendMail_3";

				int tos_count_tSendMail_3 = 0;

				/**
				 * [tSendMail_3 begin ] stop
				 */

				/**
				 * [tSendMail_3 main ] start
				 */

				currentComponent = "tSendMail_3";

				String smtpHost_tSendMail_3 = context.email_smptHost_gestore;
				String smtpPort_tSendMail_3 = context.email_smptPort_gestore;
				String from_tSendMail_3 = (context.email_indirizzo_gestore);
				String to_tSendMail_3 = ((String) globalMap.get("to")).replace(
						";", ",");
				String cc_tSendMail_3 = (((String) globalMap.get("cc")) == null || ""
						.equals((String) globalMap.get("cc"))) ? null
						: ((String) globalMap.get("cc")).replace(";", ",");
				String bcc_tSendMail_3 = (("") == null || "".equals("")) ? null
						: ("").replace(";", ",");
				String subject_tSendMail_3 = (context.oggetto_mail
						+ " - Ambiente: " + context.email_ambiente);

				java.util.List<java.util.Map<String, String>> headers_tSendMail_3 = new java.util.ArrayList<java.util.Map<String, String>>();
				java.util.List<String> attachments_tSendMail_3 = new java.util.ArrayList<String>();
				java.util.List<String> contentTransferEncoding_tSendMail_3 = new java.util.ArrayList<String>();

				String message_tSendMail_3 = (("Buongiorno,"
						+ "\r\n"
						+ "\r\n"
						+ "questa e' una mail generata in automatico dal sistema "
						+ context.email_sendername
						+ ", si raccomanda di non rispondere a questo messaggio."
						+ "\r\n"
						+ "Contattare l'assistenza per richiedere, se necessario, ulteriori chiarimenti."
						+ "\r\n" + "Di seguito il testo del messaggio: "
						+ context.testo_mail + "\r\n" + "\r\n" + TalendDate
						.getDate("EEE, MMM dd yyyy, hh:mm:ss")) == null || ""
						.equals("Buongiorno,"
								+ "\r\n"
								+ "\r\n"
								+ "questa e' una mail generata in automatico dal sistema "
								+ context.email_sendername
								+ ", si raccomanda di non rispondere a questo messaggio."
								+ "\r\n"
								+ "Contattare l'assistenza per richiedere, se necessario, ulteriori chiarimenti."
								+ "\r\n"
								+ "Di seguito il testo del messaggio: "
								+ context.testo_mail
								+ "\r\n"
								+ "\r\n"
								+ TalendDate
										.getDate("EEE, MMM dd yyyy, hh:mm:ss"))) ? "\"\""
						: ("Buongiorno,"
								+ "\r\n"
								+ "\r\n"
								+ "questa e' una mail generata in automatico dal sistema "
								+ context.email_sendername
								+ ", si raccomanda di non rispondere a questo messaggio."
								+ "\r\n"
								+ "Contattare l'assistenza per richiedere, se necessario, ulteriori chiarimenti."
								+ "\r\n"
								+ "Di seguito il testo del messaggio: "
								+ context.testo_mail + "\r\n" + "\r\n" + TalendDate
								.getDate("EEE, MMM dd yyyy, hh:mm:ss"));
				java.util.Properties props_tSendMail_3 = System.getProperties();
				props_tSendMail_3.put("mail.smtp.host", smtpHost_tSendMail_3);
				props_tSendMail_3.put("mail.smtp.port", smtpPort_tSendMail_3);
				props_tSendMail_3.put("mail.mime.encodefilename", "true");
				java.security.Security
						.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
				props_tSendMail_3.put("mail.smtp.socketFactory.class",
						"javax.net.ssl.SSLSocketFactory");
				props_tSendMail_3.put("mail.smtp.socketFactory.fallback",
						"false");
				props_tSendMail_3.put("mail.smtp.socketFactory.port",
						smtpPort_tSendMail_3);
				try {

					props_tSendMail_3.put("mail.smtp.auth", "true");
					javax.mail.Session session_tSendMail_3 = javax.mail.Session
							.getInstance(props_tSendMail_3,
									new javax.mail.Authenticator() {
										protected javax.mail.PasswordAuthentication getPasswordAuthentication() {

											final String decryptedPassword_tSendMail_3 = context.email_psw_gestore;

											return new javax.mail.PasswordAuthentication(
													context.email_usr_gestore,
													decryptedPassword_tSendMail_3);
										}
									});

					javax.mail.Message msg_tSendMail_3 = new javax.mail.internet.MimeMessage(
							session_tSendMail_3);
					msg_tSendMail_3
							.setFrom(new javax.mail.internet.InternetAddress(
									from_tSendMail_3, context.email_sendername));
					msg_tSendMail_3.setRecipients(
							javax.mail.Message.RecipientType.TO,
							javax.mail.internet.InternetAddress.parse(
									to_tSendMail_3, false));
					if (cc_tSendMail_3 != null)
						msg_tSendMail_3.setRecipients(
								javax.mail.Message.RecipientType.CC,
								javax.mail.internet.InternetAddress.parse(
										cc_tSendMail_3, false));
					if (bcc_tSendMail_3 != null)
						msg_tSendMail_3.setRecipients(
								javax.mail.Message.RecipientType.BCC,
								javax.mail.internet.InternetAddress.parse(
										bcc_tSendMail_3, false));
					msg_tSendMail_3.setSubject(subject_tSendMail_3);

					for (int i_tSendMail_3 = 0; i_tSendMail_3 < headers_tSendMail_3
							.size(); i_tSendMail_3++) {
						java.util.Map<String, String> header_tSendMail_3 = headers_tSendMail_3
								.get(i_tSendMail_3);
						msg_tSendMail_3.setHeader(
								header_tSendMail_3.get("KEY"),
								header_tSendMail_3.get("VALUE"));
					}
					msg_tSendMail_3.setSentDate(new Date());
					msg_tSendMail_3.setHeader("X-Priority", "3"); // High->1
																	// Normal->3
																	// Low->5
					javax.mail.Multipart mp_tSendMail_3 = new javax.mail.internet.MimeMultipart();
					javax.mail.internet.MimeBodyPart mbpText_tSendMail_3 = new javax.mail.internet.MimeBodyPart();
					mbpText_tSendMail_3.setText(message_tSendMail_3, "UTF-8",
							"plain");
					mp_tSendMail_3.addBodyPart(mbpText_tSendMail_3);

					javax.mail.internet.MimeBodyPart mbpFile_tSendMail_3 = null;

					for (int i_tSendMail_3 = 0; i_tSendMail_3 < attachments_tSendMail_3
							.size(); i_tSendMail_3++) {
						String filename_tSendMail_3 = attachments_tSendMail_3
								.get(i_tSendMail_3);
						javax.activation.FileDataSource fds_tSendMail_3 = null;
						java.io.File file_tSendMail_3 = new java.io.File(
								filename_tSendMail_3);

						if (!file_tSendMail_3.exists()) {
							continue;
						}

						if (file_tSendMail_3.isDirectory()) {
							java.io.File[] subFiles_tSendMail_3 = file_tSendMail_3
									.listFiles();
							for (java.io.File subFile_tSendMail_3 : subFiles_tSendMail_3) {
								if (subFile_tSendMail_3.isFile()) {
									fds_tSendMail_3 = new javax.activation.FileDataSource(
											subFile_tSendMail_3
													.getAbsolutePath());
									mbpFile_tSendMail_3 = new javax.mail.internet.MimeBodyPart();
									mbpFile_tSendMail_3
											.setDataHandler(new javax.activation.DataHandler(
													fds_tSendMail_3));
									mbpFile_tSendMail_3
											.setFileName(javax.mail.internet.MimeUtility
													.encodeText(fds_tSendMail_3
															.getName()));
									if (contentTransferEncoding_tSendMail_3
											.get(i_tSendMail_3)
											.equalsIgnoreCase("base64")) {
										mbpFile_tSendMail_3.setHeader(
												"Content-Transfer-Encoding",
												"base64");
									}
									mp_tSendMail_3
											.addBodyPart(mbpFile_tSendMail_3);
								}
							}
						} else {
							mbpFile_tSendMail_3 = new javax.mail.internet.MimeBodyPart();
							fds_tSendMail_3 = new javax.activation.FileDataSource(
									filename_tSendMail_3);
							mbpFile_tSendMail_3
									.setDataHandler(new javax.activation.DataHandler(
											fds_tSendMail_3));
							mbpFile_tSendMail_3
									.setFileName(javax.mail.internet.MimeUtility
											.encodeText(fds_tSendMail_3
													.getName()));
							if (contentTransferEncoding_tSendMail_3.get(
									i_tSendMail_3).equalsIgnoreCase("base64")) {
								mbpFile_tSendMail_3.setHeader(
										"Content-Transfer-Encoding", "base64");
							}
							mp_tSendMail_3.addBodyPart(mbpFile_tSendMail_3);
						}
					}
					// -- set the content --
					msg_tSendMail_3.setContent(mp_tSendMail_3);
					// add handlers for main MIME types
					javax.activation.MailcapCommandMap mc_tSendMail_3 = (javax.activation.MailcapCommandMap) javax.activation.CommandMap
							.getDefaultCommandMap();
					mc_tSendMail_3
							.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
					mc_tSendMail_3
							.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
					mc_tSendMail_3
							.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
					mc_tSendMail_3
							.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
					mc_tSendMail_3
							.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
					javax.activation.CommandMap
							.setDefaultCommandMap(mc_tSendMail_3);
					// -- Send the message --
					javax.mail.Transport.send(msg_tSendMail_3);
				} catch (java.lang.Exception e) {

					throw (e);

				} finally {
					props_tSendMail_3.remove("mail.smtp.host");
					props_tSendMail_3.remove("mail.smtp.port");

					props_tSendMail_3.remove("mail.mime.encodefilename");

					props_tSendMail_3.remove("mail.smtp.socketFactory.class");
					props_tSendMail_3
							.remove("mail.smtp.socketFactory.fallback");
					props_tSendMail_3.remove("mail.smtp.socketFactory.port");

					props_tSendMail_3.remove("mail.smtp.auth");
				}

				tos_count_tSendMail_3++;

				/**
				 * [tSendMail_3 main ] stop
				 */

				/**
				 * [tSendMail_3 end ] start
				 */

				currentComponent = "tSendMail_3";

				ok_Hash.put("tSendMail_3", true);
				end_Hash.put("tSendMail_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tSendMail_3",
						end_Hash.get("tSendMail_3")
								- start_Hash.get("tSendMail_3"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tSendMail_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSendMail_3 finally ] start
				 */

				currentComponent = "tSendMail_3";

				/**
				 * [tSendMail_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSendMail_3_SUBPROCESS_STATE", 1);
	}

	public void tSendMail_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSendMail_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSendMail_4 begin ] start
				 */

				ok_Hash.put("tSendMail_4", false);
				start_Hash.put("tSendMail_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tSendMail_4");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tSendMail_4";

				int tos_count_tSendMail_4 = 0;

				/**
				 * [tSendMail_4 begin ] stop
				 */

				/**
				 * [tSendMail_4 main ] start
				 */

				currentComponent = "tSendMail_4";

				String smtpHost_tSendMail_4 = context.email_smptHost_gestore;
				String smtpPort_tSendMail_4 = context.email_smptPort_gestore;
				String from_tSendMail_4 = (context.email_indirizzo_gestore);
				String to_tSendMail_4 = ((String) globalMap.get("to")).replace(
						";", ",");
				String cc_tSendMail_4 = (((String) globalMap.get("cc")) == null || ""
						.equals((String) globalMap.get("cc"))) ? null
						: ((String) globalMap.get("cc")).replace(";", ",");
				String bcc_tSendMail_4 = (("") == null || "".equals("")) ? null
						: ("").replace(";", ",");
				String subject_tSendMail_4 = (context.oggetto_mail
						+ " - Ambiente: " + context.email_ambiente);

				java.util.List<java.util.Map<String, String>> headers_tSendMail_4 = new java.util.ArrayList<java.util.Map<String, String>>();
				java.util.List<String> attachments_tSendMail_4 = new java.util.ArrayList<String>();
				java.util.List<String> contentTransferEncoding_tSendMail_4 = new java.util.ArrayList<String>();
				attachments_tSendMail_4.add(context.nome_file_mail);
				contentTransferEncoding_tSendMail_4.add("DEFAULT");

				String message_tSendMail_4 = (("Buongiorno,"
						+ "\r\n"
						+ "\r\n"
						+ "questa e' una mail generata in automatico dal sistema "
						+ context.email_sendername
						+ ", si raccomanda di non rispondere a questo messaggio."
						+ "\r\n"
						+ "Contattare l'assistenza per richiedere, se necessario, ulteriori chiarimenti."
						+ "\r\n" + "Di seguito il testo del messaggio: "
						+ context.testo_mail + "\r\n" + "\r\n" + TalendDate
						.getDate("EEE, MMM dd yyyy, hh:mm:ss")) == null || ""
						.equals("Buongiorno,"
								+ "\r\n"
								+ "\r\n"
								+ "questa e' una mail generata in automatico dal sistema "
								+ context.email_sendername
								+ ", si raccomanda di non rispondere a questo messaggio."
								+ "\r\n"
								+ "Contattare l'assistenza per richiedere, se necessario, ulteriori chiarimenti."
								+ "\r\n"
								+ "Di seguito il testo del messaggio: "
								+ context.testo_mail
								+ "\r\n"
								+ "\r\n"
								+ TalendDate
										.getDate("EEE, MMM dd yyyy, hh:mm:ss"))) ? "\"\""
						: ("Buongiorno,"
								+ "\r\n"
								+ "\r\n"
								+ "questa e' una mail generata in automatico dal sistema "
								+ context.email_sendername
								+ ", si raccomanda di non rispondere a questo messaggio."
								+ "\r\n"
								+ "Contattare l'assistenza per richiedere, se necessario, ulteriori chiarimenti."
								+ "\r\n"
								+ "Di seguito il testo del messaggio: "
								+ context.testo_mail + "\r\n" + "\r\n" + TalendDate
								.getDate("EEE, MMM dd yyyy, hh:mm:ss"));
				java.util.Properties props_tSendMail_4 = System.getProperties();
				props_tSendMail_4.put("mail.smtp.host", smtpHost_tSendMail_4);
				props_tSendMail_4.put("mail.smtp.port", smtpPort_tSendMail_4);
				props_tSendMail_4.put("mail.mime.encodefilename", "true");
				java.security.Security
						.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
				props_tSendMail_4.put("mail.smtp.socketFactory.class",
						"javax.net.ssl.SSLSocketFactory");
				props_tSendMail_4.put("mail.smtp.socketFactory.fallback",
						"false");
				props_tSendMail_4.put("mail.smtp.socketFactory.port",
						smtpPort_tSendMail_4);
				try {

					props_tSendMail_4.put("mail.smtp.auth", "true");
					javax.mail.Session session_tSendMail_4 = javax.mail.Session
							.getInstance(props_tSendMail_4,
									new javax.mail.Authenticator() {
										protected javax.mail.PasswordAuthentication getPasswordAuthentication() {

											final String decryptedPassword_tSendMail_4 = context.email_psw_gestore;

											return new javax.mail.PasswordAuthentication(
													context.email_usr_gestore,
													decryptedPassword_tSendMail_4);
										}
									});

					javax.mail.Message msg_tSendMail_4 = new javax.mail.internet.MimeMessage(
							session_tSendMail_4);
					msg_tSendMail_4
							.setFrom(new javax.mail.internet.InternetAddress(
									from_tSendMail_4, context.email_sendername));
					msg_tSendMail_4.setRecipients(
							javax.mail.Message.RecipientType.TO,
							javax.mail.internet.InternetAddress.parse(
									to_tSendMail_4, false));
					if (cc_tSendMail_4 != null)
						msg_tSendMail_4.setRecipients(
								javax.mail.Message.RecipientType.CC,
								javax.mail.internet.InternetAddress.parse(
										cc_tSendMail_4, false));
					if (bcc_tSendMail_4 != null)
						msg_tSendMail_4.setRecipients(
								javax.mail.Message.RecipientType.BCC,
								javax.mail.internet.InternetAddress.parse(
										bcc_tSendMail_4, false));
					msg_tSendMail_4.setSubject(subject_tSendMail_4);

					for (int i_tSendMail_4 = 0; i_tSendMail_4 < headers_tSendMail_4
							.size(); i_tSendMail_4++) {
						java.util.Map<String, String> header_tSendMail_4 = headers_tSendMail_4
								.get(i_tSendMail_4);
						msg_tSendMail_4.setHeader(
								header_tSendMail_4.get("KEY"),
								header_tSendMail_4.get("VALUE"));
					}
					msg_tSendMail_4.setSentDate(new Date());
					msg_tSendMail_4.setHeader("X-Priority", "3"); // High->1
																	// Normal->3
																	// Low->5
					javax.mail.Multipart mp_tSendMail_4 = new javax.mail.internet.MimeMultipart();
					javax.mail.internet.MimeBodyPart mbpText_tSendMail_4 = new javax.mail.internet.MimeBodyPart();
					mbpText_tSendMail_4.setText(message_tSendMail_4, "UTF-8",
							"plain");
					mp_tSendMail_4.addBodyPart(mbpText_tSendMail_4);

					javax.mail.internet.MimeBodyPart mbpFile_tSendMail_4 = null;

					for (int i_tSendMail_4 = 0; i_tSendMail_4 < attachments_tSendMail_4
							.size(); i_tSendMail_4++) {
						String filename_tSendMail_4 = attachments_tSendMail_4
								.get(i_tSendMail_4);
						javax.activation.FileDataSource fds_tSendMail_4 = null;
						java.io.File file_tSendMail_4 = new java.io.File(
								filename_tSendMail_4);

						if (file_tSendMail_4.isDirectory()) {
							java.io.File[] subFiles_tSendMail_4 = file_tSendMail_4
									.listFiles();
							for (java.io.File subFile_tSendMail_4 : subFiles_tSendMail_4) {
								if (subFile_tSendMail_4.isFile()) {
									fds_tSendMail_4 = new javax.activation.FileDataSource(
											subFile_tSendMail_4
													.getAbsolutePath());
									mbpFile_tSendMail_4 = new javax.mail.internet.MimeBodyPart();
									mbpFile_tSendMail_4
											.setDataHandler(new javax.activation.DataHandler(
													fds_tSendMail_4));
									mbpFile_tSendMail_4
											.setFileName(javax.mail.internet.MimeUtility
													.encodeText(fds_tSendMail_4
															.getName()));
									if (contentTransferEncoding_tSendMail_4
											.get(i_tSendMail_4)
											.equalsIgnoreCase("base64")) {
										mbpFile_tSendMail_4.setHeader(
												"Content-Transfer-Encoding",
												"base64");
									}
									mp_tSendMail_4
											.addBodyPart(mbpFile_tSendMail_4);
								}
							}
						} else {
							mbpFile_tSendMail_4 = new javax.mail.internet.MimeBodyPart();
							fds_tSendMail_4 = new javax.activation.FileDataSource(
									filename_tSendMail_4);
							mbpFile_tSendMail_4
									.setDataHandler(new javax.activation.DataHandler(
											fds_tSendMail_4));
							mbpFile_tSendMail_4
									.setFileName(javax.mail.internet.MimeUtility
											.encodeText(fds_tSendMail_4
													.getName()));
							if (contentTransferEncoding_tSendMail_4.get(
									i_tSendMail_4).equalsIgnoreCase("base64")) {
								mbpFile_tSendMail_4.setHeader(
										"Content-Transfer-Encoding", "base64");
							}
							mp_tSendMail_4.addBodyPart(mbpFile_tSendMail_4);
						}
					}
					// -- set the content --
					msg_tSendMail_4.setContent(mp_tSendMail_4);
					// add handlers for main MIME types
					javax.activation.MailcapCommandMap mc_tSendMail_4 = (javax.activation.MailcapCommandMap) javax.activation.CommandMap
							.getDefaultCommandMap();
					mc_tSendMail_4
							.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
					mc_tSendMail_4
							.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
					mc_tSendMail_4
							.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
					mc_tSendMail_4
							.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
					mc_tSendMail_4
							.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
					javax.activation.CommandMap
							.setDefaultCommandMap(mc_tSendMail_4);
					// -- Send the message --
					javax.mail.Transport.send(msg_tSendMail_4);
				} catch (java.lang.Exception e) {

					throw (e);

				} finally {
					props_tSendMail_4.remove("mail.smtp.host");
					props_tSendMail_4.remove("mail.smtp.port");

					props_tSendMail_4.remove("mail.mime.encodefilename");

					props_tSendMail_4.remove("mail.smtp.socketFactory.class");
					props_tSendMail_4
							.remove("mail.smtp.socketFactory.fallback");
					props_tSendMail_4.remove("mail.smtp.socketFactory.port");

					props_tSendMail_4.remove("mail.smtp.auth");
				}

				tos_count_tSendMail_4++;

				/**
				 * [tSendMail_4 main ] stop
				 */

				/**
				 * [tSendMail_4 end ] start
				 */

				currentComponent = "tSendMail_4";

				ok_Hash.put("tSendMail_4", true);
				end_Hash.put("tSendMail_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tSendMail_4",
						end_Hash.get("tSendMail_4")
								- start_Hash.get("tSendMail_4"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tSendMail_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSendMail_4 finally ] start
				 */

				currentComponent = "tSendMail_4";

				/**
				 * [tSendMail_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSendMail_4_SUBPROCESS_STATE", 1);
	}

	public static class LOG_STATStruct implements
			routines.system.IPersistableRow<LOG_STATStruct> {
		final static byte[] commonByteArrayLock_MANAGE_FLUSSI_EXPORT_InviaMail = new byte[0];
		static byte[] commonByteArray_MANAGE_FLUSSI_EXPORT_InviaMail = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MANAGE_FLUSSI_EXPORT_InviaMail.length) {
					if (length < 1024
							&& commonByteArray_MANAGE_FLUSSI_EXPORT_InviaMail.length == 0) {
						commonByteArray_MANAGE_FLUSSI_EXPORT_InviaMail = new byte[1024];
					} else {
						commonByteArray_MANAGE_FLUSSI_EXPORT_InviaMail = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MANAGE_FLUSSI_EXPORT_InviaMail,
						0, length);
				strReturn = new String(
						commonByteArray_MANAGE_FLUSSI_EXPORT_InviaMail, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MANAGE_FLUSSI_EXPORT_InviaMail) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

					this.priority = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

				// Integer

				writeInteger(this.priority, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append(",priority=" + String.valueOf(priority));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(LOG_STATStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row35Struct implements
			routines.system.IPersistableRow<row35Struct> {
		final static byte[] commonByteArrayLock_MANAGE_FLUSSI_EXPORT_InviaMail = new byte[0];
		static byte[] commonByteArray_MANAGE_FLUSSI_EXPORT_InviaMail = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MANAGE_FLUSSI_EXPORT_InviaMail.length) {
					if (length < 1024
							&& commonByteArray_MANAGE_FLUSSI_EXPORT_InviaMail.length == 0) {
						commonByteArray_MANAGE_FLUSSI_EXPORT_InviaMail = new byte[1024];
					} else {
						commonByteArray_MANAGE_FLUSSI_EXPORT_InviaMail = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MANAGE_FLUSSI_EXPORT_InviaMail,
						0, length);
				strReturn = new String(
						commonByteArray_MANAGE_FLUSSI_EXPORT_InviaMail, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MANAGE_FLUSSI_EXPORT_InviaMail) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row35Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row35Struct row35 = new row35Struct();
				LOG_STATStruct LOG_STAT = new LOG_STATStruct();

				/**
				 * [tLog4JCatch_1 begin ] start
				 */

				ok_Hash.put("tLog4JCatch_1", false);
				start_Hash.put("tLog4JCatch_1", System.currentTimeMillis());

				currentComponent = "tLog4JCatch_1";

				int tos_count_tLog4JCatch_1 = 0;

				org.apache.log4j.Logger logger_tLog4JCatch_1 = org.apache.log4j.Logger
						.getLogger(this.getClass());
				int nb_line_tLog4JCatch_1 = 0;

				/**
				 * [tLog4JCatch_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				LOG_STATStruct LOG_STAT_tmp = new LOG_STATStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1
						.getMessages()) {
					row35.pid = pid;
					row35.root_pid = rootPid;
					row35.father_pid = fatherPid;
					row35.project = projectName;
					row35.job = jobName;
					row35.context = contextStr;
					row35.origin = (scm.getOrigin() == null
							|| scm.getOrigin().length() < 1 ? null : scm
							.getOrigin());
					row35.message = scm.getMessage();
					row35.duration = scm.getDuration();
					row35.moment = scm.getMoment();
					row35.message_type = scm.getMessageType();
					row35.job_version = scm.getJobVersion();
					row35.job_repository_id = scm.getJobId();
					row35.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
						// ###############################
						// # Output tables

						LOG_STAT = null;

						// # Output table : 'LOG_STAT'
						LOG_STAT_tmp.moment = row35.moment;
						LOG_STAT_tmp.pid = row35.pid;
						LOG_STAT_tmp.father_pid = row35.father_pid;
						LOG_STAT_tmp.root_pid = row35.root_pid;
						LOG_STAT_tmp.system_pid = row35.system_pid;
						LOG_STAT_tmp.project = row35.project;
						LOG_STAT_tmp.job = row35.job;
						LOG_STAT_tmp.job_repository_id = row35.job_repository_id;
						LOG_STAT_tmp.job_version = row35.job_version;
						LOG_STAT_tmp.context = row35.context;
						LOG_STAT_tmp.origin = row35.origin;
						LOG_STAT_tmp.message_type = row35.message_type;
						LOG_STAT_tmp.message = row35.message;
						LOG_STAT_tmp.duration = row35.duration;
						LOG_STAT_tmp.priority = 3;
						LOG_STAT = LOG_STAT_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */
					// Start of branch "LOG_STAT"
					if (LOG_STAT != null) {

						/**
						 * [tLog4JCatch_1 main ] start
						 */

						currentComponent = "tLog4JCatch_1";

						switch (LOG_STAT.priority) {
						case 1:
							logger_tLog4JCatch_1.trace(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 2:
							logger_tLog4JCatch_1.debug(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 3:
							logger_tLog4JCatch_1.info(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 4:
							logger_tLog4JCatch_1.warn(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 5:
							logger_tLog4JCatch_1.error(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 6:
							logger_tLog4JCatch_1.fatal(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						default:
							logger_tLog4JCatch_1.warn(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						}

						nb_line_tLog4JCatch_1++;

						tos_count_tLog4JCatch_1++;

						/**
						 * [tLog4JCatch_1 main ] stop
						 */

					} // End of branch "LOG_STAT"

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tLog4JCatch_1 end ] start
				 */

				currentComponent = "tLog4JCatch_1";

				globalMap.put("tLog4JCatch_1_NB_LINE", nb_line_tLog4JCatch_1);

				ok_Hash.put("tLog4JCatch_1", true);
				end_Hash.put("tLog4JCatch_1", System.currentTimeMillis());

				/**
				 * [tLog4JCatch_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tLog4JCatch_1 finally ] start
				 */

				currentComponent = "tLog4JCatch_1";

				/**
				 * [tLog4JCatch_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class LOG_ERRORStruct implements
			routines.system.IPersistableRow<LOG_ERRORStruct> {
		final static byte[] commonByteArrayLock_MANAGE_FLUSSI_EXPORT_InviaMail = new byte[0];
		static byte[] commonByteArray_MANAGE_FLUSSI_EXPORT_InviaMail = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MANAGE_FLUSSI_EXPORT_InviaMail.length) {
					if (length < 1024
							&& commonByteArray_MANAGE_FLUSSI_EXPORT_InviaMail.length == 0) {
						commonByteArray_MANAGE_FLUSSI_EXPORT_InviaMail = new byte[1024];
					} else {
						commonByteArray_MANAGE_FLUSSI_EXPORT_InviaMail = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MANAGE_FLUSSI_EXPORT_InviaMail,
						0, length);
				strReturn = new String(
						commonByteArray_MANAGE_FLUSSI_EXPORT_InviaMail, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MANAGE_FLUSSI_EXPORT_InviaMail) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(LOG_ERRORStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				LOG_ERRORStruct LOG_ERROR = new LOG_ERRORStruct();

				/**
				 * [tLog4JCatch_2 begin ] start
				 */

				ok_Hash.put("tLog4JCatch_2", false);
				start_Hash.put("tLog4JCatch_2", System.currentTimeMillis());

				currentComponent = "tLog4JCatch_2";

				int tos_count_tLog4JCatch_2 = 0;

				org.apache.log4j.Logger logger_tLog4JCatch_2 = org.apache.log4j.Logger
						.getLogger(this.getClass());
				int nb_line_tLog4JCatch_2 = 0;

				/**
				 * [tLog4JCatch_2 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					LOG_ERROR.type = lcm.getType();
					LOG_ERROR.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					LOG_ERROR.priority = lcm.getPriority();
					LOG_ERROR.message = lcm.getMessage();
					LOG_ERROR.code = lcm.getCode();

					LOG_ERROR.moment = java.util.Calendar.getInstance()
							.getTime();

					LOG_ERROR.pid = pid;
					LOG_ERROR.root_pid = rootPid;
					LOG_ERROR.father_pid = fatherPid;

					LOG_ERROR.project = projectName;
					LOG_ERROR.job = jobName;
					LOG_ERROR.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */

					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tLog4JCatch_2 main ] start
					 */

					currentComponent = "tLog4JCatch_2";

					switch (LOG_ERROR.priority) {
					case 1:
						logger_tLog4JCatch_2.trace(LOG_ERROR.moment + "|"
								+ LOG_ERROR.pid + "|" + LOG_ERROR.root_pid
								+ "|" + LOG_ERROR.father_pid + "|"
								+ LOG_ERROR.project + "|" + LOG_ERROR.job + "|"
								+ LOG_ERROR.context + "|" + LOG_ERROR.priority
								+ "|" + LOG_ERROR.type + "|" + LOG_ERROR.origin
								+ "|" + LOG_ERROR.message + "|"
								+ LOG_ERROR.code);
						break;
					case 2:
						logger_tLog4JCatch_2.debug(LOG_ERROR.moment + "|"
								+ LOG_ERROR.pid + "|" + LOG_ERROR.root_pid
								+ "|" + LOG_ERROR.father_pid + "|"
								+ LOG_ERROR.project + "|" + LOG_ERROR.job + "|"
								+ LOG_ERROR.context + "|" + LOG_ERROR.priority
								+ "|" + LOG_ERROR.type + "|" + LOG_ERROR.origin
								+ "|" + LOG_ERROR.message + "|"
								+ LOG_ERROR.code);
						break;
					case 3:
						logger_tLog4JCatch_2.info(LOG_ERROR.moment + "|"
								+ LOG_ERROR.pid + "|" + LOG_ERROR.root_pid
								+ "|" + LOG_ERROR.father_pid + "|"
								+ LOG_ERROR.project + "|" + LOG_ERROR.job + "|"
								+ LOG_ERROR.context + "|" + LOG_ERROR.priority
								+ "|" + LOG_ERROR.type + "|" + LOG_ERROR.origin
								+ "|" + LOG_ERROR.message + "|"
								+ LOG_ERROR.code);
						break;
					case 4:
						logger_tLog4JCatch_2.warn(LOG_ERROR.moment + "|"
								+ LOG_ERROR.pid + "|" + LOG_ERROR.root_pid
								+ "|" + LOG_ERROR.father_pid + "|"
								+ LOG_ERROR.project + "|" + LOG_ERROR.job + "|"
								+ LOG_ERROR.context + "|" + LOG_ERROR.priority
								+ "|" + LOG_ERROR.type + "|" + LOG_ERROR.origin
								+ "|" + LOG_ERROR.message + "|"
								+ LOG_ERROR.code);
						break;
					case 5:
						logger_tLog4JCatch_2.error(LOG_ERROR.moment + "|"
								+ LOG_ERROR.pid + "|" + LOG_ERROR.root_pid
								+ "|" + LOG_ERROR.father_pid + "|"
								+ LOG_ERROR.project + "|" + LOG_ERROR.job + "|"
								+ LOG_ERROR.context + "|" + LOG_ERROR.priority
								+ "|" + LOG_ERROR.type + "|" + LOG_ERROR.origin
								+ "|" + LOG_ERROR.message + "|"
								+ LOG_ERROR.code);
						break;
					case 6:
						logger_tLog4JCatch_2.fatal(LOG_ERROR.moment + "|"
								+ LOG_ERROR.pid + "|" + LOG_ERROR.root_pid
								+ "|" + LOG_ERROR.father_pid + "|"
								+ LOG_ERROR.project + "|" + LOG_ERROR.job + "|"
								+ LOG_ERROR.context + "|" + LOG_ERROR.priority
								+ "|" + LOG_ERROR.type + "|" + LOG_ERROR.origin
								+ "|" + LOG_ERROR.message + "|"
								+ LOG_ERROR.code);
						break;
					default:
						logger_tLog4JCatch_2.warn(LOG_ERROR.moment + "|"
								+ LOG_ERROR.pid + "|" + LOG_ERROR.root_pid
								+ "|" + LOG_ERROR.father_pid + "|"
								+ LOG_ERROR.project + "|" + LOG_ERROR.job + "|"
								+ LOG_ERROR.context + "|" + LOG_ERROR.priority
								+ "|" + LOG_ERROR.type + "|" + LOG_ERROR.origin
								+ "|" + LOG_ERROR.message + "|"
								+ LOG_ERROR.code);
						break;
					}

					nb_line_tLog4JCatch_2++;

					tos_count_tLog4JCatch_2++;

					/**
					 * [tLog4JCatch_2 main ] stop
					 */

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tLog4JCatch_2 end ] start
				 */

				currentComponent = "tLog4JCatch_2";

				globalMap.put("tLog4JCatch_2_NB_LINE", nb_line_tLog4JCatch_2);

				ok_Hash.put("tLog4JCatch_2", true);
				end_Hash.put("tLog4JCatch_2", System.currentTimeMillis());

				/**
				 * [tLog4JCatch_2 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tLogCatcher_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tLog4J_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tLog4JCatch_2 finally ] start
				 */

				currentComponent = "tLog4JCatch_2";

				/**
				 * [tLog4JCatch_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public void tLog4J_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLog4J_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLog4J_1 begin ] start
				 */

				ok_Hash.put("tLog4J_1", false);
				start_Hash.put("tLog4J_1", System.currentTimeMillis());

				currentComponent = "tLog4J_1";

				int tos_count_tLog4J_1 = 0;

				org.apache.log4j.Logger logger_tLog4J_1 = org.apache.log4j.Logger
						.getLogger(this.getClass());

				int nb_line_tLog4J_1 = 0;
				int nb_logged_line_tLog4J_1 = 0;

				/**
				 * [tLog4J_1 begin ] stop
				 */

				/**
				 * [tLog4J_1 main ] start
				 */

				currentComponent = "tLog4J_1";

				logger_tLog4J_1.error(this.getExceptionStackTrace());
				nb_logged_line_tLog4J_1++;

				nb_line_tLog4J_1++;

				tos_count_tLog4J_1++;

				/**
				 * [tLog4J_1 main ] stop
				 */

				/**
				 * [tLog4J_1 end ] start
				 */

				currentComponent = "tLog4J_1";

				globalMap.put("tLog4J_1_NB_LINE", nb_line_tLog4J_1);
				globalMap.put("tLog4J_1_NB_LOGGED_LINE",
						nb_logged_line_tLog4J_1);

				ok_Hash.put("tLog4J_1", true);
				end_Hash.put("tLog4J_1", System.currentTimeMillis());

				/**
				 * [tLog4J_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLog4J_1 finally ] start
				 */

				currentComponent = "tLog4J_1";

				/**
				 * [tLog4J_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLog4J_1_SUBPROCESS_STATE", 1);
	}

	public void tLibraryLoad_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLibraryLoad_1 begin ] start
				 */

				ok_Hash.put("tLibraryLoad_1", false);
				start_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tLibraryLoad_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tLibraryLoad_1";

				int tos_count_tLibraryLoad_1 = 0;

				/**
				 * [tLibraryLoad_1 begin ] stop
				 */

				/**
				 * [tLibraryLoad_1 main ] start
				 */

				currentComponent = "tLibraryLoad_1";

				tos_count_tLibraryLoad_1++;

				/**
				 * [tLibraryLoad_1 main ] stop
				 */

				/**
				 * [tLibraryLoad_1 end ] start
				 */

				currentComponent = "tLibraryLoad_1";

				ok_Hash.put("tLibraryLoad_1", true);
				end_Hash.put("tLibraryLoad_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tLibraryLoad_1",
						end_Hash.get("tLibraryLoad_1")
								- start_Hash.get("tLibraryLoad_1"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tLibraryLoad_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLibraryLoad_1 finally ] start
				 */

				currentComponent = "tLibraryLoad_1";

				/**
				 * [tLibraryLoad_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final InviaMail InviaMailClass = new InviaMail();

		int exitCode = InviaMailClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = InviaMail.class.getClassLoader()
					.getResourceAsStream(
							"manage_flussi_export/inviamail_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.nome_file_mail = (String) context
					.getProperty("nome_file_mail");
			context.testo_mail = (String) context.getProperty("testo_mail");
			context.oggetto_mail = (String) context.getProperty("oggetto_mail");
			context.indirizzo_operatore_richiedente = (String) context
					.getProperty("indirizzo_operatore_richiedente");
			context.indirizzo_amministratore_ente = (String) context
					.getProperty("indirizzo_amministratore_ente");
			context.tipo_invio = (String) context.getProperty("tipo_invio");
			context.email_ambiente = (String) context
					.getProperty("email_ambiente");
			context.email_amministratore = (String) context
					.getProperty("email_amministratore");
			try {
				context.email_flag_attiva = routines.system.ParserUtils
						.parseTo_Boolean(context
								.getProperty("email_flag_attiva"));
			} catch (NumberFormatException e) {
				context.email_flag_attiva = null;
			}
			context.email_indirizzo_gestore = (String) context
					.getProperty("email_indirizzo_gestore");
			context.email_psw_gestore = (String) context
					.getProperty("email_psw_gestore");
			context.email_sendername = (String) context
					.getProperty("email_sendername");
			context.email_smptHost_gestore = (String) context
					.getProperty("email_smptHost_gestore");
			context.email_smptPort_gestore = (String) context
					.getProperty("email_smptPort_gestore");
			try {
				context.email_ssl_support = routines.system.ParserUtils
						.parseTo_Boolean(context
								.getProperty("email_ssl_support"));
			} catch (NumberFormatException e) {
				context.email_ssl_support = null;
			}
			context.email_usr_gestore = (String) context
					.getProperty("email_usr_gestore");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("nome_file_mail")) {
				context.nome_file_mail = (String) parentContextMap
						.get("nome_file_mail");
			}
			if (parentContextMap.containsKey("testo_mail")) {
				context.testo_mail = (String) parentContextMap
						.get("testo_mail");
			}
			if (parentContextMap.containsKey("oggetto_mail")) {
				context.oggetto_mail = (String) parentContextMap
						.get("oggetto_mail");
			}
			if (parentContextMap.containsKey("indirizzo_operatore_richiedente")) {
				context.indirizzo_operatore_richiedente = (String) parentContextMap
						.get("indirizzo_operatore_richiedente");
			}
			if (parentContextMap.containsKey("indirizzo_amministratore_ente")) {
				context.indirizzo_amministratore_ente = (String) parentContextMap
						.get("indirizzo_amministratore_ente");
			}
			if (parentContextMap.containsKey("tipo_invio")) {
				context.tipo_invio = (String) parentContextMap
						.get("tipo_invio");
			}
			if (parentContextMap.containsKey("email_ambiente")) {
				context.email_ambiente = (String) parentContextMap
						.get("email_ambiente");
			}
			if (parentContextMap.containsKey("email_amministratore")) {
				context.email_amministratore = (String) parentContextMap
						.get("email_amministratore");
			}
			if (parentContextMap.containsKey("email_flag_attiva")) {
				context.email_flag_attiva = (Boolean) parentContextMap
						.get("email_flag_attiva");
			}
			if (parentContextMap.containsKey("email_indirizzo_gestore")) {
				context.email_indirizzo_gestore = (String) parentContextMap
						.get("email_indirizzo_gestore");
			}
			if (parentContextMap.containsKey("email_psw_gestore")) {
				context.email_psw_gestore = (String) parentContextMap
						.get("email_psw_gestore");
			}
			if (parentContextMap.containsKey("email_sendername")) {
				context.email_sendername = (String) parentContextMap
						.get("email_sendername");
			}
			if (parentContextMap.containsKey("email_smptHost_gestore")) {
				context.email_smptHost_gestore = (String) parentContextMap
						.get("email_smptHost_gestore");
			}
			if (parentContextMap.containsKey("email_smptPort_gestore")) {
				context.email_smptPort_gestore = (String) parentContextMap
						.get("email_smptPort_gestore");
			}
			if (parentContextMap.containsKey("email_ssl_support")) {
				context.email_ssl_support = (Boolean) parentContextMap
						.get("email_ssl_support");
			}
			if (parentContextMap.containsKey("email_usr_gestore")) {
				context.email_usr_gestore = (String) parentContextMap
						.get("email_usr_gestore");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_1) {
			globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

			e_tJava_1.printStackTrace();

		}
		try {
			errorCode = null;
			tLibraryLoad_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tLibraryLoad_1) {
			globalMap.put("tLibraryLoad_1_SUBPROCESS_STATE", -1);

			e_tLibraryLoad_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : InviaMail");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status,
				(end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 125135 characters generated by Talend Open Studio for Data Integration on the
 * 10 marzo 2020 14.54.16 CET
 ************************************************************************************************/
