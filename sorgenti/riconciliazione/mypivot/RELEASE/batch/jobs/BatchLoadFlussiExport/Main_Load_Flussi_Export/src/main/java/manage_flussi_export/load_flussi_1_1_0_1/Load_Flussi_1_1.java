// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package manage_flussi_export.load_flussi_1_1_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.JobStringManage;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_6
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: Load_Flussi_1_1 Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 6.0.1.20150908_1633
 * @status 
 */
public class Load_Flussi_1_1 implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (de_nome_file != null) {

				this.setProperty("de_nome_file", de_nome_file.toString());

			}

			if (de_percorso_file != null) {

				this.setProperty("de_percorso_file",
						de_percorso_file.toString());

			}

			if (mygov_manage_flusso_id != null) {

				this.setProperty("mygov_manage_flusso_id",
						mygov_manage_flusso_id.toString());

			}

			if (cod_ipa_ente != null) {

				this.setProperty("cod_ipa_ente", cod_ipa_ente.toString());

			}

			if (mygov_ente_prenotazione_id != null) {

				this.setProperty("mygov_ente_prenotazione_id",
						mygov_ente_prenotazione_id.toString());

			}

			if (is_ws != null) {

				this.setProperty("is_ws", is_ws.toString());

			}

			if (indirizzo_operatore_richiedente != null) {

				this.setProperty("indirizzo_operatore_richiedente",
						indirizzo_operatore_richiedente.toString());

			}

			if (indirizzo_amministratore_ente != null) {

				this.setProperty("indirizzo_amministratore_ente",
						indirizzo_amministratore_ente.toString());

			}

			if (is_user_java != null) {

				this.setProperty("is_user_java", is_user_java.toString());

			}

			if (conn_db != null) {

				this.setProperty("conn_db", conn_db.toString());

			}

			if (conn_host != null) {

				this.setProperty("conn_host", conn_host.toString());

			}

			if (conn_port != null) {

				this.setProperty("conn_port", conn_port.toString());

			}

			if (conn_psw != null) {

				this.setProperty("conn_psw", conn_psw.toString());

			}

			if (conn_schema != null) {

				this.setProperty("conn_schema", conn_schema.toString());

			}

			if (conn_usr != null) {

				this.setProperty("conn_usr", conn_usr.toString());

			}

			if (email_ambiente != null) {

				this.setProperty("email_ambiente", email_ambiente.toString());

			}

			if (email_amministratore != null) {

				this.setProperty("email_amministratore",
						email_amministratore.toString());

			}

			if (email_flag_attiva != null) {

				this.setProperty("email_flag_attiva",
						email_flag_attiva.toString());

			}

			if (email_indirizzo_gestore != null) {

				this.setProperty("email_indirizzo_gestore",
						email_indirizzo_gestore.toString());

			}

			if (email_psw_gestore != null) {

				this.setProperty("email_psw_gestore",
						email_psw_gestore.toString());

			}

			if (email_sendername != null) {

				this.setProperty("email_sendername",
						email_sendername.toString());

			}

			if (email_smptHost_gestore != null) {

				this.setProperty("email_smptHost_gestore",
						email_smptHost_gestore.toString());

			}

			if (email_smptPort_gestore != null) {

				this.setProperty("email_smptPort_gestore",
						email_smptPort_gestore.toString());

			}

			if (email_ssl_support != null) {

				this.setProperty("email_ssl_support",
						email_ssl_support.toString());

			}

			if (email_usr_gestore != null) {

				this.setProperty("email_usr_gestore",
						email_usr_gestore.toString());

			}

			if (directory_root_enti != null) {

				this.setProperty("directory_root_enti",
						directory_root_enti.toString());

			}

			if (directory_talend != null) {

				this.setProperty("directory_talend",
						directory_talend.toString());

			}

			if (numero_minuti_avviso != null) {

				this.setProperty("numero_minuti_avviso",
						numero_minuti_avviso.toString());

			}

			if (numero_minuti_trigger_batch != null) {

				this.setProperty("numero_minuti_trigger_batch",
						numero_minuti_trigger_batch.toString());

			}

			if (numero_ore_trigger_batch != null) {

				this.setProperty("numero_ore_trigger_batch",
						numero_ore_trigger_batch.toString());

			}

			if (url_mybox_sostituire_a != null) {

				this.setProperty("url_mybox_sostituire_a",
						url_mybox_sostituire_a.toString());

			}

			if (url_mybox_sostituire_da != null) {

				this.setProperty("url_mybox_sostituire_da",
						url_mybox_sostituire_da.toString());

			}

			if (nagios_codice_applicazione != null) {

				this.setProperty("nagios_codice_applicazione",
						nagios_codice_applicazione.toString());

			}

			if (nagios_codice_servizio != null) {

				this.setProperty("nagios_codice_servizio",
						nagios_codice_servizio.toString());

			}

			if (nagios_flag_attiva != null) {

				this.setProperty("nagios_flag_attiva",
						nagios_flag_attiva.toString());

			}

			if (nagios_password != null) {

				this.setProperty("nagios_password", nagios_password.toString());

			}

			if (nagios_url != null) {

				this.setProperty("nagios_url", nagios_url.toString());

			}

			if (nagios_username != null) {

				this.setProperty("nagios_username", nagios_username.toString());

			}

			if (endpoint != null) {

				this.setProperty("endpoint", endpoint.toString());

			}

		}

		public String de_nome_file;

		public String getDe_nome_file() {
			return this.de_nome_file;
		}

		public String de_percorso_file;

		public String getDe_percorso_file() {
			return this.de_percorso_file;
		}

		public Long mygov_manage_flusso_id;

		public Long getMygov_manage_flusso_id() {
			return this.mygov_manage_flusso_id;
		}

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		public Long mygov_ente_prenotazione_id;

		public Long getMygov_ente_prenotazione_id() {
			return this.mygov_ente_prenotazione_id;
		}

		public Boolean is_ws;

		public Boolean getIs_ws() {
			return this.is_ws;
		}

		public String indirizzo_operatore_richiedente;

		public String getIndirizzo_operatore_richiedente() {
			return this.indirizzo_operatore_richiedente;
		}

		public String indirizzo_amministratore_ente;

		public String getIndirizzo_amministratore_ente() {
			return this.indirizzo_amministratore_ente;
		}

		public Boolean is_user_java;

		public Boolean getIs_user_java() {
			return this.is_user_java;
		}

		public String conn_db;

		public String getConn_db() {
			return this.conn_db;
		}

		public String conn_host;

		public String getConn_host() {
			return this.conn_host;
		}

		public String conn_port;

		public String getConn_port() {
			return this.conn_port;
		}

		public String conn_psw;

		public String getConn_psw() {
			return this.conn_psw;
		}

		public String conn_schema;

		public String getConn_schema() {
			return this.conn_schema;
		}

		public String conn_usr;

		public String getConn_usr() {
			return this.conn_usr;
		}

		public String email_ambiente;

		public String getEmail_ambiente() {
			return this.email_ambiente;
		}

		public String email_amministratore;

		public String getEmail_amministratore() {
			return this.email_amministratore;
		}

		public Boolean email_flag_attiva;

		public Boolean getEmail_flag_attiva() {
			return this.email_flag_attiva;
		}

		public String email_indirizzo_gestore;

		public String getEmail_indirizzo_gestore() {
			return this.email_indirizzo_gestore;
		}

		public String email_psw_gestore;

		public String getEmail_psw_gestore() {
			return this.email_psw_gestore;
		}

		public String email_sendername;

		public String getEmail_sendername() {
			return this.email_sendername;
		}

		public String email_smptHost_gestore;

		public String getEmail_smptHost_gestore() {
			return this.email_smptHost_gestore;
		}

		public String email_smptPort_gestore;

		public String getEmail_smptPort_gestore() {
			return this.email_smptPort_gestore;
		}

		public Boolean email_ssl_support;

		public Boolean getEmail_ssl_support() {
			return this.email_ssl_support;
		}

		public String email_usr_gestore;

		public String getEmail_usr_gestore() {
			return this.email_usr_gestore;
		}

		public String directory_root_enti;

		public String getDirectory_root_enti() {
			return this.directory_root_enti;
		}

		public String directory_talend;

		public String getDirectory_talend() {
			return this.directory_talend;
		}

		public Integer numero_minuti_avviso;

		public Integer getNumero_minuti_avviso() {
			return this.numero_minuti_avviso;
		}

		public Integer numero_minuti_trigger_batch;

		public Integer getNumero_minuti_trigger_batch() {
			return this.numero_minuti_trigger_batch;
		}

		public Integer numero_ore_trigger_batch;

		public Integer getNumero_ore_trigger_batch() {
			return this.numero_ore_trigger_batch;
		}

		public String url_mybox_sostituire_a;

		public String getUrl_mybox_sostituire_a() {
			return this.url_mybox_sostituire_a;
		}

		public String url_mybox_sostituire_da;

		public String getUrl_mybox_sostituire_da() {
			return this.url_mybox_sostituire_da;
		}

		public String nagios_codice_applicazione;

		public String getNagios_codice_applicazione() {
			return this.nagios_codice_applicazione;
		}

		public String nagios_codice_servizio;

		public String getNagios_codice_servizio() {
			return this.nagios_codice_servizio;
		}

		public Boolean nagios_flag_attiva;

		public Boolean getNagios_flag_attiva() {
			return this.nagios_flag_attiva;
		}

		public String nagios_password;

		public String getNagios_password() {
			return this.nagios_password;
		}

		public String nagios_url;

		public String getNagios_url() {
			return this.nagios_url;
		}

		public String nagios_username;

		public String getNagios_username() {
			return this.nagios_username;
		}

		public String endpoint;

		public String getEndpoint() {
			return this.endpoint;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Load_Flussi_1_1";
	private final String projectName = "MANAGE_FLUSSI_EXPORT";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();
	StatCatcherUtils tStatCatcher_1 = new StatCatcherUtils(
			"_YrXCULyFEeaPYcnkpLJ7zg", "0.1");

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Load_Flussi_1_1.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Load_Flussi_1_1.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tStatCatcher_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLog4JCatch_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tStatCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlConnection_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tLog4J_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tLog4J_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLog4J_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tLog4J_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlCommit_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlRollback_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlRollback_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tJava_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tJava_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLog4J_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tLog4J_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlCommit_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tPostgresqlCommit_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tRunJob_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tStatCatcher_1.addMessage("failure", errorComponent,
				end_Hash.get(errorComponent) - start_Hash.get(errorComponent));
		tStatCatcher_1Process(globalMap);

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row8_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tStatCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLog4J_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLog4J_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlCommit_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlRollback_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLog4J_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlCommit_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class LOG_STATStruct implements
			routines.system.IPersistableRow<LOG_STATStruct> {
		final static byte[] commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];
		static byte[] commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length) {
					if (length < 1024
							&& commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length == 0) {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[1024];
					} else {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length);
				strReturn = new String(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

					this.priority = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

				// Integer

				writeInteger(this.priority, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append(",priority=" + String.valueOf(priority));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(LOG_STATStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements
			routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];
		static byte[] commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public Long system_pid;

		public Long getSystem_pid() {
			return this.system_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String job_repository_id;

		public String getJob_repository_id() {
			return this.job_repository_id;
		}

		public String job_version;

		public String getJob_version() {
			return this.job_version;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message_type;

		public String getMessage_type() {
			return this.message_type;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Long duration;

		public Long getDuration() {
			return this.duration;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length) {
					if (length < 1024
							&& commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length == 0) {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[1024];
					} else {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length);
				strReturn = new String(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.father_pid = readString(dis);

					this.root_pid = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.system_pid = null;
					} else {
						this.system_pid = dis.readLong();
					}

					this.project = readString(dis);

					this.job = readString(dis);

					this.job_repository_id = readString(dis);

					this.job_version = readString(dis);

					this.context = readString(dis);

					this.origin = readString(dis);

					this.message_type = readString(dis);

					this.message = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.duration = null;
					} else {
						this.duration = dis.readLong();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.root_pid, dos);

				// Long

				if (this.system_pid == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.system_pid);
				}

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.job_repository_id, dos);

				// String

				writeString(this.job_version, dos);

				// String

				writeString(this.context, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message_type, dos);

				// String

				writeString(this.message, dos);

				// Long

				if (this.duration == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.duration);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",system_pid=" + String.valueOf(system_pid));
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",job_repository_id=" + job_repository_id);
			sb.append(",job_version=" + job_version);
			sb.append(",context=" + context);
			sb.append(",origin=" + origin);
			sb.append(",message_type=" + message_type);
			sb.append(",message=" + message);
			sb.append(",duration=" + String.valueOf(duration));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tStatCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();
				LOG_STATStruct LOG_STAT = new LOG_STATStruct();

				/**
				 * [tLog4JCatch_1 begin ] start
				 */

				ok_Hash.put("tLog4JCatch_1", false);
				start_Hash.put("tLog4JCatch_1", System.currentTimeMillis());

				currentComponent = "tLog4JCatch_1";

				int tos_count_tLog4JCatch_1 = 0;

				org.apache.log4j.Logger logger_tLog4JCatch_1 = org.apache.log4j.Logger
						.getLogger(this.getClass());
				int nb_line_tLog4JCatch_1 = 0;

				/**
				 * [tLog4JCatch_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				LOG_STATStruct LOG_STAT_tmp = new LOG_STATStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tStatCatcher_1 begin ] start
				 */

				ok_Hash.put("tStatCatcher_1", false);
				start_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				currentComponent = "tStatCatcher_1";

				int tos_count_tStatCatcher_1 = 0;

				for (StatCatcherUtils.StatCatcherMessage scm : tStatCatcher_1
						.getMessages()) {
					row4.pid = pid;
					row4.root_pid = rootPid;
					row4.father_pid = fatherPid;
					row4.project = projectName;
					row4.job = jobName;
					row4.context = contextStr;
					row4.origin = (scm.getOrigin() == null
							|| scm.getOrigin().length() < 1 ? null : scm
							.getOrigin());
					row4.message = scm.getMessage();
					row4.duration = scm.getDuration();
					row4.moment = scm.getMoment();
					row4.message_type = scm.getMessageType();
					row4.job_version = scm.getJobVersion();
					row4.job_repository_id = scm.getJobId();
					row4.system_pid = scm.getSystemPid();

					/**
					 * [tStatCatcher_1 begin ] stop
					 */

					/**
					 * [tStatCatcher_1 main ] start
					 */

					currentComponent = "tStatCatcher_1";

					tos_count_tStatCatcher_1++;

					/**
					 * [tStatCatcher_1 main ] stop
					 */

					/**
					 * [tMap_2 main ] start
					 */

					currentComponent = "tMap_2";

					boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_2 = false;
					boolean mainRowRejected_tMap_2 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
						// ###############################
						// # Output tables

						LOG_STAT = null;

						// # Output table : 'LOG_STAT'
						LOG_STAT_tmp.moment = row4.moment;
						LOG_STAT_tmp.pid = row4.pid;
						LOG_STAT_tmp.father_pid = row4.father_pid;
						LOG_STAT_tmp.root_pid = row4.root_pid;
						LOG_STAT_tmp.system_pid = row4.system_pid;
						LOG_STAT_tmp.project = row4.project;
						LOG_STAT_tmp.job = row4.job;
						LOG_STAT_tmp.job_repository_id = row4.job_repository_id;
						LOG_STAT_tmp.job_version = row4.job_version;
						LOG_STAT_tmp.context = row4.context;
						LOG_STAT_tmp.origin = row4.origin;
						LOG_STAT_tmp.message_type = row4.message_type;
						LOG_STAT_tmp.message = row4.message;
						LOG_STAT_tmp.duration = row4.duration;
						LOG_STAT_tmp.priority = 3;
						LOG_STAT = LOG_STAT_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_2 = false;

					tos_count_tMap_2++;

					/**
					 * [tMap_2 main ] stop
					 */
					// Start of branch "LOG_STAT"
					if (LOG_STAT != null) {

						/**
						 * [tLog4JCatch_1 main ] start
						 */

						currentComponent = "tLog4JCatch_1";

						switch (LOG_STAT.priority) {
						case 1:
							logger_tLog4JCatch_1.trace(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 2:
							logger_tLog4JCatch_1.debug(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 3:
							logger_tLog4JCatch_1.info(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 4:
							logger_tLog4JCatch_1.warn(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 5:
							logger_tLog4JCatch_1.error(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						case 6:
							logger_tLog4JCatch_1.fatal(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						default:
							logger_tLog4JCatch_1.warn(LOG_STAT.moment + "|"
									+ LOG_STAT.pid + "|" + LOG_STAT.father_pid
									+ "|" + LOG_STAT.root_pid + "|"
									+ LOG_STAT.system_pid + "|"
									+ LOG_STAT.project + "|" + LOG_STAT.job
									+ "|" + LOG_STAT.job_repository_id + "|"
									+ LOG_STAT.job_version + "|"
									+ LOG_STAT.context + "|" + LOG_STAT.origin
									+ "|" + LOG_STAT.message_type + "|"
									+ LOG_STAT.message + "|"
									+ LOG_STAT.duration);
							break;
						}

						nb_line_tLog4JCatch_1++;

						tos_count_tLog4JCatch_1++;

						/**
						 * [tLog4JCatch_1 main ] stop
						 */

					} // End of branch "LOG_STAT"

					/**
					 * [tStatCatcher_1 end ] start
					 */

					currentComponent = "tStatCatcher_1";

				}

				ok_Hash.put("tStatCatcher_1", true);
				end_Hash.put("tStatCatcher_1", System.currentTimeMillis());

				/**
				 * [tStatCatcher_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tLog4JCatch_1 end ] start
				 */

				currentComponent = "tLog4JCatch_1";

				globalMap.put("tLog4JCatch_1_NB_LINE", nb_line_tLog4JCatch_1);

				ok_Hash.put("tLog4JCatch_1", true);
				end_Hash.put("tLog4JCatch_1", System.currentTimeMillis());

				/**
				 * [tLog4JCatch_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tStatCatcher_1 finally ] start
				 */

				currentComponent = "tStatCatcher_1";

				/**
				 * [tStatCatcher_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tLog4JCatch_1 finally ] start
				 */

				currentComponent = "tLog4JCatch_1";

				/**
				 * [tLog4JCatch_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tStatCatcher_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_1 begin ] start
				 */

				ok_Hash.put("tJava_1", false);
				start_Hash.put("tJava_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_1";

				int tos_count_tJava_1 = 0;

				globalMap.put("errorLoadFlussi", false);
				globalMap.put("codFiscaleMatch", true);

				/**
				 * [tJava_1 begin ] stop
				 */

				/**
				 * [tJava_1 main ] start
				 */

				currentComponent = "tJava_1";

				tos_count_tJava_1++;

				/**
				 * [tJava_1 main ] stop
				 */

				/**
				 * [tJava_1 end ] start
				 */

				currentComponent = "tJava_1";

				ok_Hash.put("tJava_1", true);
				end_Hash.put("tJava_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_1",
						end_Hash.get("tJava_1") - start_Hash.get("tJava_1"));
				tStatCatcher_1Process(globalMap);
				if (true) {

					tPostgresqlConnection_1Process(globalMap);
				}

				/**
				 * [tJava_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_1", false);
				start_Hash.put("tPostgresqlConnection_1",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlConnection_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlConnection_1";

				int tos_count_tPostgresqlConnection_1 = 0;

				String url_tPostgresqlConnection_1 = "jdbc:postgresql://"
						+ context.conn_host + ":" + context.conn_port + "/"
						+ context.conn_db + "?currentSchema="
						+ context.conn_schema;

				String dbUser_tPostgresqlConnection_1 = context.conn_usr;

				final String decryptedPassword_tPostgresqlConnection_1 = context.conn_psw;
				String dbPwd_tPostgresqlConnection_1 = decryptedPassword_tPostgresqlConnection_1;

				java.sql.Connection conn_tPostgresqlConnection_1 = null;

				String driverClass_tPostgresqlConnection_1 = "org.postgresql.Driver";
				java.lang.Class.forName(driverClass_tPostgresqlConnection_1);

				conn_tPostgresqlConnection_1 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_1,
								dbUser_tPostgresqlConnection_1,
								dbPwd_tPostgresqlConnection_1);

				globalMap.put("conn_tPostgresqlConnection_1",
						conn_tPostgresqlConnection_1);
				if (null != conn_tPostgresqlConnection_1) {

					conn_tPostgresqlConnection_1.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_1",
						context.conn_schema);

				globalMap.put("conn_" + "tPostgresqlConnection_1",
						conn_tPostgresqlConnection_1);

				/**
				 * [tPostgresqlConnection_1 begin ] stop
				 */

				/**
				 * [tPostgresqlConnection_1 main ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				tos_count_tPostgresqlConnection_1++;

				/**
				 * [tPostgresqlConnection_1 main ] stop
				 */

				/**
				 * [tPostgresqlConnection_1 end ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				ok_Hash.put("tPostgresqlConnection_1", true);
				end_Hash.put("tPostgresqlConnection_1",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlConnection_1",
						end_Hash.get("tPostgresqlConnection_1")
								- start_Hash.get("tPostgresqlConnection_1"));
				tStatCatcher_1Process(globalMap);
				tLog4J_3Process(globalMap);

				/**
				 * [tPostgresqlConnection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlConnection_1 finally ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				/**
				 * [tPostgresqlConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tLog4J_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLog4J_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLog4J_3 begin ] start
				 */

				ok_Hash.put("tLog4J_3", false);
				start_Hash.put("tLog4J_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tLog4J_3");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tLog4J_3";

				int tos_count_tLog4J_3 = 0;

				org.apache.log4j.Logger logger_tLog4J_3 = org.apache.log4j.Logger
						.getLogger(this.getClass());

				int nb_line_tLog4J_3 = 0;
				int nb_logged_line_tLog4J_3 = 0;

				/**
				 * [tLog4J_3 begin ] stop
				 */

				/**
				 * [tLog4J_3 main ] start
				 */

				currentComponent = "tLog4J_3";

				logger_tLog4J_3.info("Connessione al db " + context.conn_db
						+ " inizializzata correttamente");
				nb_logged_line_tLog4J_3++;

				nb_line_tLog4J_3++;

				tos_count_tLog4J_3++;

				/**
				 * [tLog4J_3 main ] stop
				 */

				/**
				 * [tLog4J_3 end ] start
				 */

				currentComponent = "tLog4J_3";

				globalMap.put("tLog4J_3_NB_LINE", nb_line_tLog4J_3);
				globalMap.put("tLog4J_3_NB_LOGGED_LINE",
						nb_logged_line_tLog4J_3);

				ok_Hash.put("tLog4J_3", true);
				end_Hash.put("tLog4J_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tLog4J_3",
						end_Hash.get("tLog4J_3") - start_Hash.get("tLog4J_3"));
				tStatCatcher_1Process(globalMap);
				tLog4J_4Process(globalMap);

				/**
				 * [tLog4J_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLog4J_3 finally ] start
				 */

				currentComponent = "tLog4J_3";

				/**
				 * [tLog4J_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLog4J_3_SUBPROCESS_STATE", 1);
	}

	public void tLog4J_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLog4J_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLog4J_4 begin ] start
				 */

				ok_Hash.put("tLog4J_4", false);
				start_Hash.put("tLog4J_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tLog4J_4");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tLog4J_4";

				int tos_count_tLog4J_4 = 0;

				org.apache.log4j.Logger logger_tLog4J_4 = org.apache.log4j.Logger
						.getLogger(this.getClass());

				int nb_line_tLog4J_4 = 0;
				int nb_logged_line_tLog4J_4 = 0;

				/**
				 * [tLog4J_4 begin ] stop
				 */

				/**
				 * [tLog4J_4 main ] start
				 */

				currentComponent = "tLog4J_4";

				logger_tLog4J_4
						.info("Inizio caricamento file " + context.de_nome_file
								+ " inizializzata correttamente");
				nb_logged_line_tLog4J_4++;

				nb_line_tLog4J_4++;

				tos_count_tLog4J_4++;

				/**
				 * [tLog4J_4 main ] stop
				 */

				/**
				 * [tLog4J_4 end ] start
				 */

				currentComponent = "tLog4J_4";

				globalMap.put("tLog4J_4_NB_LINE", nb_line_tLog4J_4);
				globalMap.put("tLog4J_4_NB_LOGGED_LINE",
						nb_logged_line_tLog4J_4);

				ok_Hash.put("tLog4J_4", true);
				end_Hash.put("tLog4J_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tLog4J_4",
						end_Hash.get("tLog4J_4") - start_Hash.get("tLog4J_4"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tLog4J_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLog4J_4 finally ] start
				 */

				currentComponent = "tLog4J_4";

				/**
				 * [tLog4J_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLog4J_4_SUBPROCESS_STATE", 1);
	}

	public void tJava_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_2 begin ] start
				 */

				ok_Hash.put("tJava_2", false);
				start_Hash.put("tJava_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_2");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_2";

				int tos_count_tJava_2 = 0;

				if ("failure".equalsIgnoreCase(status)) {
					globalMap.put("errorLoadFlussi", true);
				}

				globalMap.put("dataAcquisizione", new Date());

				/**
				 * [tJava_2 begin ] stop
				 */

				/**
				 * [tJava_2 main ] start
				 */

				currentComponent = "tJava_2";

				tos_count_tJava_2++;

				/**
				 * [tJava_2 main ] stop
				 */

				/**
				 * [tJava_2 end ] start
				 */

				currentComponent = "tJava_2";

				ok_Hash.put("tJava_2", true);
				end_Hash.put("tJava_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_2",
						end_Hash.get("tJava_2") - start_Hash.get("tJava_2"));
				tStatCatcher_1Process(globalMap);
				if (!((Boolean) globalMap.get("errorLoadFlussi"))) {

					tFileInputDelimited_1Process(globalMap);
				}

				/**
				 * [tJava_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}

	public static class MAPPING_EXPORTStruct implements
			routines.system.IPersistableRow<MAPPING_EXPORTStruct> {
		final static byte[] commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];
		static byte[] commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int version;

		public int getVersion() {
			return this.version;
		}

		public java.util.Date dt_creazione;

		public java.util.Date getDt_creazione() {
			return this.dt_creazione;
		}

		public java.util.Date dt_ultima_modifica;

		public java.util.Date getDt_ultima_modifica() {
			return this.dt_ultima_modifica;
		}

		public long mygov_ente_id;

		public long getMygov_ente_id() {
			return this.mygov_ente_id;
		}

		public long mygov_manage_flusso_id;

		public long getMygov_manage_flusso_id() {
			return this.mygov_manage_flusso_id;
		}

		public String de_nome_flusso;

		public String getDe_nome_flusso() {
			return this.de_nome_flusso;
		}

		public int num_riga_flusso;

		public int getNum_riga_flusso() {
			return this.num_riga_flusso;
		}

		public String cod_iud;

		public String getCod_iud() {
			return this.cod_iud;
		}

		public String cod_rp_silinviarp_id_univoco_versamento;

		public String getCod_rp_silinviarp_id_univoco_versamento() {
			return this.cod_rp_silinviarp_id_univoco_versamento;
		}

		public String de_e_versione_oggetto;

		public String getDe_e_versione_oggetto() {
			return this.de_e_versione_oggetto;
		}

		public String cod_e_dom_id_dominio;

		public String getCod_e_dom_id_dominio() {
			return this.cod_e_dom_id_dominio;
		}

		public String cod_e_dom_id_stazione_richiedente;

		public String getCod_e_dom_id_stazione_richiedente() {
			return this.cod_e_dom_id_stazione_richiedente;
		}

		public String cod_e_id_messaggio_ricevuta;

		public String getCod_e_id_messaggio_ricevuta() {
			return this.cod_e_id_messaggio_ricevuta;
		}

		public java.util.Date dt_e_data_ora_messaggio_ricevuta;

		public java.util.Date getDt_e_data_ora_messaggio_ricevuta() {
			return this.dt_e_data_ora_messaggio_ricevuta;
		}

		public String cod_e_riferimento_messaggio_richiesta;

		public String getCod_e_riferimento_messaggio_richiesta() {
			return this.cod_e_riferimento_messaggio_richiesta;
		}

		public java.util.Date dt_e_riferimento_data_richiesta;

		public java.util.Date getDt_e_riferimento_data_richiesta() {
			return this.dt_e_riferimento_data_richiesta;
		}

		public String cod_e_istit_att_id_univ_att_tipo_id_univoco;

		public String getCod_e_istit_att_id_univ_att_tipo_id_univoco() {
			return this.cod_e_istit_att_id_univ_att_tipo_id_univoco;
		}

		public String cod_e_istit_att_id_univ_att_codice_id_univoco;

		public String getCod_e_istit_att_id_univ_att_codice_id_univoco() {
			return this.cod_e_istit_att_id_univ_att_codice_id_univoco;
		}

		public String de_e_istit_att_denominazione_attestante;

		public String getDe_e_istit_att_denominazione_attestante() {
			return this.de_e_istit_att_denominazione_attestante;
		}

		public String cod_e_istit_att_codice_unit_oper_attestante;

		public String getCod_e_istit_att_codice_unit_oper_attestante() {
			return this.cod_e_istit_att_codice_unit_oper_attestante;
		}

		public String de_e_istit_att_denom_unit_oper_attestante;

		public String getDe_e_istit_att_denom_unit_oper_attestante() {
			return this.de_e_istit_att_denom_unit_oper_attestante;
		}

		public String de_e_istit_att_indirizzo_attestante;

		public String getDe_e_istit_att_indirizzo_attestante() {
			return this.de_e_istit_att_indirizzo_attestante;
		}

		public String de_e_istit_att_civico_attestante;

		public String getDe_e_istit_att_civico_attestante() {
			return this.de_e_istit_att_civico_attestante;
		}

		public String cod_e_istit_att_cap_attestante;

		public String getCod_e_istit_att_cap_attestante() {
			return this.cod_e_istit_att_cap_attestante;
		}

		public String de_e_istit_att_localita_attestante;

		public String getDe_e_istit_att_localita_attestante() {
			return this.de_e_istit_att_localita_attestante;
		}

		public String de_e_istit_att_provincia_attestante;

		public String getDe_e_istit_att_provincia_attestante() {
			return this.de_e_istit_att_provincia_attestante;
		}

		public String cod_e_istit_att_nazione_attestante;

		public String getCod_e_istit_att_nazione_attestante() {
			return this.cod_e_istit_att_nazione_attestante;
		}

		public String cod_e_ente_benef_id_univ_benef_tipo_id_univoco;

		public String getCod_e_ente_benef_id_univ_benef_tipo_id_univoco() {
			return this.cod_e_ente_benef_id_univ_benef_tipo_id_univoco;
		}

		public String cod_e_ente_benef_id_univ_benef_codice_id_univoco;

		public String getCod_e_ente_benef_id_univ_benef_codice_id_univoco() {
			return this.cod_e_ente_benef_id_univ_benef_codice_id_univoco;
		}

		public String de_e_ente_benef_denominazione_beneficiario;

		public String getDe_e_ente_benef_denominazione_beneficiario() {
			return this.de_e_ente_benef_denominazione_beneficiario;
		}

		public String cod_e_ente_benef_codice_unit_oper_beneficiario;

		public String getCod_e_ente_benef_codice_unit_oper_beneficiario() {
			return this.cod_e_ente_benef_codice_unit_oper_beneficiario;
		}

		public String de_e_ente_benef_denom_unit_oper_beneficiario;

		public String getDe_e_ente_benef_denom_unit_oper_beneficiario() {
			return this.de_e_ente_benef_denom_unit_oper_beneficiario;
		}

		public String de_e_ente_benef_indirizzo_beneficiario;

		public String getDe_e_ente_benef_indirizzo_beneficiario() {
			return this.de_e_ente_benef_indirizzo_beneficiario;
		}

		public String de_e_ente_benef_civico_beneficiario;

		public String getDe_e_ente_benef_civico_beneficiario() {
			return this.de_e_ente_benef_civico_beneficiario;
		}

		public String cod_e_ente_benef_cap_beneficiario;

		public String getCod_e_ente_benef_cap_beneficiario() {
			return this.cod_e_ente_benef_cap_beneficiario;
		}

		public String de_e_ente_benef_localita_beneficiario;

		public String getDe_e_ente_benef_localita_beneficiario() {
			return this.de_e_ente_benef_localita_beneficiario;
		}

		public String de_e_ente_benef_provincia_beneficiario;

		public String getDe_e_ente_benef_provincia_beneficiario() {
			return this.de_e_ente_benef_provincia_beneficiario;
		}

		public String cod_e_ente_benef_nazione_beneficiario;

		public String getCod_e_ente_benef_nazione_beneficiario() {
			return this.cod_e_ente_benef_nazione_beneficiario;
		}

		public String cod_e_sogg_vers_id_univ_vers_tipo_id_univoco;

		public String getCod_e_sogg_vers_id_univ_vers_tipo_id_univoco() {
			return this.cod_e_sogg_vers_id_univ_vers_tipo_id_univoco;
		}

		public String cod_e_sogg_vers_id_univ_vers_codice_id_univoco;

		public String getCod_e_sogg_vers_id_univ_vers_codice_id_univoco() {
			return this.cod_e_sogg_vers_id_univ_vers_codice_id_univoco;
		}

		public String cod_e_sogg_vers_anagrafica_versante;

		public String getCod_e_sogg_vers_anagrafica_versante() {
			return this.cod_e_sogg_vers_anagrafica_versante;
		}

		public String de_e_sogg_vers_indirizzo_versante;

		public String getDe_e_sogg_vers_indirizzo_versante() {
			return this.de_e_sogg_vers_indirizzo_versante;
		}

		public String de_e_sogg_vers_civico_versante;

		public String getDe_e_sogg_vers_civico_versante() {
			return this.de_e_sogg_vers_civico_versante;
		}

		public String cod_e_sogg_vers_cap_versante;

		public String getCod_e_sogg_vers_cap_versante() {
			return this.cod_e_sogg_vers_cap_versante;
		}

		public String de_e_sogg_vers_localita_versante;

		public String getDe_e_sogg_vers_localita_versante() {
			return this.de_e_sogg_vers_localita_versante;
		}

		public String de_e_sogg_vers_provincia_versante;

		public String getDe_e_sogg_vers_provincia_versante() {
			return this.de_e_sogg_vers_provincia_versante;
		}

		public String cod_e_sogg_vers_nazione_versante;

		public String getCod_e_sogg_vers_nazione_versante() {
			return this.cod_e_sogg_vers_nazione_versante;
		}

		public String de_e_sogg_vers_email_versante;

		public String getDe_e_sogg_vers_email_versante() {
			return this.de_e_sogg_vers_email_versante;
		}

		public String cod_e_sogg_pag_id_univ_pag_tipo_id_univoco;

		public String getCod_e_sogg_pag_id_univ_pag_tipo_id_univoco() {
			return this.cod_e_sogg_pag_id_univ_pag_tipo_id_univoco;
		}

		public String cod_e_sogg_pag_id_univ_pag_codice_id_univoco;

		public String getCod_e_sogg_pag_id_univ_pag_codice_id_univoco() {
			return this.cod_e_sogg_pag_id_univ_pag_codice_id_univoco;
		}

		public String cod_e_sogg_pag_anagrafica_pagatore;

		public String getCod_e_sogg_pag_anagrafica_pagatore() {
			return this.cod_e_sogg_pag_anagrafica_pagatore;
		}

		public String de_e_sogg_pag_indirizzo_pagatore;

		public String getDe_e_sogg_pag_indirizzo_pagatore() {
			return this.de_e_sogg_pag_indirizzo_pagatore;
		}

		public String de_e_sogg_pag_civico_pagatore;

		public String getDe_e_sogg_pag_civico_pagatore() {
			return this.de_e_sogg_pag_civico_pagatore;
		}

		public String cod_e_sogg_pag_cap_pagatore;

		public String getCod_e_sogg_pag_cap_pagatore() {
			return this.cod_e_sogg_pag_cap_pagatore;
		}

		public String de_e_sogg_pag_localita_pagatore;

		public String getDe_e_sogg_pag_localita_pagatore() {
			return this.de_e_sogg_pag_localita_pagatore;
		}

		public String de_e_sogg_pag_provincia_pagatore;

		public String getDe_e_sogg_pag_provincia_pagatore() {
			return this.de_e_sogg_pag_provincia_pagatore;
		}

		public String cod_e_sogg_pag_nazione_pagatore;

		public String getCod_e_sogg_pag_nazione_pagatore() {
			return this.cod_e_sogg_pag_nazione_pagatore;
		}

		public String de_e_sogg_pag_email_pagatore;

		public String getDe_e_sogg_pag_email_pagatore() {
			return this.de_e_sogg_pag_email_pagatore;
		}

		public String cod_e_dati_pag_codice_esito_pagamento;

		public String getCod_e_dati_pag_codice_esito_pagamento() {
			return this.cod_e_dati_pag_codice_esito_pagamento;
		}

		public Double num_e_dati_pag_importo_totale_pagato;

		public Double getNum_e_dati_pag_importo_totale_pagato() {
			return this.num_e_dati_pag_importo_totale_pagato;
		}

		public String cod_e_dati_pag_id_univoco_versamento;

		public String getCod_e_dati_pag_id_univoco_versamento() {
			return this.cod_e_dati_pag_id_univoco_versamento;
		}

		public String cod_e_dati_pag_codice_contesto_pagamento;

		public String getCod_e_dati_pag_codice_contesto_pagamento() {
			return this.cod_e_dati_pag_codice_contesto_pagamento;
		}

		public Double num_e_dati_pag_dati_sing_pag_singolo_importo_pagato;

		public Double getNum_e_dati_pag_dati_sing_pag_singolo_importo_pagato() {
			return this.num_e_dati_pag_dati_sing_pag_singolo_importo_pagato;
		}

		public String de_e_dati_pag_dati_sing_pag_esito_singolo_pagamento;

		public String getDe_e_dati_pag_dati_sing_pag_esito_singolo_pagamento() {
			return this.de_e_dati_pag_dati_sing_pag_esito_singolo_pagamento;
		}

		public java.util.Date dt_e_dati_pag_dati_sing_pag_data_esito_singolo_pagamento;

		public java.util.Date getDt_e_dati_pag_dati_sing_pag_data_esito_singolo_pagamento() {
			return this.dt_e_dati_pag_dati_sing_pag_data_esito_singolo_pagamento;
		}

		public String cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss;

		public String getCod_e_dati_pag_dati_sing_pag_id_univoco_riscoss() {
			return this.cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss;
		}

		public String de_e_dati_pag_dati_sing_pag_causale_versamento;

		public String getDe_e_dati_pag_dati_sing_pag_causale_versamento() {
			return this.de_e_dati_pag_dati_sing_pag_causale_versamento;
		}

		public String de_e_dati_pag_dati_sing_pag_dati_specifici_riscossione;

		public String getDe_e_dati_pag_dati_sing_pag_dati_specifici_riscossione() {
			return this.de_e_dati_pag_dati_sing_pag_dati_specifici_riscossione;
		}

		public String cod_tipo_dovuto;

		public String getCod_tipo_dovuto() {
			return this.cod_tipo_dovuto;
		}

		public java.util.Date dt_acquisizione;

		public java.util.Date getDt_acquisizione() {
			return this.dt_acquisizione;
		}

		public Integer indice_dati_singolo_pagamento;

		public Integer getIndice_dati_singolo_pagamento() {
			return this.indice_dati_singolo_pagamento;
		}

		public String blb_rt_payload;

		public String getBlb_rt_payload() {
			return this.blb_rt_payload;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.mygov_ente_id;

				result = prime
						* result
						+ ((this.cod_rp_silinviarp_id_univoco_versamento == null) ? 0
								: this.cod_rp_silinviarp_id_univoco_versamento
										.hashCode());

				result = prime
						* result
						+ ((this.cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss == null) ? 0
								: this.cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss
										.hashCode());

				result = prime
						* result
						+ ((this.indice_dati_singolo_pagamento == null) ? 0
								: this.indice_dati_singolo_pagamento.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final MAPPING_EXPORTStruct other = (MAPPING_EXPORTStruct) obj;

			if (this.mygov_ente_id != other.mygov_ente_id)
				return false;

			if (this.cod_rp_silinviarp_id_univoco_versamento == null) {
				if (other.cod_rp_silinviarp_id_univoco_versamento != null)
					return false;

			} else if (!this.cod_rp_silinviarp_id_univoco_versamento
					.equals(other.cod_rp_silinviarp_id_univoco_versamento))

				return false;

			if (this.cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss == null) {
				if (other.cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss != null)
					return false;

			} else if (!this.cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss
					.equals(other.cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss))

				return false;

			if (this.indice_dati_singolo_pagamento == null) {
				if (other.indice_dati_singolo_pagamento != null)
					return false;

			} else if (!this.indice_dati_singolo_pagamento
					.equals(other.indice_dati_singolo_pagamento))

				return false;

			return true;
		}

		public void copyDataTo(MAPPING_EXPORTStruct other) {

			other.version = this.version;
			other.dt_creazione = this.dt_creazione;
			other.dt_ultima_modifica = this.dt_ultima_modifica;
			other.mygov_ente_id = this.mygov_ente_id;
			other.mygov_manage_flusso_id = this.mygov_manage_flusso_id;
			other.de_nome_flusso = this.de_nome_flusso;
			other.num_riga_flusso = this.num_riga_flusso;
			other.cod_iud = this.cod_iud;
			other.cod_rp_silinviarp_id_univoco_versamento = this.cod_rp_silinviarp_id_univoco_versamento;
			other.de_e_versione_oggetto = this.de_e_versione_oggetto;
			other.cod_e_dom_id_dominio = this.cod_e_dom_id_dominio;
			other.cod_e_dom_id_stazione_richiedente = this.cod_e_dom_id_stazione_richiedente;
			other.cod_e_id_messaggio_ricevuta = this.cod_e_id_messaggio_ricevuta;
			other.dt_e_data_ora_messaggio_ricevuta = this.dt_e_data_ora_messaggio_ricevuta;
			other.cod_e_riferimento_messaggio_richiesta = this.cod_e_riferimento_messaggio_richiesta;
			other.dt_e_riferimento_data_richiesta = this.dt_e_riferimento_data_richiesta;
			other.cod_e_istit_att_id_univ_att_tipo_id_univoco = this.cod_e_istit_att_id_univ_att_tipo_id_univoco;
			other.cod_e_istit_att_id_univ_att_codice_id_univoco = this.cod_e_istit_att_id_univ_att_codice_id_univoco;
			other.de_e_istit_att_denominazione_attestante = this.de_e_istit_att_denominazione_attestante;
			other.cod_e_istit_att_codice_unit_oper_attestante = this.cod_e_istit_att_codice_unit_oper_attestante;
			other.de_e_istit_att_denom_unit_oper_attestante = this.de_e_istit_att_denom_unit_oper_attestante;
			other.de_e_istit_att_indirizzo_attestante = this.de_e_istit_att_indirizzo_attestante;
			other.de_e_istit_att_civico_attestante = this.de_e_istit_att_civico_attestante;
			other.cod_e_istit_att_cap_attestante = this.cod_e_istit_att_cap_attestante;
			other.de_e_istit_att_localita_attestante = this.de_e_istit_att_localita_attestante;
			other.de_e_istit_att_provincia_attestante = this.de_e_istit_att_provincia_attestante;
			other.cod_e_istit_att_nazione_attestante = this.cod_e_istit_att_nazione_attestante;
			other.cod_e_ente_benef_id_univ_benef_tipo_id_univoco = this.cod_e_ente_benef_id_univ_benef_tipo_id_univoco;
			other.cod_e_ente_benef_id_univ_benef_codice_id_univoco = this.cod_e_ente_benef_id_univ_benef_codice_id_univoco;
			other.de_e_ente_benef_denominazione_beneficiario = this.de_e_ente_benef_denominazione_beneficiario;
			other.cod_e_ente_benef_codice_unit_oper_beneficiario = this.cod_e_ente_benef_codice_unit_oper_beneficiario;
			other.de_e_ente_benef_denom_unit_oper_beneficiario = this.de_e_ente_benef_denom_unit_oper_beneficiario;
			other.de_e_ente_benef_indirizzo_beneficiario = this.de_e_ente_benef_indirizzo_beneficiario;
			other.de_e_ente_benef_civico_beneficiario = this.de_e_ente_benef_civico_beneficiario;
			other.cod_e_ente_benef_cap_beneficiario = this.cod_e_ente_benef_cap_beneficiario;
			other.de_e_ente_benef_localita_beneficiario = this.de_e_ente_benef_localita_beneficiario;
			other.de_e_ente_benef_provincia_beneficiario = this.de_e_ente_benef_provincia_beneficiario;
			other.cod_e_ente_benef_nazione_beneficiario = this.cod_e_ente_benef_nazione_beneficiario;
			other.cod_e_sogg_vers_id_univ_vers_tipo_id_univoco = this.cod_e_sogg_vers_id_univ_vers_tipo_id_univoco;
			other.cod_e_sogg_vers_id_univ_vers_codice_id_univoco = this.cod_e_sogg_vers_id_univ_vers_codice_id_univoco;
			other.cod_e_sogg_vers_anagrafica_versante = this.cod_e_sogg_vers_anagrafica_versante;
			other.de_e_sogg_vers_indirizzo_versante = this.de_e_sogg_vers_indirizzo_versante;
			other.de_e_sogg_vers_civico_versante = this.de_e_sogg_vers_civico_versante;
			other.cod_e_sogg_vers_cap_versante = this.cod_e_sogg_vers_cap_versante;
			other.de_e_sogg_vers_localita_versante = this.de_e_sogg_vers_localita_versante;
			other.de_e_sogg_vers_provincia_versante = this.de_e_sogg_vers_provincia_versante;
			other.cod_e_sogg_vers_nazione_versante = this.cod_e_sogg_vers_nazione_versante;
			other.de_e_sogg_vers_email_versante = this.de_e_sogg_vers_email_versante;
			other.cod_e_sogg_pag_id_univ_pag_tipo_id_univoco = this.cod_e_sogg_pag_id_univ_pag_tipo_id_univoco;
			other.cod_e_sogg_pag_id_univ_pag_codice_id_univoco = this.cod_e_sogg_pag_id_univ_pag_codice_id_univoco;
			other.cod_e_sogg_pag_anagrafica_pagatore = this.cod_e_sogg_pag_anagrafica_pagatore;
			other.de_e_sogg_pag_indirizzo_pagatore = this.de_e_sogg_pag_indirizzo_pagatore;
			other.de_e_sogg_pag_civico_pagatore = this.de_e_sogg_pag_civico_pagatore;
			other.cod_e_sogg_pag_cap_pagatore = this.cod_e_sogg_pag_cap_pagatore;
			other.de_e_sogg_pag_localita_pagatore = this.de_e_sogg_pag_localita_pagatore;
			other.de_e_sogg_pag_provincia_pagatore = this.de_e_sogg_pag_provincia_pagatore;
			other.cod_e_sogg_pag_nazione_pagatore = this.cod_e_sogg_pag_nazione_pagatore;
			other.de_e_sogg_pag_email_pagatore = this.de_e_sogg_pag_email_pagatore;
			other.cod_e_dati_pag_codice_esito_pagamento = this.cod_e_dati_pag_codice_esito_pagamento;
			other.num_e_dati_pag_importo_totale_pagato = this.num_e_dati_pag_importo_totale_pagato;
			other.cod_e_dati_pag_id_univoco_versamento = this.cod_e_dati_pag_id_univoco_versamento;
			other.cod_e_dati_pag_codice_contesto_pagamento = this.cod_e_dati_pag_codice_contesto_pagamento;
			other.num_e_dati_pag_dati_sing_pag_singolo_importo_pagato = this.num_e_dati_pag_dati_sing_pag_singolo_importo_pagato;
			other.de_e_dati_pag_dati_sing_pag_esito_singolo_pagamento = this.de_e_dati_pag_dati_sing_pag_esito_singolo_pagamento;
			other.dt_e_dati_pag_dati_sing_pag_data_esito_singolo_pagamento = this.dt_e_dati_pag_dati_sing_pag_data_esito_singolo_pagamento;
			other.cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss = this.cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss;
			other.de_e_dati_pag_dati_sing_pag_causale_versamento = this.de_e_dati_pag_dati_sing_pag_causale_versamento;
			other.de_e_dati_pag_dati_sing_pag_dati_specifici_riscossione = this.de_e_dati_pag_dati_sing_pag_dati_specifici_riscossione;
			other.cod_tipo_dovuto = this.cod_tipo_dovuto;
			other.dt_acquisizione = this.dt_acquisizione;
			other.indice_dati_singolo_pagamento = this.indice_dati_singolo_pagamento;
			other.blb_rt_payload = this.blb_rt_payload;

		}

		public void copyKeysDataTo(MAPPING_EXPORTStruct other) {

			other.mygov_ente_id = this.mygov_ente_id;
			other.cod_rp_silinviarp_id_univoco_versamento = this.cod_rp_silinviarp_id_univoco_versamento;
			other.cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss = this.cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss;
			other.indice_dati_singolo_pagamento = this.indice_dati_singolo_pagamento;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length) {
					if (length < 1024
							&& commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length == 0) {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[1024];
					} else {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length);
				strReturn = new String(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1) {

				try {

					int length = 0;

					this.version = dis.readInt();

					this.dt_creazione = readDate(dis);

					this.dt_ultima_modifica = readDate(dis);

					this.mygov_ente_id = dis.readLong();

					this.mygov_manage_flusso_id = dis.readLong();

					this.de_nome_flusso = readString(dis);

					this.num_riga_flusso = dis.readInt();

					this.cod_iud = readString(dis);

					this.cod_rp_silinviarp_id_univoco_versamento = readString(dis);

					this.de_e_versione_oggetto = readString(dis);

					this.cod_e_dom_id_dominio = readString(dis);

					this.cod_e_dom_id_stazione_richiedente = readString(dis);

					this.cod_e_id_messaggio_ricevuta = readString(dis);

					this.dt_e_data_ora_messaggio_ricevuta = readDate(dis);

					this.cod_e_riferimento_messaggio_richiesta = readString(dis);

					this.dt_e_riferimento_data_richiesta = readDate(dis);

					this.cod_e_istit_att_id_univ_att_tipo_id_univoco = readString(dis);

					this.cod_e_istit_att_id_univ_att_codice_id_univoco = readString(dis);

					this.de_e_istit_att_denominazione_attestante = readString(dis);

					this.cod_e_istit_att_codice_unit_oper_attestante = readString(dis);

					this.de_e_istit_att_denom_unit_oper_attestante = readString(dis);

					this.de_e_istit_att_indirizzo_attestante = readString(dis);

					this.de_e_istit_att_civico_attestante = readString(dis);

					this.cod_e_istit_att_cap_attestante = readString(dis);

					this.de_e_istit_att_localita_attestante = readString(dis);

					this.de_e_istit_att_provincia_attestante = readString(dis);

					this.cod_e_istit_att_nazione_attestante = readString(dis);

					this.cod_e_ente_benef_id_univ_benef_tipo_id_univoco = readString(dis);

					this.cod_e_ente_benef_id_univ_benef_codice_id_univoco = readString(dis);

					this.de_e_ente_benef_denominazione_beneficiario = readString(dis);

					this.cod_e_ente_benef_codice_unit_oper_beneficiario = readString(dis);

					this.de_e_ente_benef_denom_unit_oper_beneficiario = readString(dis);

					this.de_e_ente_benef_indirizzo_beneficiario = readString(dis);

					this.de_e_ente_benef_civico_beneficiario = readString(dis);

					this.cod_e_ente_benef_cap_beneficiario = readString(dis);

					this.de_e_ente_benef_localita_beneficiario = readString(dis);

					this.de_e_ente_benef_provincia_beneficiario = readString(dis);

					this.cod_e_ente_benef_nazione_beneficiario = readString(dis);

					this.cod_e_sogg_vers_id_univ_vers_tipo_id_univoco = readString(dis);

					this.cod_e_sogg_vers_id_univ_vers_codice_id_univoco = readString(dis);

					this.cod_e_sogg_vers_anagrafica_versante = readString(dis);

					this.de_e_sogg_vers_indirizzo_versante = readString(dis);

					this.de_e_sogg_vers_civico_versante = readString(dis);

					this.cod_e_sogg_vers_cap_versante = readString(dis);

					this.de_e_sogg_vers_localita_versante = readString(dis);

					this.de_e_sogg_vers_provincia_versante = readString(dis);

					this.cod_e_sogg_vers_nazione_versante = readString(dis);

					this.de_e_sogg_vers_email_versante = readString(dis);

					this.cod_e_sogg_pag_id_univ_pag_tipo_id_univoco = readString(dis);

					this.cod_e_sogg_pag_id_univ_pag_codice_id_univoco = readString(dis);

					this.cod_e_sogg_pag_anagrafica_pagatore = readString(dis);

					this.de_e_sogg_pag_indirizzo_pagatore = readString(dis);

					this.de_e_sogg_pag_civico_pagatore = readString(dis);

					this.cod_e_sogg_pag_cap_pagatore = readString(dis);

					this.de_e_sogg_pag_localita_pagatore = readString(dis);

					this.de_e_sogg_pag_provincia_pagatore = readString(dis);

					this.cod_e_sogg_pag_nazione_pagatore = readString(dis);

					this.de_e_sogg_pag_email_pagatore = readString(dis);

					this.cod_e_dati_pag_codice_esito_pagamento = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_e_dati_pag_importo_totale_pagato = null;
					} else {
						this.num_e_dati_pag_importo_totale_pagato = dis
								.readDouble();
					}

					this.cod_e_dati_pag_id_univoco_versamento = readString(dis);

					this.cod_e_dati_pag_codice_contesto_pagamento = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.num_e_dati_pag_dati_sing_pag_singolo_importo_pagato = null;
					} else {
						this.num_e_dati_pag_dati_sing_pag_singolo_importo_pagato = dis
								.readDouble();
					}

					this.de_e_dati_pag_dati_sing_pag_esito_singolo_pagamento = readString(dis);

					this.dt_e_dati_pag_dati_sing_pag_data_esito_singolo_pagamento = readDate(dis);

					this.cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss = readString(dis);

					this.de_e_dati_pag_dati_sing_pag_causale_versamento = readString(dis);

					this.de_e_dati_pag_dati_sing_pag_dati_specifici_riscossione = readString(dis);

					this.cod_tipo_dovuto = readString(dis);

					this.dt_acquisizione = readDate(dis);

					this.indice_dati_singolo_pagamento = readInteger(dis);

					this.blb_rt_payload = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.version);

				// java.util.Date

				writeDate(this.dt_creazione, dos);

				// java.util.Date

				writeDate(this.dt_ultima_modifica, dos);

				// long

				dos.writeLong(this.mygov_ente_id);

				// long

				dos.writeLong(this.mygov_manage_flusso_id);

				// String

				writeString(this.de_nome_flusso, dos);

				// int

				dos.writeInt(this.num_riga_flusso);

				// String

				writeString(this.cod_iud, dos);

				// String

				writeString(this.cod_rp_silinviarp_id_univoco_versamento, dos);

				// String

				writeString(this.de_e_versione_oggetto, dos);

				// String

				writeString(this.cod_e_dom_id_dominio, dos);

				// String

				writeString(this.cod_e_dom_id_stazione_richiedente, dos);

				// String

				writeString(this.cod_e_id_messaggio_ricevuta, dos);

				// java.util.Date

				writeDate(this.dt_e_data_ora_messaggio_ricevuta, dos);

				// String

				writeString(this.cod_e_riferimento_messaggio_richiesta, dos);

				// java.util.Date

				writeDate(this.dt_e_riferimento_data_richiesta, dos);

				// String

				writeString(this.cod_e_istit_att_id_univ_att_tipo_id_univoco,
						dos);

				// String

				writeString(this.cod_e_istit_att_id_univ_att_codice_id_univoco,
						dos);

				// String

				writeString(this.de_e_istit_att_denominazione_attestante, dos);

				// String

				writeString(this.cod_e_istit_att_codice_unit_oper_attestante,
						dos);

				// String

				writeString(this.de_e_istit_att_denom_unit_oper_attestante, dos);

				// String

				writeString(this.de_e_istit_att_indirizzo_attestante, dos);

				// String

				writeString(this.de_e_istit_att_civico_attestante, dos);

				// String

				writeString(this.cod_e_istit_att_cap_attestante, dos);

				// String

				writeString(this.de_e_istit_att_localita_attestante, dos);

				// String

				writeString(this.de_e_istit_att_provincia_attestante, dos);

				// String

				writeString(this.cod_e_istit_att_nazione_attestante, dos);

				// String

				writeString(
						this.cod_e_ente_benef_id_univ_benef_tipo_id_univoco,
						dos);

				// String

				writeString(
						this.cod_e_ente_benef_id_univ_benef_codice_id_univoco,
						dos);

				// String

				writeString(this.de_e_ente_benef_denominazione_beneficiario,
						dos);

				// String

				writeString(
						this.cod_e_ente_benef_codice_unit_oper_beneficiario,
						dos);

				// String

				writeString(this.de_e_ente_benef_denom_unit_oper_beneficiario,
						dos);

				// String

				writeString(this.de_e_ente_benef_indirizzo_beneficiario, dos);

				// String

				writeString(this.de_e_ente_benef_civico_beneficiario, dos);

				// String

				writeString(this.cod_e_ente_benef_cap_beneficiario, dos);

				// String

				writeString(this.de_e_ente_benef_localita_beneficiario, dos);

				// String

				writeString(this.de_e_ente_benef_provincia_beneficiario, dos);

				// String

				writeString(this.cod_e_ente_benef_nazione_beneficiario, dos);

				// String

				writeString(this.cod_e_sogg_vers_id_univ_vers_tipo_id_univoco,
						dos);

				// String

				writeString(
						this.cod_e_sogg_vers_id_univ_vers_codice_id_univoco,
						dos);

				// String

				writeString(this.cod_e_sogg_vers_anagrafica_versante, dos);

				// String

				writeString(this.de_e_sogg_vers_indirizzo_versante, dos);

				// String

				writeString(this.de_e_sogg_vers_civico_versante, dos);

				// String

				writeString(this.cod_e_sogg_vers_cap_versante, dos);

				// String

				writeString(this.de_e_sogg_vers_localita_versante, dos);

				// String

				writeString(this.de_e_sogg_vers_provincia_versante, dos);

				// String

				writeString(this.cod_e_sogg_vers_nazione_versante, dos);

				// String

				writeString(this.de_e_sogg_vers_email_versante, dos);

				// String

				writeString(this.cod_e_sogg_pag_id_univ_pag_tipo_id_univoco,
						dos);

				// String

				writeString(this.cod_e_sogg_pag_id_univ_pag_codice_id_univoco,
						dos);

				// String

				writeString(this.cod_e_sogg_pag_anagrafica_pagatore, dos);

				// String

				writeString(this.de_e_sogg_pag_indirizzo_pagatore, dos);

				// String

				writeString(this.de_e_sogg_pag_civico_pagatore, dos);

				// String

				writeString(this.cod_e_sogg_pag_cap_pagatore, dos);

				// String

				writeString(this.de_e_sogg_pag_localita_pagatore, dos);

				// String

				writeString(this.de_e_sogg_pag_provincia_pagatore, dos);

				// String

				writeString(this.cod_e_sogg_pag_nazione_pagatore, dos);

				// String

				writeString(this.de_e_sogg_pag_email_pagatore, dos);

				// String

				writeString(this.cod_e_dati_pag_codice_esito_pagamento, dos);

				// Double

				if (this.num_e_dati_pag_importo_totale_pagato == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.num_e_dati_pag_importo_totale_pagato);
				}

				// String

				writeString(this.cod_e_dati_pag_id_univoco_versamento, dos);

				// String

				writeString(this.cod_e_dati_pag_codice_contesto_pagamento, dos);

				// Double

				if (this.num_e_dati_pag_dati_sing_pag_singolo_importo_pagato == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.num_e_dati_pag_dati_sing_pag_singolo_importo_pagato);
				}

				// String

				writeString(
						this.de_e_dati_pag_dati_sing_pag_esito_singolo_pagamento,
						dos);

				// java.util.Date

				writeDate(
						this.dt_e_dati_pag_dati_sing_pag_data_esito_singolo_pagamento,
						dos);

				// String

				writeString(
						this.cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss,
						dos);

				// String

				writeString(
						this.de_e_dati_pag_dati_sing_pag_causale_versamento,
						dos);

				// String

				writeString(
						this.de_e_dati_pag_dati_sing_pag_dati_specifici_riscossione,
						dos);

				// String

				writeString(this.cod_tipo_dovuto, dos);

				// java.util.Date

				writeDate(this.dt_acquisizione, dos);

				// Integer

				writeInteger(this.indice_dati_singolo_pagamento, dos);

				// String

				writeString(this.blb_rt_payload, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("version=" + String.valueOf(version));
			sb.append(",dt_creazione=" + String.valueOf(dt_creazione));
			sb.append(",dt_ultima_modifica="
					+ String.valueOf(dt_ultima_modifica));
			sb.append(",mygov_ente_id=" + String.valueOf(mygov_ente_id));
			sb.append(",mygov_manage_flusso_id="
					+ String.valueOf(mygov_manage_flusso_id));
			sb.append(",de_nome_flusso=" + de_nome_flusso);
			sb.append(",num_riga_flusso=" + String.valueOf(num_riga_flusso));
			sb.append(",cod_iud=" + cod_iud);
			sb.append(",cod_rp_silinviarp_id_univoco_versamento="
					+ cod_rp_silinviarp_id_univoco_versamento);
			sb.append(",de_e_versione_oggetto=" + de_e_versione_oggetto);
			sb.append(",cod_e_dom_id_dominio=" + cod_e_dom_id_dominio);
			sb.append(",cod_e_dom_id_stazione_richiedente="
					+ cod_e_dom_id_stazione_richiedente);
			sb.append(",cod_e_id_messaggio_ricevuta="
					+ cod_e_id_messaggio_ricevuta);
			sb.append(",dt_e_data_ora_messaggio_ricevuta="
					+ String.valueOf(dt_e_data_ora_messaggio_ricevuta));
			sb.append(",cod_e_riferimento_messaggio_richiesta="
					+ cod_e_riferimento_messaggio_richiesta);
			sb.append(",dt_e_riferimento_data_richiesta="
					+ String.valueOf(dt_e_riferimento_data_richiesta));
			sb.append(",cod_e_istit_att_id_univ_att_tipo_id_univoco="
					+ cod_e_istit_att_id_univ_att_tipo_id_univoco);
			sb.append(",cod_e_istit_att_id_univ_att_codice_id_univoco="
					+ cod_e_istit_att_id_univ_att_codice_id_univoco);
			sb.append(",de_e_istit_att_denominazione_attestante="
					+ de_e_istit_att_denominazione_attestante);
			sb.append(",cod_e_istit_att_codice_unit_oper_attestante="
					+ cod_e_istit_att_codice_unit_oper_attestante);
			sb.append(",de_e_istit_att_denom_unit_oper_attestante="
					+ de_e_istit_att_denom_unit_oper_attestante);
			sb.append(",de_e_istit_att_indirizzo_attestante="
					+ de_e_istit_att_indirizzo_attestante);
			sb.append(",de_e_istit_att_civico_attestante="
					+ de_e_istit_att_civico_attestante);
			sb.append(",cod_e_istit_att_cap_attestante="
					+ cod_e_istit_att_cap_attestante);
			sb.append(",de_e_istit_att_localita_attestante="
					+ de_e_istit_att_localita_attestante);
			sb.append(",de_e_istit_att_provincia_attestante="
					+ de_e_istit_att_provincia_attestante);
			sb.append(",cod_e_istit_att_nazione_attestante="
					+ cod_e_istit_att_nazione_attestante);
			sb.append(",cod_e_ente_benef_id_univ_benef_tipo_id_univoco="
					+ cod_e_ente_benef_id_univ_benef_tipo_id_univoco);
			sb.append(",cod_e_ente_benef_id_univ_benef_codice_id_univoco="
					+ cod_e_ente_benef_id_univ_benef_codice_id_univoco);
			sb.append(",de_e_ente_benef_denominazione_beneficiario="
					+ de_e_ente_benef_denominazione_beneficiario);
			sb.append(",cod_e_ente_benef_codice_unit_oper_beneficiario="
					+ cod_e_ente_benef_codice_unit_oper_beneficiario);
			sb.append(",de_e_ente_benef_denom_unit_oper_beneficiario="
					+ de_e_ente_benef_denom_unit_oper_beneficiario);
			sb.append(",de_e_ente_benef_indirizzo_beneficiario="
					+ de_e_ente_benef_indirizzo_beneficiario);
			sb.append(",de_e_ente_benef_civico_beneficiario="
					+ de_e_ente_benef_civico_beneficiario);
			sb.append(",cod_e_ente_benef_cap_beneficiario="
					+ cod_e_ente_benef_cap_beneficiario);
			sb.append(",de_e_ente_benef_localita_beneficiario="
					+ de_e_ente_benef_localita_beneficiario);
			sb.append(",de_e_ente_benef_provincia_beneficiario="
					+ de_e_ente_benef_provincia_beneficiario);
			sb.append(",cod_e_ente_benef_nazione_beneficiario="
					+ cod_e_ente_benef_nazione_beneficiario);
			sb.append(",cod_e_sogg_vers_id_univ_vers_tipo_id_univoco="
					+ cod_e_sogg_vers_id_univ_vers_tipo_id_univoco);
			sb.append(",cod_e_sogg_vers_id_univ_vers_codice_id_univoco="
					+ cod_e_sogg_vers_id_univ_vers_codice_id_univoco);
			sb.append(",cod_e_sogg_vers_anagrafica_versante="
					+ cod_e_sogg_vers_anagrafica_versante);
			sb.append(",de_e_sogg_vers_indirizzo_versante="
					+ de_e_sogg_vers_indirizzo_versante);
			sb.append(",de_e_sogg_vers_civico_versante="
					+ de_e_sogg_vers_civico_versante);
			sb.append(",cod_e_sogg_vers_cap_versante="
					+ cod_e_sogg_vers_cap_versante);
			sb.append(",de_e_sogg_vers_localita_versante="
					+ de_e_sogg_vers_localita_versante);
			sb.append(",de_e_sogg_vers_provincia_versante="
					+ de_e_sogg_vers_provincia_versante);
			sb.append(",cod_e_sogg_vers_nazione_versante="
					+ cod_e_sogg_vers_nazione_versante);
			sb.append(",de_e_sogg_vers_email_versante="
					+ de_e_sogg_vers_email_versante);
			sb.append(",cod_e_sogg_pag_id_univ_pag_tipo_id_univoco="
					+ cod_e_sogg_pag_id_univ_pag_tipo_id_univoco);
			sb.append(",cod_e_sogg_pag_id_univ_pag_codice_id_univoco="
					+ cod_e_sogg_pag_id_univ_pag_codice_id_univoco);
			sb.append(",cod_e_sogg_pag_anagrafica_pagatore="
					+ cod_e_sogg_pag_anagrafica_pagatore);
			sb.append(",de_e_sogg_pag_indirizzo_pagatore="
					+ de_e_sogg_pag_indirizzo_pagatore);
			sb.append(",de_e_sogg_pag_civico_pagatore="
					+ de_e_sogg_pag_civico_pagatore);
			sb.append(",cod_e_sogg_pag_cap_pagatore="
					+ cod_e_sogg_pag_cap_pagatore);
			sb.append(",de_e_sogg_pag_localita_pagatore="
					+ de_e_sogg_pag_localita_pagatore);
			sb.append(",de_e_sogg_pag_provincia_pagatore="
					+ de_e_sogg_pag_provincia_pagatore);
			sb.append(",cod_e_sogg_pag_nazione_pagatore="
					+ cod_e_sogg_pag_nazione_pagatore);
			sb.append(",de_e_sogg_pag_email_pagatore="
					+ de_e_sogg_pag_email_pagatore);
			sb.append(",cod_e_dati_pag_codice_esito_pagamento="
					+ cod_e_dati_pag_codice_esito_pagamento);
			sb.append(",num_e_dati_pag_importo_totale_pagato="
					+ String.valueOf(num_e_dati_pag_importo_totale_pagato));
			sb.append(",cod_e_dati_pag_id_univoco_versamento="
					+ cod_e_dati_pag_id_univoco_versamento);
			sb.append(",cod_e_dati_pag_codice_contesto_pagamento="
					+ cod_e_dati_pag_codice_contesto_pagamento);
			sb.append(",num_e_dati_pag_dati_sing_pag_singolo_importo_pagato="
					+ String.valueOf(num_e_dati_pag_dati_sing_pag_singolo_importo_pagato));
			sb.append(",de_e_dati_pag_dati_sing_pag_esito_singolo_pagamento="
					+ de_e_dati_pag_dati_sing_pag_esito_singolo_pagamento);
			sb.append(",dt_e_dati_pag_dati_sing_pag_data_esito_singolo_pagamento="
					+ String.valueOf(dt_e_dati_pag_dati_sing_pag_data_esito_singolo_pagamento));
			sb.append(",cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss="
					+ cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss);
			sb.append(",de_e_dati_pag_dati_sing_pag_causale_versamento="
					+ de_e_dati_pag_dati_sing_pag_causale_versamento);
			sb.append(",de_e_dati_pag_dati_sing_pag_dati_specifici_riscossione="
					+ de_e_dati_pag_dati_sing_pag_dati_specifici_riscossione);
			sb.append(",cod_tipo_dovuto=" + cod_tipo_dovuto);
			sb.append(",dt_acquisizione=" + String.valueOf(dt_acquisizione));
			sb.append(",indice_dati_singolo_pagamento="
					+ String.valueOf(indice_dati_singolo_pagamento));
			sb.append(",blb_rt_payload=" + blb_rt_payload);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(MAPPING_EXPORTStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.mygov_ente_id,
					other.mygov_ente_id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(
					this.cod_rp_silinviarp_id_univoco_versamento,
					other.cod_rp_silinviarp_id_univoco_versamento);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(
					this.cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss,
					other.cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(
					this.indice_dati_singolo_pagamento,
					other.indice_dati_singolo_pagamento);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class ERROR_LOAD_CFStruct implements
			routines.system.IPersistableRow<ERROR_LOAD_CFStruct> {
		final static byte[] commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];
		static byte[] commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];

		public String iuf;

		public String getIuf() {
			return this.iuf;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length) {
					if (length < 1024
							&& commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length == 0) {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[1024];
					} else {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length);
				strReturn = new String(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1) {

				try {

					int length = 0;

					this.iuf = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.iuf, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iuf=" + iuf);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ERROR_LOAD_CFStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];
		static byte[] commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];

		public String iuf;

		public String getIuf() {
			return this.iuf;
		}

		public Integer num_riga_flusso;

		public Integer getNum_riga_flusso() {
			return this.num_riga_flusso;
		}

		public String cod_iud;

		public String getCod_iud() {
			return this.cod_iud;
		}

		public String cod_iuv;

		public String getCod_iuv() {
			return this.cod_iuv;
		}

		public String versione_oggetto;

		public String getVersione_oggetto() {
			return this.versione_oggetto;
		}

		public String identificativo_dominio;

		public String getIdentificativo_dominio() {
			return this.identificativo_dominio;
		}

		public String identificativo_stazione_richiedente;

		public String getIdentificativo_stazione_richiedente() {
			return this.identificativo_stazione_richiedente;
		}

		public String identificativo_messaggio_ricevuta;

		public String getIdentificativo_messaggio_ricevuta() {
			return this.identificativo_messaggio_ricevuta;
		}

		public java.util.Date data_ora_messaggio_ricevuta;

		public java.util.Date getData_ora_messaggio_ricevuta() {
			return this.data_ora_messaggio_ricevuta;
		}

		public String riferimento_messaggio_richiesta;

		public String getRiferimento_messaggio_richiesta() {
			return this.riferimento_messaggio_richiesta;
		}

		public java.util.Date riferimento_data_richiesta;

		public java.util.Date getRiferimento_data_richiesta() {
			return this.riferimento_data_richiesta;
		}

		public String tipo_identificativo_univoco;

		public String getTipo_identificativo_univoco() {
			return this.tipo_identificativo_univoco;
		}

		public String codice_identificativo_univoco;

		public String getCodice_identificativo_univoco() {
			return this.codice_identificativo_univoco;
		}

		public String denominazione_attestante;

		public String getDenominazione_attestante() {
			return this.denominazione_attestante;
		}

		public String codice_unit_oper_attestante;

		public String getCodice_unit_oper_attestante() {
			return this.codice_unit_oper_attestante;
		}

		public String denom_unit_oper_attestante;

		public String getDenom_unit_oper_attestante() {
			return this.denom_unit_oper_attestante;
		}

		public String indirizzo_attestante;

		public String getIndirizzo_attestante() {
			return this.indirizzo_attestante;
		}

		public String civico_attestante;

		public String getCivico_attestante() {
			return this.civico_attestante;
		}

		public String cap_attestante;

		public String getCap_attestante() {
			return this.cap_attestante;
		}

		public String localita_attestante;

		public String getLocalita_attestante() {
			return this.localita_attestante;
		}

		public String provincia_attestante;

		public String getProvincia_attestante() {
			return this.provincia_attestante;
		}

		public String nazione_attestante;

		public String getNazione_attestante() {
			return this.nazione_attestante;
		}

		public String ente_benef_tipo_identificativo_univoco;

		public String getEnte_benef_tipo_identificativo_univoco() {
			return this.ente_benef_tipo_identificativo_univoco;
		}

		public String ente_benef_codice_identificativo_univoco;

		public String getEnte_benef_codice_identificativo_univoco() {
			return this.ente_benef_codice_identificativo_univoco;
		}

		public String denominazione_beneficiario;

		public String getDenominazione_beneficiario() {
			return this.denominazione_beneficiario;
		}

		public String codice_unit_oper_beneficiario;

		public String getCodice_unit_oper_beneficiario() {
			return this.codice_unit_oper_beneficiario;
		}

		public String denom_unit_oper_beneficiario;

		public String getDenom_unit_oper_beneficiario() {
			return this.denom_unit_oper_beneficiario;
		}

		public String indirizzo_beneficiario;

		public String getIndirizzo_beneficiario() {
			return this.indirizzo_beneficiario;
		}

		public String civico_beneficiario;

		public String getCivico_beneficiario() {
			return this.civico_beneficiario;
		}

		public String cap_beneficiario;

		public String getCap_beneficiario() {
			return this.cap_beneficiario;
		}

		public String localita_beneficiario;

		public String getLocalita_beneficiario() {
			return this.localita_beneficiario;
		}

		public String provincia_beneficiario;

		public String getProvincia_beneficiario() {
			return this.provincia_beneficiario;
		}

		public String nazione_beneficiario;

		public String getNazione_beneficiario() {
			return this.nazione_beneficiario;
		}

		public String sogg_vers_tipo_identificativo_univoco;

		public String getSogg_vers_tipo_identificativo_univoco() {
			return this.sogg_vers_tipo_identificativo_univoco;
		}

		public String sogg_vers_codice_identificativo_univoco;

		public String getSogg_vers_codice_identificativo_univoco() {
			return this.sogg_vers_codice_identificativo_univoco;
		}

		public String anagrafica_versante;

		public String getAnagrafica_versante() {
			return this.anagrafica_versante;
		}

		public String indirizzo_versante;

		public String getIndirizzo_versante() {
			return this.indirizzo_versante;
		}

		public String civico_versante;

		public String getCivico_versante() {
			return this.civico_versante;
		}

		public String cap_versante;

		public String getCap_versante() {
			return this.cap_versante;
		}

		public String localita_versante;

		public String getLocalita_versante() {
			return this.localita_versante;
		}

		public String provincia_versante;

		public String getProvincia_versante() {
			return this.provincia_versante;
		}

		public String nazione_versante;

		public String getNazione_versante() {
			return this.nazione_versante;
		}

		public String email_versante;

		public String getEmail_versante() {
			return this.email_versante;
		}

		public String sogg_pag_tipo_identificativo_univoco;

		public String getSogg_pag_tipo_identificativo_univoco() {
			return this.sogg_pag_tipo_identificativo_univoco;
		}

		public String sogg_pag_codice_identificativo_univoco;

		public String getSogg_pag_codice_identificativo_univoco() {
			return this.sogg_pag_codice_identificativo_univoco;
		}

		public String anagrafica_pagatore;

		public String getAnagrafica_pagatore() {
			return this.anagrafica_pagatore;
		}

		public String indirizzo_pagatore;

		public String getIndirizzo_pagatore() {
			return this.indirizzo_pagatore;
		}

		public String civico_pagatore;

		public String getCivico_pagatore() {
			return this.civico_pagatore;
		}

		public String cap_pagatore;

		public String getCap_pagatore() {
			return this.cap_pagatore;
		}

		public String localita_pagatore;

		public String getLocalita_pagatore() {
			return this.localita_pagatore;
		}

		public String provincia_pagatore;

		public String getProvincia_pagatore() {
			return this.provincia_pagatore;
		}

		public String nazione_pagatore;

		public String getNazione_pagatore() {
			return this.nazione_pagatore;
		}

		public String email_pagatore;

		public String getEmail_pagatore() {
			return this.email_pagatore;
		}

		public String codice_esito_pagamento;

		public String getCodice_esito_pagamento() {
			return this.codice_esito_pagamento;
		}

		public Double importo_totale_pagato;

		public Double getImporto_totale_pagato() {
			return this.importo_totale_pagato;
		}

		public String identificativo_univoco_versamento;

		public String getIdentificativo_univoco_versamento() {
			return this.identificativo_univoco_versamento;
		}

		public String codice_contesto_pagamento;

		public String getCodice_contesto_pagamento() {
			return this.codice_contesto_pagamento;
		}

		public Double singolo_importo_pagato;

		public Double getSingolo_importo_pagato() {
			return this.singolo_importo_pagato;
		}

		public String esito_singolo_pagamento;

		public String getEsito_singolo_pagamento() {
			return this.esito_singolo_pagamento;
		}

		public java.util.Date data_esito_singolo_pagamento;

		public java.util.Date getData_esito_singolo_pagamento() {
			return this.data_esito_singolo_pagamento;
		}

		public String identificativo_univoco_riscoss;

		public String getIdentificativo_univoco_riscoss() {
			return this.identificativo_univoco_riscoss;
		}

		public String causale_versamento;

		public String getCausale_versamento() {
			return this.causale_versamento;
		}

		public String dati_specifici_riscossione;

		public String getDati_specifici_riscossione() {
			return this.dati_specifici_riscossione;
		}

		public String tipoDovuto;

		public String getTipoDovuto() {
			return this.tipoDovuto;
		}

		public String tipofirma;

		public String getTipofirma() {
			return this.tipofirma;
		}

		public String rt;

		public String getRt() {
			return this.rt;
		}

		public Integer indice_dati_singolo_pagamento;

		public Integer getIndice_dati_singolo_pagamento() {
			return this.indice_dati_singolo_pagamento;
		}

		public Double numRtDatiPagDatiSingPagCommissioniApplicatePsp;

		public Double getNumRtDatiPagDatiSingPagCommissioniApplicatePsp() {
			return this.numRtDatiPagDatiSingPagCommissioniApplicatePsp;
		}

		public String codRtDatiPagDatiSingPagAllegatoRicevutaTipo;

		public String getCodRtDatiPagDatiSingPagAllegatoRicevutaTipo() {
			return this.codRtDatiPagDatiSingPagAllegatoRicevutaTipo;
		}

		public Object blbRtDatiPagDatiSingPagAllegatoRicevutaTest;

		public Object getBlbRtDatiPagDatiSingPagAllegatoRicevutaTest() {
			return this.blbRtDatiPagDatiSingPagAllegatoRicevutaTest;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length) {
					if (length < 1024
							&& commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length == 0) {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[1024];
					} else {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length);
				strReturn = new String(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1) {

				try {

					int length = 0;

					this.iuf = readString(dis);

					this.num_riga_flusso = readInteger(dis);

					this.cod_iud = readString(dis);

					this.cod_iuv = readString(dis);

					this.versione_oggetto = readString(dis);

					this.identificativo_dominio = readString(dis);

					this.identificativo_stazione_richiedente = readString(dis);

					this.identificativo_messaggio_ricevuta = readString(dis);

					this.data_ora_messaggio_ricevuta = readDate(dis);

					this.riferimento_messaggio_richiesta = readString(dis);

					this.riferimento_data_richiesta = readDate(dis);

					this.tipo_identificativo_univoco = readString(dis);

					this.codice_identificativo_univoco = readString(dis);

					this.denominazione_attestante = readString(dis);

					this.codice_unit_oper_attestante = readString(dis);

					this.denom_unit_oper_attestante = readString(dis);

					this.indirizzo_attestante = readString(dis);

					this.civico_attestante = readString(dis);

					this.cap_attestante = readString(dis);

					this.localita_attestante = readString(dis);

					this.provincia_attestante = readString(dis);

					this.nazione_attestante = readString(dis);

					this.ente_benef_tipo_identificativo_univoco = readString(dis);

					this.ente_benef_codice_identificativo_univoco = readString(dis);

					this.denominazione_beneficiario = readString(dis);

					this.codice_unit_oper_beneficiario = readString(dis);

					this.denom_unit_oper_beneficiario = readString(dis);

					this.indirizzo_beneficiario = readString(dis);

					this.civico_beneficiario = readString(dis);

					this.cap_beneficiario = readString(dis);

					this.localita_beneficiario = readString(dis);

					this.provincia_beneficiario = readString(dis);

					this.nazione_beneficiario = readString(dis);

					this.sogg_vers_tipo_identificativo_univoco = readString(dis);

					this.sogg_vers_codice_identificativo_univoco = readString(dis);

					this.anagrafica_versante = readString(dis);

					this.indirizzo_versante = readString(dis);

					this.civico_versante = readString(dis);

					this.cap_versante = readString(dis);

					this.localita_versante = readString(dis);

					this.provincia_versante = readString(dis);

					this.nazione_versante = readString(dis);

					this.email_versante = readString(dis);

					this.sogg_pag_tipo_identificativo_univoco = readString(dis);

					this.sogg_pag_codice_identificativo_univoco = readString(dis);

					this.anagrafica_pagatore = readString(dis);

					this.indirizzo_pagatore = readString(dis);

					this.civico_pagatore = readString(dis);

					this.cap_pagatore = readString(dis);

					this.localita_pagatore = readString(dis);

					this.provincia_pagatore = readString(dis);

					this.nazione_pagatore = readString(dis);

					this.email_pagatore = readString(dis);

					this.codice_esito_pagamento = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.importo_totale_pagato = null;
					} else {
						this.importo_totale_pagato = dis.readDouble();
					}

					this.identificativo_univoco_versamento = readString(dis);

					this.codice_contesto_pagamento = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.singolo_importo_pagato = null;
					} else {
						this.singolo_importo_pagato = dis.readDouble();
					}

					this.esito_singolo_pagamento = readString(dis);

					this.data_esito_singolo_pagamento = readDate(dis);

					this.identificativo_univoco_riscoss = readString(dis);

					this.causale_versamento = readString(dis);

					this.dati_specifici_riscossione = readString(dis);

					this.tipoDovuto = readString(dis);

					this.tipofirma = readString(dis);

					this.rt = readString(dis);

					this.indice_dati_singolo_pagamento = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.numRtDatiPagDatiSingPagCommissioniApplicatePsp = null;
					} else {
						this.numRtDatiPagDatiSingPagCommissioniApplicatePsp = dis
								.readDouble();
					}

					this.codRtDatiPagDatiSingPagAllegatoRicevutaTipo = readString(dis);

					this.blbRtDatiPagDatiSingPagAllegatoRicevutaTest = (Object) dis
							.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.iuf, dos);

				// Integer

				writeInteger(this.num_riga_flusso, dos);

				// String

				writeString(this.cod_iud, dos);

				// String

				writeString(this.cod_iuv, dos);

				// String

				writeString(this.versione_oggetto, dos);

				// String

				writeString(this.identificativo_dominio, dos);

				// String

				writeString(this.identificativo_stazione_richiedente, dos);

				// String

				writeString(this.identificativo_messaggio_ricevuta, dos);

				// java.util.Date

				writeDate(this.data_ora_messaggio_ricevuta, dos);

				// String

				writeString(this.riferimento_messaggio_richiesta, dos);

				// java.util.Date

				writeDate(this.riferimento_data_richiesta, dos);

				// String

				writeString(this.tipo_identificativo_univoco, dos);

				// String

				writeString(this.codice_identificativo_univoco, dos);

				// String

				writeString(this.denominazione_attestante, dos);

				// String

				writeString(this.codice_unit_oper_attestante, dos);

				// String

				writeString(this.denom_unit_oper_attestante, dos);

				// String

				writeString(this.indirizzo_attestante, dos);

				// String

				writeString(this.civico_attestante, dos);

				// String

				writeString(this.cap_attestante, dos);

				// String

				writeString(this.localita_attestante, dos);

				// String

				writeString(this.provincia_attestante, dos);

				// String

				writeString(this.nazione_attestante, dos);

				// String

				writeString(this.ente_benef_tipo_identificativo_univoco, dos);

				// String

				writeString(this.ente_benef_codice_identificativo_univoco, dos);

				// String

				writeString(this.denominazione_beneficiario, dos);

				// String

				writeString(this.codice_unit_oper_beneficiario, dos);

				// String

				writeString(this.denom_unit_oper_beneficiario, dos);

				// String

				writeString(this.indirizzo_beneficiario, dos);

				// String

				writeString(this.civico_beneficiario, dos);

				// String

				writeString(this.cap_beneficiario, dos);

				// String

				writeString(this.localita_beneficiario, dos);

				// String

				writeString(this.provincia_beneficiario, dos);

				// String

				writeString(this.nazione_beneficiario, dos);

				// String

				writeString(this.sogg_vers_tipo_identificativo_univoco, dos);

				// String

				writeString(this.sogg_vers_codice_identificativo_univoco, dos);

				// String

				writeString(this.anagrafica_versante, dos);

				// String

				writeString(this.indirizzo_versante, dos);

				// String

				writeString(this.civico_versante, dos);

				// String

				writeString(this.cap_versante, dos);

				// String

				writeString(this.localita_versante, dos);

				// String

				writeString(this.provincia_versante, dos);

				// String

				writeString(this.nazione_versante, dos);

				// String

				writeString(this.email_versante, dos);

				// String

				writeString(this.sogg_pag_tipo_identificativo_univoco, dos);

				// String

				writeString(this.sogg_pag_codice_identificativo_univoco, dos);

				// String

				writeString(this.anagrafica_pagatore, dos);

				// String

				writeString(this.indirizzo_pagatore, dos);

				// String

				writeString(this.civico_pagatore, dos);

				// String

				writeString(this.cap_pagatore, dos);

				// String

				writeString(this.localita_pagatore, dos);

				// String

				writeString(this.provincia_pagatore, dos);

				// String

				writeString(this.nazione_pagatore, dos);

				// String

				writeString(this.email_pagatore, dos);

				// String

				writeString(this.codice_esito_pagamento, dos);

				// Double

				if (this.importo_totale_pagato == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.importo_totale_pagato);
				}

				// String

				writeString(this.identificativo_univoco_versamento, dos);

				// String

				writeString(this.codice_contesto_pagamento, dos);

				// Double

				if (this.singolo_importo_pagato == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.singolo_importo_pagato);
				}

				// String

				writeString(this.esito_singolo_pagamento, dos);

				// java.util.Date

				writeDate(this.data_esito_singolo_pagamento, dos);

				// String

				writeString(this.identificativo_univoco_riscoss, dos);

				// String

				writeString(this.causale_versamento, dos);

				// String

				writeString(this.dati_specifici_riscossione, dos);

				// String

				writeString(this.tipoDovuto, dos);

				// String

				writeString(this.tipofirma, dos);

				// String

				writeString(this.rt, dos);

				// Integer

				writeInteger(this.indice_dati_singolo_pagamento, dos);

				// Double

				if (this.numRtDatiPagDatiSingPagCommissioniApplicatePsp == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.numRtDatiPagDatiSingPagCommissioniApplicatePsp);
				}

				// String

				writeString(this.codRtDatiPagDatiSingPagAllegatoRicevutaTipo,
						dos);

				// Object

				dos.writeObject(this.blbRtDatiPagDatiSingPagAllegatoRicevutaTest);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iuf=" + iuf);
			sb.append(",num_riga_flusso=" + String.valueOf(num_riga_flusso));
			sb.append(",cod_iud=" + cod_iud);
			sb.append(",cod_iuv=" + cod_iuv);
			sb.append(",versione_oggetto=" + versione_oggetto);
			sb.append(",identificativo_dominio=" + identificativo_dominio);
			sb.append(",identificativo_stazione_richiedente="
					+ identificativo_stazione_richiedente);
			sb.append(",identificativo_messaggio_ricevuta="
					+ identificativo_messaggio_ricevuta);
			sb.append(",data_ora_messaggio_ricevuta="
					+ String.valueOf(data_ora_messaggio_ricevuta));
			sb.append(",riferimento_messaggio_richiesta="
					+ riferimento_messaggio_richiesta);
			sb.append(",riferimento_data_richiesta="
					+ String.valueOf(riferimento_data_richiesta));
			sb.append(",tipo_identificativo_univoco="
					+ tipo_identificativo_univoco);
			sb.append(",codice_identificativo_univoco="
					+ codice_identificativo_univoco);
			sb.append(",denominazione_attestante=" + denominazione_attestante);
			sb.append(",codice_unit_oper_attestante="
					+ codice_unit_oper_attestante);
			sb.append(",denom_unit_oper_attestante="
					+ denom_unit_oper_attestante);
			sb.append(",indirizzo_attestante=" + indirizzo_attestante);
			sb.append(",civico_attestante=" + civico_attestante);
			sb.append(",cap_attestante=" + cap_attestante);
			sb.append(",localita_attestante=" + localita_attestante);
			sb.append(",provincia_attestante=" + provincia_attestante);
			sb.append(",nazione_attestante=" + nazione_attestante);
			sb.append(",ente_benef_tipo_identificativo_univoco="
					+ ente_benef_tipo_identificativo_univoco);
			sb.append(",ente_benef_codice_identificativo_univoco="
					+ ente_benef_codice_identificativo_univoco);
			sb.append(",denominazione_beneficiario="
					+ denominazione_beneficiario);
			sb.append(",codice_unit_oper_beneficiario="
					+ codice_unit_oper_beneficiario);
			sb.append(",denom_unit_oper_beneficiario="
					+ denom_unit_oper_beneficiario);
			sb.append(",indirizzo_beneficiario=" + indirizzo_beneficiario);
			sb.append(",civico_beneficiario=" + civico_beneficiario);
			sb.append(",cap_beneficiario=" + cap_beneficiario);
			sb.append(",localita_beneficiario=" + localita_beneficiario);
			sb.append(",provincia_beneficiario=" + provincia_beneficiario);
			sb.append(",nazione_beneficiario=" + nazione_beneficiario);
			sb.append(",sogg_vers_tipo_identificativo_univoco="
					+ sogg_vers_tipo_identificativo_univoco);
			sb.append(",sogg_vers_codice_identificativo_univoco="
					+ sogg_vers_codice_identificativo_univoco);
			sb.append(",anagrafica_versante=" + anagrafica_versante);
			sb.append(",indirizzo_versante=" + indirizzo_versante);
			sb.append(",civico_versante=" + civico_versante);
			sb.append(",cap_versante=" + cap_versante);
			sb.append(",localita_versante=" + localita_versante);
			sb.append(",provincia_versante=" + provincia_versante);
			sb.append(",nazione_versante=" + nazione_versante);
			sb.append(",email_versante=" + email_versante);
			sb.append(",sogg_pag_tipo_identificativo_univoco="
					+ sogg_pag_tipo_identificativo_univoco);
			sb.append(",sogg_pag_codice_identificativo_univoco="
					+ sogg_pag_codice_identificativo_univoco);
			sb.append(",anagrafica_pagatore=" + anagrafica_pagatore);
			sb.append(",indirizzo_pagatore=" + indirizzo_pagatore);
			sb.append(",civico_pagatore=" + civico_pagatore);
			sb.append(",cap_pagatore=" + cap_pagatore);
			sb.append(",localita_pagatore=" + localita_pagatore);
			sb.append(",provincia_pagatore=" + provincia_pagatore);
			sb.append(",nazione_pagatore=" + nazione_pagatore);
			sb.append(",email_pagatore=" + email_pagatore);
			sb.append(",codice_esito_pagamento=" + codice_esito_pagamento);
			sb.append(",importo_totale_pagato="
					+ String.valueOf(importo_totale_pagato));
			sb.append(",identificativo_univoco_versamento="
					+ identificativo_univoco_versamento);
			sb.append(",codice_contesto_pagamento=" + codice_contesto_pagamento);
			sb.append(",singolo_importo_pagato="
					+ String.valueOf(singolo_importo_pagato));
			sb.append(",esito_singolo_pagamento=" + esito_singolo_pagamento);
			sb.append(",data_esito_singolo_pagamento="
					+ String.valueOf(data_esito_singolo_pagamento));
			sb.append(",identificativo_univoco_riscoss="
					+ identificativo_univoco_riscoss);
			sb.append(",causale_versamento=" + causale_versamento);
			sb.append(",dati_specifici_riscossione="
					+ dati_specifici_riscossione);
			sb.append(",tipoDovuto=" + tipoDovuto);
			sb.append(",tipofirma=" + tipofirma);
			sb.append(",rt=" + rt);
			sb.append(",indice_dati_singolo_pagamento="
					+ String.valueOf(indice_dati_singolo_pagamento));
			sb.append(",numRtDatiPagDatiSingPagCommissioniApplicatePsp="
					+ String.valueOf(numRtDatiPagDatiSingPagCommissioniApplicatePsp));
			sb.append(",codRtDatiPagDatiSingPagAllegatoRicevutaTipo="
					+ codRtDatiPagDatiSingPagAllegatoRicevutaTipo);
			sb.append(",blbRtDatiPagDatiSingPagAllegatoRicevutaTest="
					+ String.valueOf(blbRtDatiPagDatiSingPagAllegatoRicevutaTest));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct implements
			routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];
		static byte[] commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];

		public String iuf;

		public String getIuf() {
			return this.iuf;
		}

		public Integer num_riga_flusso;

		public Integer getNum_riga_flusso() {
			return this.num_riga_flusso;
		}

		public String cod_iud;

		public String getCod_iud() {
			return this.cod_iud;
		}

		public String cod_iuv;

		public String getCod_iuv() {
			return this.cod_iuv;
		}

		public String versione_oggetto;

		public String getVersione_oggetto() {
			return this.versione_oggetto;
		}

		public String identificativo_dominio;

		public String getIdentificativo_dominio() {
			return this.identificativo_dominio;
		}

		public String identificativo_stazione_richiedente;

		public String getIdentificativo_stazione_richiedente() {
			return this.identificativo_stazione_richiedente;
		}

		public String identificativo_messaggio_ricevuta;

		public String getIdentificativo_messaggio_ricevuta() {
			return this.identificativo_messaggio_ricevuta;
		}

		public java.util.Date data_ora_messaggio_ricevuta;

		public java.util.Date getData_ora_messaggio_ricevuta() {
			return this.data_ora_messaggio_ricevuta;
		}

		public String riferimento_messaggio_richiesta;

		public String getRiferimento_messaggio_richiesta() {
			return this.riferimento_messaggio_richiesta;
		}

		public java.util.Date riferimento_data_richiesta;

		public java.util.Date getRiferimento_data_richiesta() {
			return this.riferimento_data_richiesta;
		}

		public String tipo_identificativo_univoco;

		public String getTipo_identificativo_univoco() {
			return this.tipo_identificativo_univoco;
		}

		public String codice_identificativo_univoco;

		public String getCodice_identificativo_univoco() {
			return this.codice_identificativo_univoco;
		}

		public String denominazione_attestante;

		public String getDenominazione_attestante() {
			return this.denominazione_attestante;
		}

		public String codice_unit_oper_attestante;

		public String getCodice_unit_oper_attestante() {
			return this.codice_unit_oper_attestante;
		}

		public String denom_unit_oper_attestante;

		public String getDenom_unit_oper_attestante() {
			return this.denom_unit_oper_attestante;
		}

		public String indirizzo_attestante;

		public String getIndirizzo_attestante() {
			return this.indirizzo_attestante;
		}

		public String civico_attestante;

		public String getCivico_attestante() {
			return this.civico_attestante;
		}

		public String cap_attestante;

		public String getCap_attestante() {
			return this.cap_attestante;
		}

		public String localita_attestante;

		public String getLocalita_attestante() {
			return this.localita_attestante;
		}

		public String provincia_attestante;

		public String getProvincia_attestante() {
			return this.provincia_attestante;
		}

		public String nazione_attestante;

		public String getNazione_attestante() {
			return this.nazione_attestante;
		}

		public String ente_benef_tipo_identificativo_univoco;

		public String getEnte_benef_tipo_identificativo_univoco() {
			return this.ente_benef_tipo_identificativo_univoco;
		}

		public String ente_benef_codice_identificativo_univoco;

		public String getEnte_benef_codice_identificativo_univoco() {
			return this.ente_benef_codice_identificativo_univoco;
		}

		public String denominazione_beneficiario;

		public String getDenominazione_beneficiario() {
			return this.denominazione_beneficiario;
		}

		public String codice_unit_oper_beneficiario;

		public String getCodice_unit_oper_beneficiario() {
			return this.codice_unit_oper_beneficiario;
		}

		public String denom_unit_oper_beneficiario;

		public String getDenom_unit_oper_beneficiario() {
			return this.denom_unit_oper_beneficiario;
		}

		public String indirizzo_beneficiario;

		public String getIndirizzo_beneficiario() {
			return this.indirizzo_beneficiario;
		}

		public String civico_beneficiario;

		public String getCivico_beneficiario() {
			return this.civico_beneficiario;
		}

		public String cap_beneficiario;

		public String getCap_beneficiario() {
			return this.cap_beneficiario;
		}

		public String localita_beneficiario;

		public String getLocalita_beneficiario() {
			return this.localita_beneficiario;
		}

		public String provincia_beneficiario;

		public String getProvincia_beneficiario() {
			return this.provincia_beneficiario;
		}

		public String nazione_beneficiario;

		public String getNazione_beneficiario() {
			return this.nazione_beneficiario;
		}

		public String sogg_vers_tipo_identificativo_univoco;

		public String getSogg_vers_tipo_identificativo_univoco() {
			return this.sogg_vers_tipo_identificativo_univoco;
		}

		public String sogg_vers_codice_identificativo_univoco;

		public String getSogg_vers_codice_identificativo_univoco() {
			return this.sogg_vers_codice_identificativo_univoco;
		}

		public String anagrafica_versante;

		public String getAnagrafica_versante() {
			return this.anagrafica_versante;
		}

		public String indirizzo_versante;

		public String getIndirizzo_versante() {
			return this.indirizzo_versante;
		}

		public String civico_versante;

		public String getCivico_versante() {
			return this.civico_versante;
		}

		public String cap_versante;

		public String getCap_versante() {
			return this.cap_versante;
		}

		public String localita_versante;

		public String getLocalita_versante() {
			return this.localita_versante;
		}

		public String provincia_versante;

		public String getProvincia_versante() {
			return this.provincia_versante;
		}

		public String nazione_versante;

		public String getNazione_versante() {
			return this.nazione_versante;
		}

		public String email_versante;

		public String getEmail_versante() {
			return this.email_versante;
		}

		public String sogg_pag_tipo_identificativo_univoco;

		public String getSogg_pag_tipo_identificativo_univoco() {
			return this.sogg_pag_tipo_identificativo_univoco;
		}

		public String sogg_pag_codice_identificativo_univoco;

		public String getSogg_pag_codice_identificativo_univoco() {
			return this.sogg_pag_codice_identificativo_univoco;
		}

		public String anagrafica_pagatore;

		public String getAnagrafica_pagatore() {
			return this.anagrafica_pagatore;
		}

		public String indirizzo_pagatore;

		public String getIndirizzo_pagatore() {
			return this.indirizzo_pagatore;
		}

		public String civico_pagatore;

		public String getCivico_pagatore() {
			return this.civico_pagatore;
		}

		public String cap_pagatore;

		public String getCap_pagatore() {
			return this.cap_pagatore;
		}

		public String localita_pagatore;

		public String getLocalita_pagatore() {
			return this.localita_pagatore;
		}

		public String provincia_pagatore;

		public String getProvincia_pagatore() {
			return this.provincia_pagatore;
		}

		public String nazione_pagatore;

		public String getNazione_pagatore() {
			return this.nazione_pagatore;
		}

		public String email_pagatore;

		public String getEmail_pagatore() {
			return this.email_pagatore;
		}

		public String codice_esito_pagamento;

		public String getCodice_esito_pagamento() {
			return this.codice_esito_pagamento;
		}

		public Double importo_totale_pagato;

		public Double getImporto_totale_pagato() {
			return this.importo_totale_pagato;
		}

		public String identificativo_univoco_versamento;

		public String getIdentificativo_univoco_versamento() {
			return this.identificativo_univoco_versamento;
		}

		public String codice_contesto_pagamento;

		public String getCodice_contesto_pagamento() {
			return this.codice_contesto_pagamento;
		}

		public Double singolo_importo_pagato;

		public Double getSingolo_importo_pagato() {
			return this.singolo_importo_pagato;
		}

		public String esito_singolo_pagamento;

		public String getEsito_singolo_pagamento() {
			return this.esito_singolo_pagamento;
		}

		public java.util.Date data_esito_singolo_pagamento;

		public java.util.Date getData_esito_singolo_pagamento() {
			return this.data_esito_singolo_pagamento;
		}

		public String identificativo_univoco_riscoss;

		public String getIdentificativo_univoco_riscoss() {
			return this.identificativo_univoco_riscoss;
		}

		public String causale_versamento;

		public String getCausale_versamento() {
			return this.causale_versamento;
		}

		public String dati_specifici_riscossione;

		public String getDati_specifici_riscossione() {
			return this.dati_specifici_riscossione;
		}

		public String tipoDovuto;

		public String getTipoDovuto() {
			return this.tipoDovuto;
		}

		public String tipofirma;

		public String getTipofirma() {
			return this.tipofirma;
		}

		public String rt;

		public String getRt() {
			return this.rt;
		}

		public Integer indice_dati_singolo_pagamento;

		public Integer getIndice_dati_singolo_pagamento() {
			return this.indice_dati_singolo_pagamento;
		}

		public Double numRtDatiPagDatiSingPagCommissioniApplicatePsp;

		public Double getNumRtDatiPagDatiSingPagCommissioniApplicatePsp() {
			return this.numRtDatiPagDatiSingPagCommissioniApplicatePsp;
		}

		public String codRtDatiPagDatiSingPagAllegatoRicevutaTipo;

		public String getCodRtDatiPagDatiSingPagAllegatoRicevutaTipo() {
			return this.codRtDatiPagDatiSingPagAllegatoRicevutaTipo;
		}

		public Object blbRtDatiPagDatiSingPagAllegatoRicevutaTest;

		public Object getBlbRtDatiPagDatiSingPagAllegatoRicevutaTest() {
			return this.blbRtDatiPagDatiSingPagAllegatoRicevutaTest;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length) {
					if (length < 1024
							&& commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length == 0) {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[1024];
					} else {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length);
				strReturn = new String(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1) {

				try {

					int length = 0;

					this.iuf = readString(dis);

					this.num_riga_flusso = readInteger(dis);

					this.cod_iud = readString(dis);

					this.cod_iuv = readString(dis);

					this.versione_oggetto = readString(dis);

					this.identificativo_dominio = readString(dis);

					this.identificativo_stazione_richiedente = readString(dis);

					this.identificativo_messaggio_ricevuta = readString(dis);

					this.data_ora_messaggio_ricevuta = readDate(dis);

					this.riferimento_messaggio_richiesta = readString(dis);

					this.riferimento_data_richiesta = readDate(dis);

					this.tipo_identificativo_univoco = readString(dis);

					this.codice_identificativo_univoco = readString(dis);

					this.denominazione_attestante = readString(dis);

					this.codice_unit_oper_attestante = readString(dis);

					this.denom_unit_oper_attestante = readString(dis);

					this.indirizzo_attestante = readString(dis);

					this.civico_attestante = readString(dis);

					this.cap_attestante = readString(dis);

					this.localita_attestante = readString(dis);

					this.provincia_attestante = readString(dis);

					this.nazione_attestante = readString(dis);

					this.ente_benef_tipo_identificativo_univoco = readString(dis);

					this.ente_benef_codice_identificativo_univoco = readString(dis);

					this.denominazione_beneficiario = readString(dis);

					this.codice_unit_oper_beneficiario = readString(dis);

					this.denom_unit_oper_beneficiario = readString(dis);

					this.indirizzo_beneficiario = readString(dis);

					this.civico_beneficiario = readString(dis);

					this.cap_beneficiario = readString(dis);

					this.localita_beneficiario = readString(dis);

					this.provincia_beneficiario = readString(dis);

					this.nazione_beneficiario = readString(dis);

					this.sogg_vers_tipo_identificativo_univoco = readString(dis);

					this.sogg_vers_codice_identificativo_univoco = readString(dis);

					this.anagrafica_versante = readString(dis);

					this.indirizzo_versante = readString(dis);

					this.civico_versante = readString(dis);

					this.cap_versante = readString(dis);

					this.localita_versante = readString(dis);

					this.provincia_versante = readString(dis);

					this.nazione_versante = readString(dis);

					this.email_versante = readString(dis);

					this.sogg_pag_tipo_identificativo_univoco = readString(dis);

					this.sogg_pag_codice_identificativo_univoco = readString(dis);

					this.anagrafica_pagatore = readString(dis);

					this.indirizzo_pagatore = readString(dis);

					this.civico_pagatore = readString(dis);

					this.cap_pagatore = readString(dis);

					this.localita_pagatore = readString(dis);

					this.provincia_pagatore = readString(dis);

					this.nazione_pagatore = readString(dis);

					this.email_pagatore = readString(dis);

					this.codice_esito_pagamento = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.importo_totale_pagato = null;
					} else {
						this.importo_totale_pagato = dis.readDouble();
					}

					this.identificativo_univoco_versamento = readString(dis);

					this.codice_contesto_pagamento = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.singolo_importo_pagato = null;
					} else {
						this.singolo_importo_pagato = dis.readDouble();
					}

					this.esito_singolo_pagamento = readString(dis);

					this.data_esito_singolo_pagamento = readDate(dis);

					this.identificativo_univoco_riscoss = readString(dis);

					this.causale_versamento = readString(dis);

					this.dati_specifici_riscossione = readString(dis);

					this.tipoDovuto = readString(dis);

					this.tipofirma = readString(dis);

					this.rt = readString(dis);

					this.indice_dati_singolo_pagamento = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.numRtDatiPagDatiSingPagCommissioniApplicatePsp = null;
					} else {
						this.numRtDatiPagDatiSingPagCommissioniApplicatePsp = dis
								.readDouble();
					}

					this.codRtDatiPagDatiSingPagAllegatoRicevutaTipo = readString(dis);

					this.blbRtDatiPagDatiSingPagAllegatoRicevutaTest = (Object) dis
							.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.iuf, dos);

				// Integer

				writeInteger(this.num_riga_flusso, dos);

				// String

				writeString(this.cod_iud, dos);

				// String

				writeString(this.cod_iuv, dos);

				// String

				writeString(this.versione_oggetto, dos);

				// String

				writeString(this.identificativo_dominio, dos);

				// String

				writeString(this.identificativo_stazione_richiedente, dos);

				// String

				writeString(this.identificativo_messaggio_ricevuta, dos);

				// java.util.Date

				writeDate(this.data_ora_messaggio_ricevuta, dos);

				// String

				writeString(this.riferimento_messaggio_richiesta, dos);

				// java.util.Date

				writeDate(this.riferimento_data_richiesta, dos);

				// String

				writeString(this.tipo_identificativo_univoco, dos);

				// String

				writeString(this.codice_identificativo_univoco, dos);

				// String

				writeString(this.denominazione_attestante, dos);

				// String

				writeString(this.codice_unit_oper_attestante, dos);

				// String

				writeString(this.denom_unit_oper_attestante, dos);

				// String

				writeString(this.indirizzo_attestante, dos);

				// String

				writeString(this.civico_attestante, dos);

				// String

				writeString(this.cap_attestante, dos);

				// String

				writeString(this.localita_attestante, dos);

				// String

				writeString(this.provincia_attestante, dos);

				// String

				writeString(this.nazione_attestante, dos);

				// String

				writeString(this.ente_benef_tipo_identificativo_univoco, dos);

				// String

				writeString(this.ente_benef_codice_identificativo_univoco, dos);

				// String

				writeString(this.denominazione_beneficiario, dos);

				// String

				writeString(this.codice_unit_oper_beneficiario, dos);

				// String

				writeString(this.denom_unit_oper_beneficiario, dos);

				// String

				writeString(this.indirizzo_beneficiario, dos);

				// String

				writeString(this.civico_beneficiario, dos);

				// String

				writeString(this.cap_beneficiario, dos);

				// String

				writeString(this.localita_beneficiario, dos);

				// String

				writeString(this.provincia_beneficiario, dos);

				// String

				writeString(this.nazione_beneficiario, dos);

				// String

				writeString(this.sogg_vers_tipo_identificativo_univoco, dos);

				// String

				writeString(this.sogg_vers_codice_identificativo_univoco, dos);

				// String

				writeString(this.anagrafica_versante, dos);

				// String

				writeString(this.indirizzo_versante, dos);

				// String

				writeString(this.civico_versante, dos);

				// String

				writeString(this.cap_versante, dos);

				// String

				writeString(this.localita_versante, dos);

				// String

				writeString(this.provincia_versante, dos);

				// String

				writeString(this.nazione_versante, dos);

				// String

				writeString(this.email_versante, dos);

				// String

				writeString(this.sogg_pag_tipo_identificativo_univoco, dos);

				// String

				writeString(this.sogg_pag_codice_identificativo_univoco, dos);

				// String

				writeString(this.anagrafica_pagatore, dos);

				// String

				writeString(this.indirizzo_pagatore, dos);

				// String

				writeString(this.civico_pagatore, dos);

				// String

				writeString(this.cap_pagatore, dos);

				// String

				writeString(this.localita_pagatore, dos);

				// String

				writeString(this.provincia_pagatore, dos);

				// String

				writeString(this.nazione_pagatore, dos);

				// String

				writeString(this.email_pagatore, dos);

				// String

				writeString(this.codice_esito_pagamento, dos);

				// Double

				if (this.importo_totale_pagato == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.importo_totale_pagato);
				}

				// String

				writeString(this.identificativo_univoco_versamento, dos);

				// String

				writeString(this.codice_contesto_pagamento, dos);

				// Double

				if (this.singolo_importo_pagato == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.singolo_importo_pagato);
				}

				// String

				writeString(this.esito_singolo_pagamento, dos);

				// java.util.Date

				writeDate(this.data_esito_singolo_pagamento, dos);

				// String

				writeString(this.identificativo_univoco_riscoss, dos);

				// String

				writeString(this.causale_versamento, dos);

				// String

				writeString(this.dati_specifici_riscossione, dos);

				// String

				writeString(this.tipoDovuto, dos);

				// String

				writeString(this.tipofirma, dos);

				// String

				writeString(this.rt, dos);

				// Integer

				writeInteger(this.indice_dati_singolo_pagamento, dos);

				// Double

				if (this.numRtDatiPagDatiSingPagCommissioniApplicatePsp == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.numRtDatiPagDatiSingPagCommissioniApplicatePsp);
				}

				// String

				writeString(this.codRtDatiPagDatiSingPagAllegatoRicevutaTipo,
						dos);

				// Object

				dos.writeObject(this.blbRtDatiPagDatiSingPagAllegatoRicevutaTest);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("iuf=" + iuf);
			sb.append(",num_riga_flusso=" + String.valueOf(num_riga_flusso));
			sb.append(",cod_iud=" + cod_iud);
			sb.append(",cod_iuv=" + cod_iuv);
			sb.append(",versione_oggetto=" + versione_oggetto);
			sb.append(",identificativo_dominio=" + identificativo_dominio);
			sb.append(",identificativo_stazione_richiedente="
					+ identificativo_stazione_richiedente);
			sb.append(",identificativo_messaggio_ricevuta="
					+ identificativo_messaggio_ricevuta);
			sb.append(",data_ora_messaggio_ricevuta="
					+ String.valueOf(data_ora_messaggio_ricevuta));
			sb.append(",riferimento_messaggio_richiesta="
					+ riferimento_messaggio_richiesta);
			sb.append(",riferimento_data_richiesta="
					+ String.valueOf(riferimento_data_richiesta));
			sb.append(",tipo_identificativo_univoco="
					+ tipo_identificativo_univoco);
			sb.append(",codice_identificativo_univoco="
					+ codice_identificativo_univoco);
			sb.append(",denominazione_attestante=" + denominazione_attestante);
			sb.append(",codice_unit_oper_attestante="
					+ codice_unit_oper_attestante);
			sb.append(",denom_unit_oper_attestante="
					+ denom_unit_oper_attestante);
			sb.append(",indirizzo_attestante=" + indirizzo_attestante);
			sb.append(",civico_attestante=" + civico_attestante);
			sb.append(",cap_attestante=" + cap_attestante);
			sb.append(",localita_attestante=" + localita_attestante);
			sb.append(",provincia_attestante=" + provincia_attestante);
			sb.append(",nazione_attestante=" + nazione_attestante);
			sb.append(",ente_benef_tipo_identificativo_univoco="
					+ ente_benef_tipo_identificativo_univoco);
			sb.append(",ente_benef_codice_identificativo_univoco="
					+ ente_benef_codice_identificativo_univoco);
			sb.append(",denominazione_beneficiario="
					+ denominazione_beneficiario);
			sb.append(",codice_unit_oper_beneficiario="
					+ codice_unit_oper_beneficiario);
			sb.append(",denom_unit_oper_beneficiario="
					+ denom_unit_oper_beneficiario);
			sb.append(",indirizzo_beneficiario=" + indirizzo_beneficiario);
			sb.append(",civico_beneficiario=" + civico_beneficiario);
			sb.append(",cap_beneficiario=" + cap_beneficiario);
			sb.append(",localita_beneficiario=" + localita_beneficiario);
			sb.append(",provincia_beneficiario=" + provincia_beneficiario);
			sb.append(",nazione_beneficiario=" + nazione_beneficiario);
			sb.append(",sogg_vers_tipo_identificativo_univoco="
					+ sogg_vers_tipo_identificativo_univoco);
			sb.append(",sogg_vers_codice_identificativo_univoco="
					+ sogg_vers_codice_identificativo_univoco);
			sb.append(",anagrafica_versante=" + anagrafica_versante);
			sb.append(",indirizzo_versante=" + indirizzo_versante);
			sb.append(",civico_versante=" + civico_versante);
			sb.append(",cap_versante=" + cap_versante);
			sb.append(",localita_versante=" + localita_versante);
			sb.append(",provincia_versante=" + provincia_versante);
			sb.append(",nazione_versante=" + nazione_versante);
			sb.append(",email_versante=" + email_versante);
			sb.append(",sogg_pag_tipo_identificativo_univoco="
					+ sogg_pag_tipo_identificativo_univoco);
			sb.append(",sogg_pag_codice_identificativo_univoco="
					+ sogg_pag_codice_identificativo_univoco);
			sb.append(",anagrafica_pagatore=" + anagrafica_pagatore);
			sb.append(",indirizzo_pagatore=" + indirizzo_pagatore);
			sb.append(",civico_pagatore=" + civico_pagatore);
			sb.append(",cap_pagatore=" + cap_pagatore);
			sb.append(",localita_pagatore=" + localita_pagatore);
			sb.append(",provincia_pagatore=" + provincia_pagatore);
			sb.append(",nazione_pagatore=" + nazione_pagatore);
			sb.append(",email_pagatore=" + email_pagatore);
			sb.append(",codice_esito_pagamento=" + codice_esito_pagamento);
			sb.append(",importo_totale_pagato="
					+ String.valueOf(importo_totale_pagato));
			sb.append(",identificativo_univoco_versamento="
					+ identificativo_univoco_versamento);
			sb.append(",codice_contesto_pagamento=" + codice_contesto_pagamento);
			sb.append(",singolo_importo_pagato="
					+ String.valueOf(singolo_importo_pagato));
			sb.append(",esito_singolo_pagamento=" + esito_singolo_pagamento);
			sb.append(",data_esito_singolo_pagamento="
					+ String.valueOf(data_esito_singolo_pagamento));
			sb.append(",identificativo_univoco_riscoss="
					+ identificativo_univoco_riscoss);
			sb.append(",causale_versamento=" + causale_versamento);
			sb.append(",dati_specifici_riscossione="
					+ dati_specifici_riscossione);
			sb.append(",tipoDovuto=" + tipoDovuto);
			sb.append(",tipofirma=" + tipofirma);
			sb.append(",rt=" + rt);
			sb.append(",indice_dati_singolo_pagamento="
					+ String.valueOf(indice_dati_singolo_pagamento));
			sb.append(",numRtDatiPagDatiSingPagCommissioniApplicatePsp="
					+ String.valueOf(numRtDatiPagDatiSingPagCommissioniApplicatePsp));
			sb.append(",codRtDatiPagDatiSingPagAllegatoRicevutaTipo="
					+ codRtDatiPagDatiSingPagAllegatoRicevutaTipo);
			sb.append(",blbRtDatiPagDatiSingPagAllegatoRicevutaTest="
					+ String.valueOf(blbRtDatiPagDatiSingPagAllegatoRicevutaTest));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				MAPPING_EXPORTStruct MAPPING_EXPORT = new MAPPING_EXPORTStruct();
				ERROR_LOAD_CFStruct ERROR_LOAD_CF = new ERROR_LOAD_CFStruct();

				/**
				 * [tPostgresqlOutput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_1", false);
				start_Hash.put("tPostgresqlOutput_1",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlOutput_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlOutput_1";

				int tos_count_tPostgresqlOutput_1 = 0;

				String dbschema_tPostgresqlOutput_1 = null;
				dbschema_tPostgresqlOutput_1 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_1 = null;
				if (dbschema_tPostgresqlOutput_1 == null
						|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
					tableName_tPostgresqlOutput_1 = "mygov_flusso_export";
				} else {
					tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1
							+ "\".\"" + "mygov_flusso_export";
				}

				int updateKeyCount_tPostgresqlOutput_1 = 4;
				if (updateKeyCount_tPostgresqlOutput_1 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_1 = 0;
				int nb_line_update_tPostgresqlOutput_1 = 0;
				int nb_line_inserted_tPostgresqlOutput_1 = 0;
				int nb_line_deleted_tPostgresqlOutput_1 = 0;
				int nb_line_rejected_tPostgresqlOutput_1 = 0;

				int deletedCount_tPostgresqlOutput_1 = 0;
				int updatedCount_tPostgresqlOutput_1 = 0;
				int insertedCount_tPostgresqlOutput_1 = 0;
				int rejectedCount_tPostgresqlOutput_1 = 0;

				boolean whetherReject_tPostgresqlOutput_1 = false;

				java.sql.Connection conn_tPostgresqlOutput_1 = null;
				String dbUser_tPostgresqlOutput_1 = null;

				conn_tPostgresqlOutput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int count_tPostgresqlOutput_1 = 0;
				String update_tPostgresqlOutput_1 = "UPDATE \""
						+ tableName_tPostgresqlOutput_1
						+ "\" SET \"version\" = ?,\"dt_creazione\" = ?,\"dt_ultima_modifica\" = ?,\"mygov_manage_flusso_id\" = ?,\"de_nome_flusso\" = ?,\"num_riga_flusso\" = ?,\"cod_iud\" = ?,\"de_e_versione_oggetto\" = ?,\"cod_e_dom_id_dominio\" = ?,\"cod_e_dom_id_stazione_richiedente\" = ?,\"cod_e_id_messaggio_ricevuta\" = ?,\"dt_e_data_ora_messaggio_ricevuta\" = ?,\"cod_e_riferimento_messaggio_richiesta\" = ?,\"dt_e_riferimento_data_richiesta\" = ?,\"cod_e_istit_att_id_univ_att_tipo_id_univoco\" = ?,\"cod_e_istit_att_id_univ_att_codice_id_univoco\" = ?,\"de_e_istit_att_denominazione_attestante\" = ?,\"cod_e_istit_att_codice_unit_oper_attestante\" = ?,\"de_e_istit_att_denom_unit_oper_attestante\" = ?,\"de_e_istit_att_indirizzo_attestante\" = ?,\"de_e_istit_att_civico_attestante\" = ?,\"cod_e_istit_att_cap_attestante\" = ?,\"de_e_istit_att_localita_attestante\" = ?,\"de_e_istit_att_provincia_attestante\" = ?,\"cod_e_istit_att_nazione_attestante\" = ?,\"cod_e_ente_benef_id_univ_benef_tipo_id_univoco\" = ?,\"cod_e_ente_benef_id_univ_benef_codice_id_univoco\" = ?,\"de_e_ente_benef_denominazione_beneficiario\" = ?,\"cod_e_ente_benef_codice_unit_oper_beneficiario\" = ?,\"de_e_ente_benef_denom_unit_oper_beneficiario\" = ?,\"de_e_ente_benef_indirizzo_beneficiario\" = ?,\"de_e_ente_benef_civico_beneficiario\" = ?,\"cod_e_ente_benef_cap_beneficiario\" = ?,\"de_e_ente_benef_localita_beneficiario\" = ?,\"de_e_ente_benef_provincia_beneficiario\" = ?,\"cod_e_ente_benef_nazione_beneficiario\" = ?,\"cod_e_sogg_vers_id_univ_vers_tipo_id_univoco\" = ?,\"cod_e_sogg_vers_id_univ_vers_codice_id_univoco\" = ?,\"cod_e_sogg_vers_anagrafica_versante\" = ?,\"de_e_sogg_vers_indirizzo_versante\" = ?,\"de_e_sogg_vers_civico_versante\" = ?,\"cod_e_sogg_vers_cap_versante\" = ?,\"de_e_sogg_vers_localita_versante\" = ?,\"de_e_sogg_vers_provincia_versante\" = ?,\"cod_e_sogg_vers_nazione_versante\" = ?,\"de_e_sogg_vers_email_versante\" = ?,\"cod_e_sogg_pag_id_univ_pag_tipo_id_univoco\" = ?,\"cod_e_sogg_pag_id_univ_pag_codice_id_univoco\" = ?,\"cod_e_sogg_pag_anagrafica_pagatore\" = ?,\"de_e_sogg_pag_indirizzo_pagatore\" = ?,\"de_e_sogg_pag_civico_pagatore\" = ?,\"cod_e_sogg_pag_cap_pagatore\" = ?,\"de_e_sogg_pag_localita_pagatore\" = ?,\"de_e_sogg_pag_provincia_pagatore\" = ?,\"cod_e_sogg_pag_nazione_pagatore\" = ?,\"de_e_sogg_pag_email_pagatore\" = ?,\"cod_e_dati_pag_codice_esito_pagamento\" = ?,\"num_e_dati_pag_importo_totale_pagato\" = ?,\"cod_e_dati_pag_id_univoco_versamento\" = ?,\"cod_e_dati_pag_codice_contesto_pagamento\" = ?,\"num_e_dati_pag_dati_sing_pag_singolo_importo_pagato\" = ?,\"de_e_dati_pag_dati_sing_pag_esito_singolo_pagamento\" = ?,\"dt_e_dati_pag_dati_sing_pag_data_esito_singolo_pagamento\" = ?,\"de_e_dati_pag_dati_sing_pag_causale_versamento\" = ?,\"de_e_dati_pag_dati_sing_pag_dati_specifici_riscossione\" = ?,\"cod_tipo_dovuto\" = ?,\"dt_acquisizione\" = ?,\"blb_rt_payload\" = ? WHERE \"mygov_ente_id\" = ? AND \"cod_rp_silinviarp_id_univoco_versamento\" = ? AND \"cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss\" = ? AND \"indice_dati_singolo_pagamento\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(update_tPostgresqlOutput_1);
				String insert_tPostgresqlOutput_1 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_1
						+ "\" (\"version\",\"dt_creazione\",\"dt_ultima_modifica\",\"mygov_ente_id\",\"mygov_manage_flusso_id\",\"de_nome_flusso\",\"num_riga_flusso\",\"cod_iud\",\"cod_rp_silinviarp_id_univoco_versamento\",\"de_e_versione_oggetto\",\"cod_e_dom_id_dominio\",\"cod_e_dom_id_stazione_richiedente\",\"cod_e_id_messaggio_ricevuta\",\"dt_e_data_ora_messaggio_ricevuta\",\"cod_e_riferimento_messaggio_richiesta\",\"dt_e_riferimento_data_richiesta\",\"cod_e_istit_att_id_univ_att_tipo_id_univoco\",\"cod_e_istit_att_id_univ_att_codice_id_univoco\",\"de_e_istit_att_denominazione_attestante\",\"cod_e_istit_att_codice_unit_oper_attestante\",\"de_e_istit_att_denom_unit_oper_attestante\",\"de_e_istit_att_indirizzo_attestante\",\"de_e_istit_att_civico_attestante\",\"cod_e_istit_att_cap_attestante\",\"de_e_istit_att_localita_attestante\",\"de_e_istit_att_provincia_attestante\",\"cod_e_istit_att_nazione_attestante\",\"cod_e_ente_benef_id_univ_benef_tipo_id_univoco\",\"cod_e_ente_benef_id_univ_benef_codice_id_univoco\",\"de_e_ente_benef_denominazione_beneficiario\",\"cod_e_ente_benef_codice_unit_oper_beneficiario\",\"de_e_ente_benef_denom_unit_oper_beneficiario\",\"de_e_ente_benef_indirizzo_beneficiario\",\"de_e_ente_benef_civico_beneficiario\",\"cod_e_ente_benef_cap_beneficiario\",\"de_e_ente_benef_localita_beneficiario\",\"de_e_ente_benef_provincia_beneficiario\",\"cod_e_ente_benef_nazione_beneficiario\",\"cod_e_sogg_vers_id_univ_vers_tipo_id_univoco\",\"cod_e_sogg_vers_id_univ_vers_codice_id_univoco\",\"cod_e_sogg_vers_anagrafica_versante\",\"de_e_sogg_vers_indirizzo_versante\",\"de_e_sogg_vers_civico_versante\",\"cod_e_sogg_vers_cap_versante\",\"de_e_sogg_vers_localita_versante\",\"de_e_sogg_vers_provincia_versante\",\"cod_e_sogg_vers_nazione_versante\",\"de_e_sogg_vers_email_versante\",\"cod_e_sogg_pag_id_univ_pag_tipo_id_univoco\",\"cod_e_sogg_pag_id_univ_pag_codice_id_univoco\",\"cod_e_sogg_pag_anagrafica_pagatore\",\"de_e_sogg_pag_indirizzo_pagatore\",\"de_e_sogg_pag_civico_pagatore\",\"cod_e_sogg_pag_cap_pagatore\",\"de_e_sogg_pag_localita_pagatore\",\"de_e_sogg_pag_provincia_pagatore\",\"cod_e_sogg_pag_nazione_pagatore\",\"de_e_sogg_pag_email_pagatore\",\"cod_e_dati_pag_codice_esito_pagamento\",\"num_e_dati_pag_importo_totale_pagato\",\"cod_e_dati_pag_id_univoco_versamento\",\"cod_e_dati_pag_codice_contesto_pagamento\",\"num_e_dati_pag_dati_sing_pag_singolo_importo_pagato\",\"de_e_dati_pag_dati_sing_pag_esito_singolo_pagamento\",\"dt_e_dati_pag_dati_sing_pag_data_esito_singolo_pagamento\",\"cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss\",\"de_e_dati_pag_dati_sing_pag_causale_versamento\",\"de_e_dati_pag_dati_sing_pag_dati_specifici_riscossione\",\"cod_tipo_dovuto\",\"dt_acquisizione\",\"indice_dati_singolo_pagamento\",\"blb_rt_payload\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(insert_tPostgresqlOutput_1);

				/**
				 * [tPostgresqlOutput_1 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJavaRow_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tMap_3");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				MAPPING_EXPORTStruct MAPPING_EXPORT_tmp = new MAPPING_EXPORTStruct();
				ERROR_LOAD_CFStruct ERROR_LOAD_CF_tmp = new ERROR_LOAD_CFStruct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tFileInputDelimited_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by
				// 'context.fs' or 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ";")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by
				// 'context.rs' or 'globalMap.get("rs")'.
				if (((String) "\r\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\r\n")
							.toCharArray();
				} else {
					throw new IllegalArgumentException(
							"Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /**
				 * Start field
				 * tFileInputDelimited_1:FILENAME
				 */
				context.directory_root_enti + "/" + context.cod_ipa_ente
						+ context.de_percorso_file + "/" + context.de_nome_file/**
				 * 
				 * End field tFileInputDelimited_1:FILENAME
				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					java.util.zip.ZipInputStream zis_tFileInputDelimited_1 = null;
					try {
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
							zis_tFileInputDelimited_1 = new java.util.zip.ZipInputStream(
									new java.io.BufferedInputStream(
											(java.io.InputStream) filename_tFileInputDelimited_1));
						} else {
							zis_tFileInputDelimited_1 = new java.util.zip.ZipInputStream(
									new java.io.BufferedInputStream(
											new java.io.FileInputStream(
													String.valueOf(filename_tFileInputDelimited_1))));
						}
					} catch (java.lang.Exception e) {

						throw e;

					}
					java.util.zip.ZipEntry entry_tFileInputDelimited_1 = null;

					while (true) {
						try {
							entry_tFileInputDelimited_1 = zis_tFileInputDelimited_1
									.getNextEntry();
						} catch (java.lang.Exception e) {

							throw e;

						}
						if (entry_tFileInputDelimited_1 == null) {
							break;
						}
						if (entry_tFileInputDelimited_1.isDirectory()) { // directory
							continue;
						}
						String[] rowtFileInputDelimited_1 = null;
						int currentLinetFileInputDelimited_1 = 0;
						int outputLinetFileInputDelimited_1 = 0;
						try {// TD110 begin
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									zis_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0],
									"UTF-8");

							csvReadertFileInputDelimited_1
									.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1
										.setLineEnd(""
												+ rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1.setEscapeChar('\\');

							if (footer_tFileInputDelimited_1 > 0) {
								for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
									csvReadertFileInputDelimited_1.readNext();
								}
								csvReadertFileInputDelimited_1
										.setSkipEmptyRecords(true);
								while (csvReadertFileInputDelimited_1
										.readNext()) {

									rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
											.getValues();
									if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
											.equals(rowtFileInputDelimited_1[0]))) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'

										totalLinetFileInputDelimited_1++;

									}

								}
								int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
										- footer_tFileInputDelimited_1 < 0 ? 0
										: totalLinetFileInputDelimited_1
												- footer_tFileInputDelimited_1;
								if (lastLinetFileInputDelimited_1 > 0) {
									lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
											: lastLineTemptFileInputDelimited_1;
								} else {
									lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
								}

								csvReadertFileInputDelimited_1.close();
								if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
									csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
											(java.io.InputStream) filename_tFileInputDelimited_1,
											fieldSeparator_tFileInputDelimited_1[0],
											"UTF-8");
								} else {
									csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
											new java.io.BufferedReader(
													new java.io.InputStreamReader(
															new java.io.FileInputStream(
																	String.valueOf(filename_tFileInputDelimited_1)),
															"UTF-8")),
											fieldSeparator_tFileInputDelimited_1[0]);
								}
								csvReadertFileInputDelimited_1
										.setTrimWhitespace(false);
								if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
										&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
									csvReadertFileInputDelimited_1
											.setLineEnd(""
													+ rowSeparator_tFileInputDelimited_1[0]);

								csvReadertFileInputDelimited_1
										.setQuoteChar('"');

								csvReadertFileInputDelimited_1
										.setEscapeChar('\\');

							}

							if (limittFileInputDelimited_1 != 0) {
								for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
									csvReadertFileInputDelimited_1.readNext();
								}
							}
							csvReadertFileInputDelimited_1
									.setSkipEmptyRecords(true);

						} catch (java.lang.Exception e) {

							throw e;

						}// TD110 end

						while (limittFileInputDelimited_1 != 0
								&& csvReadertFileInputDelimited_1 != null
								&& csvReadertFileInputDelimited_1.readNext()) {

							rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1
									.getValues();

							if (rowtFileInputDelimited_1.length == 1
									&& ("\015")
											.equals(rowtFileInputDelimited_1[0])) {// empty
																					// line
																					// when
																					// row
																					// separator
																					// is
																					// '\n'
								continue;
							}

							currentLinetFileInputDelimited_1++;

							if (lastLinetFileInputDelimited_1 > -1
									&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
								break;
							}
							outputLinetFileInputDelimited_1++;
							if (limittFileInputDelimited_1 > 0
									&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
								break;
							}

							row1 = null;

							boolean whetherReject_tFileInputDelimited_1 = false;
							row1 = new row1Struct();
							try {

								char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
								// support passing value (property: Field
								// Separator) by 'context.fs' or
								// 'globalMap.get("fs")'.
								if (((String) ";").length() > 0) {
									fieldSeparator_tFileInputDelimited_1_ListType = ((String) ";")
											.toCharArray();
								} else {
									throw new IllegalArgumentException(
											"Field Separator must be assigned a char.");
								}
								if (rowtFileInputDelimited_1.length == 1
										&& ("\015")
												.equals(rowtFileInputDelimited_1[0])) {// empty
																						// line
																						// when
																						// row
																						// separator
																						// is
																						// '\n'

									row1.iuf = null;

									row1.num_riga_flusso = null;

									row1.cod_iud = null;

									row1.cod_iuv = null;

									row1.versione_oggetto = null;

									row1.identificativo_dominio = null;

									row1.identificativo_stazione_richiedente = null;

									row1.identificativo_messaggio_ricevuta = null;

									row1.data_ora_messaggio_ricevuta = null;

									row1.riferimento_messaggio_richiesta = null;

									row1.riferimento_data_richiesta = null;

									row1.tipo_identificativo_univoco = null;

									row1.codice_identificativo_univoco = null;

									row1.denominazione_attestante = null;

									row1.codice_unit_oper_attestante = null;

									row1.denom_unit_oper_attestante = null;

									row1.indirizzo_attestante = null;

									row1.civico_attestante = null;

									row1.cap_attestante = null;

									row1.localita_attestante = null;

									row1.provincia_attestante = null;

									row1.nazione_attestante = null;

									row1.ente_benef_tipo_identificativo_univoco = null;

									row1.ente_benef_codice_identificativo_univoco = null;

									row1.denominazione_beneficiario = null;

									row1.codice_unit_oper_beneficiario = null;

									row1.denom_unit_oper_beneficiario = null;

									row1.indirizzo_beneficiario = null;

									row1.civico_beneficiario = null;

									row1.cap_beneficiario = null;

									row1.localita_beneficiario = null;

									row1.provincia_beneficiario = null;

									row1.nazione_beneficiario = null;

									row1.sogg_vers_tipo_identificativo_univoco = null;

									row1.sogg_vers_codice_identificativo_univoco = null;

									row1.anagrafica_versante = null;

									row1.indirizzo_versante = null;

									row1.civico_versante = null;

									row1.cap_versante = null;

									row1.localita_versante = null;

									row1.provincia_versante = null;

									row1.nazione_versante = null;

									row1.email_versante = null;

									row1.sogg_pag_tipo_identificativo_univoco = null;

									row1.sogg_pag_codice_identificativo_univoco = null;

									row1.anagrafica_pagatore = null;

									row1.indirizzo_pagatore = null;

									row1.civico_pagatore = null;

									row1.cap_pagatore = null;

									row1.localita_pagatore = null;

									row1.provincia_pagatore = null;

									row1.nazione_pagatore = null;

									row1.email_pagatore = null;

									row1.codice_esito_pagamento = null;

									row1.importo_totale_pagato = null;

									row1.identificativo_univoco_versamento = null;

									row1.codice_contesto_pagamento = null;

									row1.singolo_importo_pagato = null;

									row1.esito_singolo_pagamento = null;

									row1.data_esito_singolo_pagamento = null;

									row1.identificativo_univoco_riscoss = null;

									row1.causale_versamento = null;

									row1.dati_specifici_riscossione = null;

									row1.tipoDovuto = null;

									row1.tipofirma = null;

									row1.rt = null;

									row1.indice_dati_singolo_pagamento = null;

									row1.numRtDatiPagDatiSingPagCommissioniApplicatePsp = null;

									row1.codRtDatiPagDatiSingPagAllegatoRicevutaTipo = null;

									row1.blbRtDatiPagDatiSingPagAllegatoRicevutaTest = null;

								} else {

									for (int i_tFileInputDelimited_1 = 0; i_tFileInputDelimited_1 < rowtFileInputDelimited_1.length; i_tFileInputDelimited_1++) {
										rowtFileInputDelimited_1[i_tFileInputDelimited_1] = rowtFileInputDelimited_1[i_tFileInputDelimited_1]
												.trim();
									}

									int columnIndexWithD_tFileInputDelimited_1 = 0; // Column
																					// Index

									columnIndexWithD_tFileInputDelimited_1 = 0;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.iuf = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.iuf = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 1;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
												.length() > 0) {

											row1.num_riga_flusso = ParserUtils
													.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} else {

											row1.num_riga_flusso = null;

										}

									} else {
										row1.num_riga_flusso = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 2;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.cod_iud = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.cod_iud = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 3;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.cod_iuv = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.cod_iuv = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 4;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.versione_oggetto = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.versione_oggetto = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 5;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.identificativo_dominio = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.identificativo_dominio = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 6;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.identificativo_stazione_richiedente = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.identificativo_stazione_richiedente = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 7;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.identificativo_messaggio_ricevuta = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.identificativo_messaggio_ricevuta = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 8;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
												.length() > 0) {

											row1.data_ora_messaggio_ricevuta = ParserUtils
													.parseTo_Date(
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															"yyyy-MM-dd'T'HH:mm:ss",
															false);

										} else {

											row1.data_ora_messaggio_ricevuta = null;

										}

									} else {
										row1.data_ora_messaggio_ricevuta = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 9;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.riferimento_messaggio_richiesta = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.riferimento_messaggio_richiesta = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 10;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
												.length() > 0) {

											row1.riferimento_data_richiesta = ParserUtils
													.parseTo_Date(
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															"yyyy-MM-dd", false);

										} else {

											row1.riferimento_data_richiesta = null;

										}

									} else {
										row1.riferimento_data_richiesta = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 11;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.tipo_identificativo_univoco = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.tipo_identificativo_univoco = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 12;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.codice_identificativo_univoco = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.codice_identificativo_univoco = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 13;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.denominazione_attestante = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.denominazione_attestante = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 14;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.codice_unit_oper_attestante = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.codice_unit_oper_attestante = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 15;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.denom_unit_oper_attestante = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.denom_unit_oper_attestante = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 16;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.indirizzo_attestante = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.indirizzo_attestante = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 17;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.civico_attestante = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.civico_attestante = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 18;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.cap_attestante = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.cap_attestante = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 19;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.localita_attestante = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.localita_attestante = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 20;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.provincia_attestante = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.provincia_attestante = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 21;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.nazione_attestante = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.nazione_attestante = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 22;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.ente_benef_tipo_identificativo_univoco = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.ente_benef_tipo_identificativo_univoco = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 23;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.ente_benef_codice_identificativo_univoco = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.ente_benef_codice_identificativo_univoco = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 24;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.denominazione_beneficiario = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.denominazione_beneficiario = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 25;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.codice_unit_oper_beneficiario = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.codice_unit_oper_beneficiario = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 26;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.denom_unit_oper_beneficiario = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.denom_unit_oper_beneficiario = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 27;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.indirizzo_beneficiario = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.indirizzo_beneficiario = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 28;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.civico_beneficiario = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.civico_beneficiario = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 29;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.cap_beneficiario = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.cap_beneficiario = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 30;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.localita_beneficiario = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.localita_beneficiario = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 31;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.provincia_beneficiario = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.provincia_beneficiario = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 32;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.nazione_beneficiario = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.nazione_beneficiario = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 33;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.sogg_vers_tipo_identificativo_univoco = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.sogg_vers_tipo_identificativo_univoco = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 34;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.sogg_vers_codice_identificativo_univoco = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.sogg_vers_codice_identificativo_univoco = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 35;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.anagrafica_versante = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.anagrafica_versante = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 36;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.indirizzo_versante = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.indirizzo_versante = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 37;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.civico_versante = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.civico_versante = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 38;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.cap_versante = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.cap_versante = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 39;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.localita_versante = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.localita_versante = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 40;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.provincia_versante = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.provincia_versante = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 41;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.nazione_versante = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.nazione_versante = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 42;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.email_versante = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.email_versante = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 43;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.sogg_pag_tipo_identificativo_univoco = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.sogg_pag_tipo_identificativo_univoco = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 44;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.sogg_pag_codice_identificativo_univoco = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.sogg_pag_codice_identificativo_univoco = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 45;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.anagrafica_pagatore = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.anagrafica_pagatore = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 46;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.indirizzo_pagatore = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.indirizzo_pagatore = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 47;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.civico_pagatore = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.civico_pagatore = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 48;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.cap_pagatore = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.cap_pagatore = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 49;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.localita_pagatore = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.localita_pagatore = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 50;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.provincia_pagatore = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.provincia_pagatore = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 51;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.nazione_pagatore = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.nazione_pagatore = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 52;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.email_pagatore = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.email_pagatore = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 53;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.codice_esito_pagamento = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.codice_esito_pagamento = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 54;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
												.length() > 0) {

											row1.importo_totale_pagato = ParserUtils
													.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} else {

											row1.importo_totale_pagato = null;

										}

									} else {
										row1.importo_totale_pagato = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 55;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.identificativo_univoco_versamento = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.identificativo_univoco_versamento = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 56;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.codice_contesto_pagamento = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.codice_contesto_pagamento = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 57;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
												.length() > 0) {

											row1.singolo_importo_pagato = ParserUtils
													.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} else {

											row1.singolo_importo_pagato = null;

										}

									} else {
										row1.singolo_importo_pagato = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 58;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.esito_singolo_pagamento = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.esito_singolo_pagamento = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 59;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
												.length() > 0) {

											row1.data_esito_singolo_pagamento = ParserUtils
													.parseTo_Date(
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															"yyyy-MM-dd", false);

										} else {

											row1.data_esito_singolo_pagamento = null;

										}

									} else {
										row1.data_esito_singolo_pagamento = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 60;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.identificativo_univoco_riscoss = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.identificativo_univoco_riscoss = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 61;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.causale_versamento = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.causale_versamento = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 62;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.dati_specifici_riscossione = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.dati_specifici_riscossione = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 63;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.tipoDovuto = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.tipoDovuto = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 64;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.tipofirma = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.tipofirma = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 65;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.rt = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.rt = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 66;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
												.length() > 0) {

											row1.indice_dati_singolo_pagamento = ParserUtils
													.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} else {

											row1.indice_dati_singolo_pagamento = null;

										}

									} else {
										row1.indice_dati_singolo_pagamento = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 67;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]
												.length() > 0) {

											row1.numRtDatiPagDatiSingPagCommissioniApplicatePsp = ParserUtils
													.parseTo_Double(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} else {

											row1.numRtDatiPagDatiSingPagCommissioniApplicatePsp = null;

										}

									} else {
										row1.numRtDatiPagDatiSingPagCommissioniApplicatePsp = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 68;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.codRtDatiPagDatiSingPagAllegatoRicevutaTipo = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.codRtDatiPagDatiSingPagAllegatoRicevutaTipo = null;
									}

									columnIndexWithD_tFileInputDelimited_1 = 69;

									if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

										row1.blbRtDatiPagDatiSingPagAllegatoRicevutaTest = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

									} else {
										row1.blbRtDatiPagDatiSingPagAllegatoRicevutaTest = null;
									}

								}

								int filedsum = rowtFileInputDelimited_1.length;
								if (filedsum < (70)) {
									throw new java.lang.Exception(
											"Column(s) missing");
								} else if (filedsum > (70)) {
									throw new RuntimeException(
											"Too many columns");
								}

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputDelimited_1 = true;

								throw (e);

							}

							/**
							 * [tFileInputDelimited_1 begin ] stop
							 */

							/**
							 * [tFileInputDelimited_1 main ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							tos_count_tFileInputDelimited_1++;

							/**
							 * [tFileInputDelimited_1 main ] stop
							 */
							// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tMap_3 main ] start
								 */

								currentComponent = "tMap_3";

								boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_3 = false;
								boolean mainRowRejected_tMap_3 = false;

								// /////////////////////////////////////////////
								// Starting Lookup Table "row5"
								// /////////////////////////////////////////////

								boolean forceLooprow5 = false;

								row5Struct row5ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_3 = false;

									row5HashKey.cod_ipa_ente = context.cod_ipa_ente;

									row5HashKey.hashCodeDirty = true;

									tHash_Lookup_row5.lookup(row5HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_row5 != null
										&& tHash_Lookup_row5
												.getCount(row5HashKey) > 1) { // G
																				// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.cod_ipa_ente = '"
									// + row5HashKey.cod_ipa_ente + "'");
								} // G 071

								row5Struct row5 = null;

								row5Struct fromLookup_row5 = null;
								row5 = row5Default;

								if (tHash_Lookup_row5 != null
										&& tHash_Lookup_row5.hasNext()) { // G
																			// 099

									fromLookup_row5 = tHash_Lookup_row5.next();

								} // G 099

								if (fromLookup_row5 != null) {
									row5 = fromLookup_row5;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
									// ###############################
									// # Output tables

									MAPPING_EXPORT = null;
									ERROR_LOAD_CF = null;

									// # Output table : 'MAPPING_EXPORT'
									// # Filter conditions
									if (

									row5.codice_fiscale_ente
											.equalsIgnoreCase(row1.identificativo_dominio)
											&& row1.singolo_importo_pagato != null
											&& row1.singolo_importo_pagato > 0

									) {
										MAPPING_EXPORT_tmp.version = 0;
										MAPPING_EXPORT_tmp.dt_creazione = TalendDate
												.getCurrentDate();
										MAPPING_EXPORT_tmp.dt_ultima_modifica = TalendDate
												.getCurrentDate();
										MAPPING_EXPORT_tmp.mygov_ente_id = row5.mygov_ente_id;
										MAPPING_EXPORT_tmp.mygov_manage_flusso_id = context.mygov_manage_flusso_id;
										MAPPING_EXPORT_tmp.de_nome_flusso = JobStringManage
												.getValue(row1.iuf);
										MAPPING_EXPORT_tmp.num_riga_flusso = row1.num_riga_flusso;
										MAPPING_EXPORT_tmp.cod_iud = JobStringManage
												.getValue(row1.cod_iud);
										MAPPING_EXPORT_tmp.cod_rp_silinviarp_id_univoco_versamento = JobStringManage
												.getValue(row1.cod_iuv);
										MAPPING_EXPORT_tmp.de_e_versione_oggetto = JobStringManage
												.getValue(row1.versione_oggetto);
										MAPPING_EXPORT_tmp.cod_e_dom_id_dominio = JobStringManage
												.getValue(row1.identificativo_dominio);
										MAPPING_EXPORT_tmp.cod_e_dom_id_stazione_richiedente = JobStringManage
												.getValue(row1.identificativo_stazione_richiedente);
										MAPPING_EXPORT_tmp.cod_e_id_messaggio_ricevuta = JobStringManage
												.getValue(row1.identificativo_messaggio_ricevuta);
										MAPPING_EXPORT_tmp.dt_e_data_ora_messaggio_ricevuta = row1.data_ora_messaggio_ricevuta;
										MAPPING_EXPORT_tmp.cod_e_riferimento_messaggio_richiesta = JobStringManage
												.getValue(row1.riferimento_messaggio_richiesta);
										MAPPING_EXPORT_tmp.dt_e_riferimento_data_richiesta = row1.riferimento_data_richiesta;
										MAPPING_EXPORT_tmp.cod_e_istit_att_id_univ_att_tipo_id_univoco = JobStringManage
												.getValue(row1.tipo_identificativo_univoco);
										MAPPING_EXPORT_tmp.cod_e_istit_att_id_univ_att_codice_id_univoco = JobStringManage
												.getValue(row1.codice_identificativo_univoco);
										MAPPING_EXPORT_tmp.de_e_istit_att_denominazione_attestante = JobStringManage
												.getValue(row1.denominazione_attestante);
										MAPPING_EXPORT_tmp.cod_e_istit_att_codice_unit_oper_attestante = JobStringManage
												.getValue(row1.codice_unit_oper_attestante);
										MAPPING_EXPORT_tmp.de_e_istit_att_denom_unit_oper_attestante = JobStringManage
												.getValue(row1.denom_unit_oper_attestante);
										MAPPING_EXPORT_tmp.de_e_istit_att_indirizzo_attestante = JobStringManage
												.getValue(row1.indirizzo_attestante);
										MAPPING_EXPORT_tmp.de_e_istit_att_civico_attestante = JobStringManage
												.getValue(row1.civico_attestante);
										MAPPING_EXPORT_tmp.cod_e_istit_att_cap_attestante = JobStringManage
												.getValue(row1.cap_attestante);
										MAPPING_EXPORT_tmp.de_e_istit_att_localita_attestante = JobStringManage
												.getValue(row1.localita_attestante);
										MAPPING_EXPORT_tmp.de_e_istit_att_provincia_attestante = JobStringManage
												.getValue(row1.provincia_attestante);
										MAPPING_EXPORT_tmp.cod_e_istit_att_nazione_attestante = JobStringManage
												.getValue(row1.nazione_attestante);
										MAPPING_EXPORT_tmp.cod_e_ente_benef_id_univ_benef_tipo_id_univoco = JobStringManage
												.getValue(row1.ente_benef_tipo_identificativo_univoco);
										MAPPING_EXPORT_tmp.cod_e_ente_benef_id_univ_benef_codice_id_univoco = JobStringManage
												.getValue(row1.ente_benef_codice_identificativo_univoco);
										MAPPING_EXPORT_tmp.de_e_ente_benef_denominazione_beneficiario = JobStringManage
												.getValue(row1.denominazione_beneficiario);
										MAPPING_EXPORT_tmp.cod_e_ente_benef_codice_unit_oper_beneficiario = JobStringManage
												.getValue(row1.codice_unit_oper_beneficiario);
										MAPPING_EXPORT_tmp.de_e_ente_benef_denom_unit_oper_beneficiario = JobStringManage
												.getValue(row1.denom_unit_oper_beneficiario);
										MAPPING_EXPORT_tmp.de_e_ente_benef_indirizzo_beneficiario = JobStringManage
												.getValue(row1.indirizzo_beneficiario);
										MAPPING_EXPORT_tmp.de_e_ente_benef_civico_beneficiario = JobStringManage
												.getValue(row1.civico_beneficiario);
										MAPPING_EXPORT_tmp.cod_e_ente_benef_cap_beneficiario = JobStringManage
												.getValue(row1.cap_beneficiario);
										MAPPING_EXPORT_tmp.de_e_ente_benef_localita_beneficiario = JobStringManage
												.getValue(row1.localita_beneficiario);
										MAPPING_EXPORT_tmp.de_e_ente_benef_provincia_beneficiario = JobStringManage
												.getValue(row1.provincia_beneficiario);
										MAPPING_EXPORT_tmp.cod_e_ente_benef_nazione_beneficiario = JobStringManage
												.getValue(row1.nazione_beneficiario);
										MAPPING_EXPORT_tmp.cod_e_sogg_vers_id_univ_vers_tipo_id_univoco = JobStringManage
												.getValue(row1.sogg_vers_tipo_identificativo_univoco);
										MAPPING_EXPORT_tmp.cod_e_sogg_vers_id_univ_vers_codice_id_univoco = JobStringManage
												.getValue(row1.sogg_vers_codice_identificativo_univoco);
										MAPPING_EXPORT_tmp.cod_e_sogg_vers_anagrafica_versante = JobStringManage
												.getValue(row1.anagrafica_versante);
										MAPPING_EXPORT_tmp.de_e_sogg_vers_indirizzo_versante = JobStringManage
												.getValue(row1.indirizzo_versante);
										MAPPING_EXPORT_tmp.de_e_sogg_vers_civico_versante = JobStringManage
												.getValue(row1.civico_versante);
										MAPPING_EXPORT_tmp.cod_e_sogg_vers_cap_versante = JobStringManage
												.getValue(row1.cap_versante);
										MAPPING_EXPORT_tmp.de_e_sogg_vers_localita_versante = JobStringManage
												.getValue(row1.localita_versante);
										MAPPING_EXPORT_tmp.de_e_sogg_vers_provincia_versante = JobStringManage
												.getValue(row1.provincia_versante);
										MAPPING_EXPORT_tmp.cod_e_sogg_vers_nazione_versante = JobStringManage
												.getValue(row1.nazione_versante);
										MAPPING_EXPORT_tmp.de_e_sogg_vers_email_versante = JobStringManage
												.getValue(row1.email_versante);
										MAPPING_EXPORT_tmp.cod_e_sogg_pag_id_univ_pag_tipo_id_univoco = JobStringManage
												.getValue(row1.sogg_pag_tipo_identificativo_univoco);
										MAPPING_EXPORT_tmp.cod_e_sogg_pag_id_univ_pag_codice_id_univoco = JobStringManage
												.getValue(row1.sogg_pag_codice_identificativo_univoco);
										MAPPING_EXPORT_tmp.cod_e_sogg_pag_anagrafica_pagatore = JobStringManage
												.getValue(row1.anagrafica_pagatore);
										MAPPING_EXPORT_tmp.de_e_sogg_pag_indirizzo_pagatore = JobStringManage
												.getValue(row1.indirizzo_pagatore);
										MAPPING_EXPORT_tmp.de_e_sogg_pag_civico_pagatore = JobStringManage
												.getValue(row1.civico_pagatore);
										MAPPING_EXPORT_tmp.cod_e_sogg_pag_cap_pagatore = JobStringManage
												.getValue(row1.cap_pagatore);
										MAPPING_EXPORT_tmp.de_e_sogg_pag_localita_pagatore = JobStringManage
												.getValue(row1.localita_pagatore);
										MAPPING_EXPORT_tmp.de_e_sogg_pag_provincia_pagatore = JobStringManage
												.getValue(row1.provincia_pagatore);
										MAPPING_EXPORT_tmp.cod_e_sogg_pag_nazione_pagatore = JobStringManage
												.getValue(row1.nazione_pagatore);
										MAPPING_EXPORT_tmp.de_e_sogg_pag_email_pagatore = JobStringManage
												.getValue(row1.email_pagatore);
										MAPPING_EXPORT_tmp.cod_e_dati_pag_codice_esito_pagamento = JobStringManage
												.getValue(row1.codice_esito_pagamento);
										MAPPING_EXPORT_tmp.num_e_dati_pag_importo_totale_pagato = new Double(
												row1.importo_totale_pagato);
										MAPPING_EXPORT_tmp.cod_e_dati_pag_id_univoco_versamento = JobStringManage
												.getValue(row1.identificativo_univoco_versamento);
										MAPPING_EXPORT_tmp.cod_e_dati_pag_codice_contesto_pagamento = JobStringManage
												.getValue(row1.codice_contesto_pagamento);
										MAPPING_EXPORT_tmp.num_e_dati_pag_dati_sing_pag_singolo_importo_pagato = new Double(
												row1.singolo_importo_pagato);
										MAPPING_EXPORT_tmp.de_e_dati_pag_dati_sing_pag_esito_singolo_pagamento = JobStringManage
												.getValue(row1.esito_singolo_pagamento);
										MAPPING_EXPORT_tmp.dt_e_dati_pag_dati_sing_pag_data_esito_singolo_pagamento = row1.data_esito_singolo_pagamento;
										MAPPING_EXPORT_tmp.cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss = JobStringManage
												.getValue(row1.identificativo_univoco_riscoss);
										MAPPING_EXPORT_tmp.de_e_dati_pag_dati_sing_pag_causale_versamento = JobStringManage
												.getValue(row1.causale_versamento);
										MAPPING_EXPORT_tmp.de_e_dati_pag_dati_sing_pag_dati_specifici_riscossione = JobStringManage
												.getValue(row1.dati_specifici_riscossione);
										MAPPING_EXPORT_tmp.cod_tipo_dovuto = row1.tipoDovuto;
										MAPPING_EXPORT_tmp.dt_acquisizione = (Date) globalMap
												.get("dataAcquisizione");
										MAPPING_EXPORT_tmp.indice_dati_singolo_pagamento = row1.indice_dati_singolo_pagamento;
										MAPPING_EXPORT_tmp.blb_rt_payload = row1.rt;
										MAPPING_EXPORT = MAPPING_EXPORT_tmp;
									} // closing filter/reject

									// # Output table : 'ERROR_LOAD_CF'
									// # Filter conditions
									if (

									!row5.codice_fiscale_ente
											.equalsIgnoreCase(row1.identificativo_dominio)
											&& row1.singolo_importo_pagato != null
											&& row1.singolo_importo_pagato > 0

									) {
										ERROR_LOAD_CF_tmp.iuf = row1.iuf;
										ERROR_LOAD_CF = ERROR_LOAD_CF_tmp;
									} // closing filter/reject
										// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_3 = false;

								tos_count_tMap_3++;

								/**
								 * [tMap_3 main ] stop
								 */
								// Start of branch "MAPPING_EXPORT"
								if (MAPPING_EXPORT != null) {

									/**
									 * [tPostgresqlOutput_1 main ] start
									 */

									currentComponent = "tPostgresqlOutput_1";

									whetherReject_tPostgresqlOutput_1 = false;
									int updateFlag_tPostgresqlOutput_1 = 0;
									pstmtUpdate_tPostgresqlOutput_1.setInt(1,
											MAPPING_EXPORT.version);

									if (MAPPING_EXPORT.dt_creazione != null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setTimestamp(
														2,
														new java.sql.Timestamp(
																MAPPING_EXPORT.dt_creazione
																		.getTime()));
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(
														2,
														java.sql.Types.TIMESTAMP);
									}

									if (MAPPING_EXPORT.dt_ultima_modifica != null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setTimestamp(
														3,
														new java.sql.Timestamp(
																MAPPING_EXPORT.dt_ultima_modifica
																		.getTime()));
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(
														3,
														java.sql.Types.TIMESTAMP);
									}

									pstmtUpdate_tPostgresqlOutput_1
											.setLong(
													4,
													MAPPING_EXPORT.mygov_manage_flusso_id);

									if (MAPPING_EXPORT.de_nome_flusso == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(5,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														5,
														MAPPING_EXPORT.de_nome_flusso);
									}

									pstmtUpdate_tPostgresqlOutput_1.setInt(6,
											MAPPING_EXPORT.num_riga_flusso);

									if (MAPPING_EXPORT.cod_iud == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(7,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(7,
														MAPPING_EXPORT.cod_iud);
									}

									if (MAPPING_EXPORT.de_e_versione_oggetto == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(8,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														8,
														MAPPING_EXPORT.de_e_versione_oggetto);
									}

									if (MAPPING_EXPORT.cod_e_dom_id_dominio == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(9,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														9,
														MAPPING_EXPORT.cod_e_dom_id_dominio);
									}

									if (MAPPING_EXPORT.cod_e_dom_id_stazione_richiedente == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(10,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														10,
														MAPPING_EXPORT.cod_e_dom_id_stazione_richiedente);
									}

									if (MAPPING_EXPORT.cod_e_id_messaggio_ricevuta == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(11,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														11,
														MAPPING_EXPORT.cod_e_id_messaggio_ricevuta);
									}

									if (MAPPING_EXPORT.dt_e_data_ora_messaggio_ricevuta != null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setTimestamp(
														12,
														new java.sql.Timestamp(
																MAPPING_EXPORT.dt_e_data_ora_messaggio_ricevuta
																		.getTime()));
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(
														12,
														java.sql.Types.TIMESTAMP);
									}

									if (MAPPING_EXPORT.cod_e_riferimento_messaggio_richiesta == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(13,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														13,
														MAPPING_EXPORT.cod_e_riferimento_messaggio_richiesta);
									}

									if (MAPPING_EXPORT.dt_e_riferimento_data_richiesta != null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setTimestamp(
														14,
														new java.sql.Timestamp(
																MAPPING_EXPORT.dt_e_riferimento_data_richiesta
																		.getTime()));
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(
														14,
														java.sql.Types.TIMESTAMP);
									}

									if (MAPPING_EXPORT.cod_e_istit_att_id_univ_att_tipo_id_univoco == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(15,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														15,
														MAPPING_EXPORT.cod_e_istit_att_id_univ_att_tipo_id_univoco);
									}

									if (MAPPING_EXPORT.cod_e_istit_att_id_univ_att_codice_id_univoco == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(16,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														16,
														MAPPING_EXPORT.cod_e_istit_att_id_univ_att_codice_id_univoco);
									}

									if (MAPPING_EXPORT.de_e_istit_att_denominazione_attestante == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(17,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														17,
														MAPPING_EXPORT.de_e_istit_att_denominazione_attestante);
									}

									if (MAPPING_EXPORT.cod_e_istit_att_codice_unit_oper_attestante == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(18,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														18,
														MAPPING_EXPORT.cod_e_istit_att_codice_unit_oper_attestante);
									}

									if (MAPPING_EXPORT.de_e_istit_att_denom_unit_oper_attestante == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(19,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														19,
														MAPPING_EXPORT.de_e_istit_att_denom_unit_oper_attestante);
									}

									if (MAPPING_EXPORT.de_e_istit_att_indirizzo_attestante == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(20,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														20,
														MAPPING_EXPORT.de_e_istit_att_indirizzo_attestante);
									}

									if (MAPPING_EXPORT.de_e_istit_att_civico_attestante == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(21,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														21,
														MAPPING_EXPORT.de_e_istit_att_civico_attestante);
									}

									if (MAPPING_EXPORT.cod_e_istit_att_cap_attestante == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(22,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														22,
														MAPPING_EXPORT.cod_e_istit_att_cap_attestante);
									}

									if (MAPPING_EXPORT.de_e_istit_att_localita_attestante == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(23,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														23,
														MAPPING_EXPORT.de_e_istit_att_localita_attestante);
									}

									if (MAPPING_EXPORT.de_e_istit_att_provincia_attestante == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(24,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														24,
														MAPPING_EXPORT.de_e_istit_att_provincia_attestante);
									}

									if (MAPPING_EXPORT.cod_e_istit_att_nazione_attestante == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(25,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														25,
														MAPPING_EXPORT.cod_e_istit_att_nazione_attestante);
									}

									if (MAPPING_EXPORT.cod_e_ente_benef_id_univ_benef_tipo_id_univoco == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(26,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														26,
														MAPPING_EXPORT.cod_e_ente_benef_id_univ_benef_tipo_id_univoco);
									}

									if (MAPPING_EXPORT.cod_e_ente_benef_id_univ_benef_codice_id_univoco == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(27,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														27,
														MAPPING_EXPORT.cod_e_ente_benef_id_univ_benef_codice_id_univoco);
									}

									if (MAPPING_EXPORT.de_e_ente_benef_denominazione_beneficiario == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(28,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														28,
														MAPPING_EXPORT.de_e_ente_benef_denominazione_beneficiario);
									}

									if (MAPPING_EXPORT.cod_e_ente_benef_codice_unit_oper_beneficiario == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(29,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														29,
														MAPPING_EXPORT.cod_e_ente_benef_codice_unit_oper_beneficiario);
									}

									if (MAPPING_EXPORT.de_e_ente_benef_denom_unit_oper_beneficiario == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(30,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														30,
														MAPPING_EXPORT.de_e_ente_benef_denom_unit_oper_beneficiario);
									}

									if (MAPPING_EXPORT.de_e_ente_benef_indirizzo_beneficiario == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(31,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														31,
														MAPPING_EXPORT.de_e_ente_benef_indirizzo_beneficiario);
									}

									if (MAPPING_EXPORT.de_e_ente_benef_civico_beneficiario == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(32,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														32,
														MAPPING_EXPORT.de_e_ente_benef_civico_beneficiario);
									}

									if (MAPPING_EXPORT.cod_e_ente_benef_cap_beneficiario == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(33,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														33,
														MAPPING_EXPORT.cod_e_ente_benef_cap_beneficiario);
									}

									if (MAPPING_EXPORT.de_e_ente_benef_localita_beneficiario == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(34,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														34,
														MAPPING_EXPORT.de_e_ente_benef_localita_beneficiario);
									}

									if (MAPPING_EXPORT.de_e_ente_benef_provincia_beneficiario == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(35,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														35,
														MAPPING_EXPORT.de_e_ente_benef_provincia_beneficiario);
									}

									if (MAPPING_EXPORT.cod_e_ente_benef_nazione_beneficiario == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(36,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														36,
														MAPPING_EXPORT.cod_e_ente_benef_nazione_beneficiario);
									}

									if (MAPPING_EXPORT.cod_e_sogg_vers_id_univ_vers_tipo_id_univoco == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(37,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														37,
														MAPPING_EXPORT.cod_e_sogg_vers_id_univ_vers_tipo_id_univoco);
									}

									if (MAPPING_EXPORT.cod_e_sogg_vers_id_univ_vers_codice_id_univoco == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(38,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														38,
														MAPPING_EXPORT.cod_e_sogg_vers_id_univ_vers_codice_id_univoco);
									}

									if (MAPPING_EXPORT.cod_e_sogg_vers_anagrafica_versante == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(39,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														39,
														MAPPING_EXPORT.cod_e_sogg_vers_anagrafica_versante);
									}

									if (MAPPING_EXPORT.de_e_sogg_vers_indirizzo_versante == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(40,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														40,
														MAPPING_EXPORT.de_e_sogg_vers_indirizzo_versante);
									}

									if (MAPPING_EXPORT.de_e_sogg_vers_civico_versante == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(41,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														41,
														MAPPING_EXPORT.de_e_sogg_vers_civico_versante);
									}

									if (MAPPING_EXPORT.cod_e_sogg_vers_cap_versante == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(42,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														42,
														MAPPING_EXPORT.cod_e_sogg_vers_cap_versante);
									}

									if (MAPPING_EXPORT.de_e_sogg_vers_localita_versante == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(43,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														43,
														MAPPING_EXPORT.de_e_sogg_vers_localita_versante);
									}

									if (MAPPING_EXPORT.de_e_sogg_vers_provincia_versante == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(44,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														44,
														MAPPING_EXPORT.de_e_sogg_vers_provincia_versante);
									}

									if (MAPPING_EXPORT.cod_e_sogg_vers_nazione_versante == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(45,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														45,
														MAPPING_EXPORT.cod_e_sogg_vers_nazione_versante);
									}

									if (MAPPING_EXPORT.de_e_sogg_vers_email_versante == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(46,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														46,
														MAPPING_EXPORT.de_e_sogg_vers_email_versante);
									}

									if (MAPPING_EXPORT.cod_e_sogg_pag_id_univ_pag_tipo_id_univoco == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(47,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														47,
														MAPPING_EXPORT.cod_e_sogg_pag_id_univ_pag_tipo_id_univoco);
									}

									if (MAPPING_EXPORT.cod_e_sogg_pag_id_univ_pag_codice_id_univoco == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(48,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														48,
														MAPPING_EXPORT.cod_e_sogg_pag_id_univ_pag_codice_id_univoco);
									}

									if (MAPPING_EXPORT.cod_e_sogg_pag_anagrafica_pagatore == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(49,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														49,
														MAPPING_EXPORT.cod_e_sogg_pag_anagrafica_pagatore);
									}

									if (MAPPING_EXPORT.de_e_sogg_pag_indirizzo_pagatore == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(50,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														50,
														MAPPING_EXPORT.de_e_sogg_pag_indirizzo_pagatore);
									}

									if (MAPPING_EXPORT.de_e_sogg_pag_civico_pagatore == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(51,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														51,
														MAPPING_EXPORT.de_e_sogg_pag_civico_pagatore);
									}

									if (MAPPING_EXPORT.cod_e_sogg_pag_cap_pagatore == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(52,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														52,
														MAPPING_EXPORT.cod_e_sogg_pag_cap_pagatore);
									}

									if (MAPPING_EXPORT.de_e_sogg_pag_localita_pagatore == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(53,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														53,
														MAPPING_EXPORT.de_e_sogg_pag_localita_pagatore);
									}

									if (MAPPING_EXPORT.de_e_sogg_pag_provincia_pagatore == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(54,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														54,
														MAPPING_EXPORT.de_e_sogg_pag_provincia_pagatore);
									}

									if (MAPPING_EXPORT.cod_e_sogg_pag_nazione_pagatore == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(55,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														55,
														MAPPING_EXPORT.cod_e_sogg_pag_nazione_pagatore);
									}

									if (MAPPING_EXPORT.de_e_sogg_pag_email_pagatore == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(56,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														56,
														MAPPING_EXPORT.de_e_sogg_pag_email_pagatore);
									}

									if (MAPPING_EXPORT.cod_e_dati_pag_codice_esito_pagamento == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(57,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														57,
														MAPPING_EXPORT.cod_e_dati_pag_codice_esito_pagamento);
									}

									if (MAPPING_EXPORT.num_e_dati_pag_importo_totale_pagato == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(58,
														java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setDouble(
														58,
														MAPPING_EXPORT.num_e_dati_pag_importo_totale_pagato);
									}

									if (MAPPING_EXPORT.cod_e_dati_pag_id_univoco_versamento == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(59,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														59,
														MAPPING_EXPORT.cod_e_dati_pag_id_univoco_versamento);
									}

									if (MAPPING_EXPORT.cod_e_dati_pag_codice_contesto_pagamento == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(60,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														60,
														MAPPING_EXPORT.cod_e_dati_pag_codice_contesto_pagamento);
									}

									if (MAPPING_EXPORT.num_e_dati_pag_dati_sing_pag_singolo_importo_pagato == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(61,
														java.sql.Types.DOUBLE);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setDouble(
														61,
														MAPPING_EXPORT.num_e_dati_pag_dati_sing_pag_singolo_importo_pagato);
									}

									if (MAPPING_EXPORT.de_e_dati_pag_dati_sing_pag_esito_singolo_pagamento == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(62,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														62,
														MAPPING_EXPORT.de_e_dati_pag_dati_sing_pag_esito_singolo_pagamento);
									}

									if (MAPPING_EXPORT.dt_e_dati_pag_dati_sing_pag_data_esito_singolo_pagamento != null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setTimestamp(
														63,
														new java.sql.Timestamp(
																MAPPING_EXPORT.dt_e_dati_pag_dati_sing_pag_data_esito_singolo_pagamento
																		.getTime()));
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(
														63,
														java.sql.Types.TIMESTAMP);
									}

									if (MAPPING_EXPORT.de_e_dati_pag_dati_sing_pag_causale_versamento == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(64,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														64,
														MAPPING_EXPORT.de_e_dati_pag_dati_sing_pag_causale_versamento);
									}

									if (MAPPING_EXPORT.de_e_dati_pag_dati_sing_pag_dati_specifici_riscossione == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(65,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														65,
														MAPPING_EXPORT.de_e_dati_pag_dati_sing_pag_dati_specifici_riscossione);
									}

									if (MAPPING_EXPORT.cod_tipo_dovuto == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(66,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														66,
														MAPPING_EXPORT.cod_tipo_dovuto);
									}

									if (MAPPING_EXPORT.dt_acquisizione != null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setTimestamp(
														67,
														new java.sql.Timestamp(
																MAPPING_EXPORT.dt_acquisizione
																		.getTime()));
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(
														67,
														java.sql.Types.TIMESTAMP);
									}

									if (MAPPING_EXPORT.blb_rt_payload == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(68,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														68,
														MAPPING_EXPORT.blb_rt_payload);
									}

									pstmtUpdate_tPostgresqlOutput_1.setLong(
											69 + count_tPostgresqlOutput_1,
											MAPPING_EXPORT.mygov_ente_id);

									if (MAPPING_EXPORT.cod_rp_silinviarp_id_univoco_versamento == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(
														70 + count_tPostgresqlOutput_1,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														70 + count_tPostgresqlOutput_1,
														MAPPING_EXPORT.cod_rp_silinviarp_id_univoco_versamento);
									}

									if (MAPPING_EXPORT.cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(
														71 + count_tPostgresqlOutput_1,
														java.sql.Types.VARCHAR);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setString(
														71 + count_tPostgresqlOutput_1,
														MAPPING_EXPORT.cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss);
									}

									if (MAPPING_EXPORT.indice_dati_singolo_pagamento == null) {
										pstmtUpdate_tPostgresqlOutput_1
												.setNull(
														72 + count_tPostgresqlOutput_1,
														java.sql.Types.INTEGER);
									} else {
										pstmtUpdate_tPostgresqlOutput_1
												.setInt(72 + count_tPostgresqlOutput_1,
														MAPPING_EXPORT.indice_dati_singolo_pagamento);
									}

									try {

										updateFlag_tPostgresqlOutput_1 = pstmtUpdate_tPostgresqlOutput_1
												.executeUpdate();
										updatedCount_tPostgresqlOutput_1 = updatedCount_tPostgresqlOutput_1
												+ updateFlag_tPostgresqlOutput_1;

										if (updateFlag_tPostgresqlOutput_1 == 0) {

											pstmtInsert_tPostgresqlOutput_1
													.setInt(1,
															MAPPING_EXPORT.version);

											if (MAPPING_EXPORT.dt_creazione != null) {
												pstmtInsert_tPostgresqlOutput_1
														.setTimestamp(
																2,
																new java.sql.Timestamp(
																		MAPPING_EXPORT.dt_creazione
																				.getTime()));
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																2,
																java.sql.Types.TIMESTAMP);
											}

											if (MAPPING_EXPORT.dt_ultima_modifica != null) {
												pstmtInsert_tPostgresqlOutput_1
														.setTimestamp(
																3,
																new java.sql.Timestamp(
																		MAPPING_EXPORT.dt_ultima_modifica
																				.getTime()));
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																3,
																java.sql.Types.TIMESTAMP);
											}

											pstmtInsert_tPostgresqlOutput_1
													.setLong(
															4,
															MAPPING_EXPORT.mygov_ente_id);

											pstmtInsert_tPostgresqlOutput_1
													.setLong(
															5,
															MAPPING_EXPORT.mygov_manage_flusso_id);

											if (MAPPING_EXPORT.de_nome_flusso == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																6,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																6,
																MAPPING_EXPORT.de_nome_flusso);
											}

											pstmtInsert_tPostgresqlOutput_1
													.setInt(7,
															MAPPING_EXPORT.num_riga_flusso);

											if (MAPPING_EXPORT.cod_iud == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																8,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																8,
																MAPPING_EXPORT.cod_iud);
											}

											if (MAPPING_EXPORT.cod_rp_silinviarp_id_univoco_versamento == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																9,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																9,
																MAPPING_EXPORT.cod_rp_silinviarp_id_univoco_versamento);
											}

											if (MAPPING_EXPORT.de_e_versione_oggetto == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																10,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																10,
																MAPPING_EXPORT.de_e_versione_oggetto);
											}

											if (MAPPING_EXPORT.cod_e_dom_id_dominio == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																11,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																11,
																MAPPING_EXPORT.cod_e_dom_id_dominio);
											}

											if (MAPPING_EXPORT.cod_e_dom_id_stazione_richiedente == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																12,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																12,
																MAPPING_EXPORT.cod_e_dom_id_stazione_richiedente);
											}

											if (MAPPING_EXPORT.cod_e_id_messaggio_ricevuta == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																13,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																13,
																MAPPING_EXPORT.cod_e_id_messaggio_ricevuta);
											}

											if (MAPPING_EXPORT.dt_e_data_ora_messaggio_ricevuta != null) {
												pstmtInsert_tPostgresqlOutput_1
														.setTimestamp(
																14,
																new java.sql.Timestamp(
																		MAPPING_EXPORT.dt_e_data_ora_messaggio_ricevuta
																				.getTime()));
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																14,
																java.sql.Types.TIMESTAMP);
											}

											if (MAPPING_EXPORT.cod_e_riferimento_messaggio_richiesta == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																15,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																15,
																MAPPING_EXPORT.cod_e_riferimento_messaggio_richiesta);
											}

											if (MAPPING_EXPORT.dt_e_riferimento_data_richiesta != null) {
												pstmtInsert_tPostgresqlOutput_1
														.setTimestamp(
																16,
																new java.sql.Timestamp(
																		MAPPING_EXPORT.dt_e_riferimento_data_richiesta
																				.getTime()));
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																16,
																java.sql.Types.TIMESTAMP);
											}

											if (MAPPING_EXPORT.cod_e_istit_att_id_univ_att_tipo_id_univoco == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																17,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																17,
																MAPPING_EXPORT.cod_e_istit_att_id_univ_att_tipo_id_univoco);
											}

											if (MAPPING_EXPORT.cod_e_istit_att_id_univ_att_codice_id_univoco == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																18,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																18,
																MAPPING_EXPORT.cod_e_istit_att_id_univ_att_codice_id_univoco);
											}

											if (MAPPING_EXPORT.de_e_istit_att_denominazione_attestante == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																19,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																19,
																MAPPING_EXPORT.de_e_istit_att_denominazione_attestante);
											}

											if (MAPPING_EXPORT.cod_e_istit_att_codice_unit_oper_attestante == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																20,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																20,
																MAPPING_EXPORT.cod_e_istit_att_codice_unit_oper_attestante);
											}

											if (MAPPING_EXPORT.de_e_istit_att_denom_unit_oper_attestante == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																21,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																21,
																MAPPING_EXPORT.de_e_istit_att_denom_unit_oper_attestante);
											}

											if (MAPPING_EXPORT.de_e_istit_att_indirizzo_attestante == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																22,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																22,
																MAPPING_EXPORT.de_e_istit_att_indirizzo_attestante);
											}

											if (MAPPING_EXPORT.de_e_istit_att_civico_attestante == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																23,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																23,
																MAPPING_EXPORT.de_e_istit_att_civico_attestante);
											}

											if (MAPPING_EXPORT.cod_e_istit_att_cap_attestante == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																24,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																24,
																MAPPING_EXPORT.cod_e_istit_att_cap_attestante);
											}

											if (MAPPING_EXPORT.de_e_istit_att_localita_attestante == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																25,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																25,
																MAPPING_EXPORT.de_e_istit_att_localita_attestante);
											}

											if (MAPPING_EXPORT.de_e_istit_att_provincia_attestante == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																26,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																26,
																MAPPING_EXPORT.de_e_istit_att_provincia_attestante);
											}

											if (MAPPING_EXPORT.cod_e_istit_att_nazione_attestante == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																27,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																27,
																MAPPING_EXPORT.cod_e_istit_att_nazione_attestante);
											}

											if (MAPPING_EXPORT.cod_e_ente_benef_id_univ_benef_tipo_id_univoco == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																28,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																28,
																MAPPING_EXPORT.cod_e_ente_benef_id_univ_benef_tipo_id_univoco);
											}

											if (MAPPING_EXPORT.cod_e_ente_benef_id_univ_benef_codice_id_univoco == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																29,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																29,
																MAPPING_EXPORT.cod_e_ente_benef_id_univ_benef_codice_id_univoco);
											}

											if (MAPPING_EXPORT.de_e_ente_benef_denominazione_beneficiario == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																30,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																30,
																MAPPING_EXPORT.de_e_ente_benef_denominazione_beneficiario);
											}

											if (MAPPING_EXPORT.cod_e_ente_benef_codice_unit_oper_beneficiario == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																31,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																31,
																MAPPING_EXPORT.cod_e_ente_benef_codice_unit_oper_beneficiario);
											}

											if (MAPPING_EXPORT.de_e_ente_benef_denom_unit_oper_beneficiario == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																32,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																32,
																MAPPING_EXPORT.de_e_ente_benef_denom_unit_oper_beneficiario);
											}

											if (MAPPING_EXPORT.de_e_ente_benef_indirizzo_beneficiario == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																33,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																33,
																MAPPING_EXPORT.de_e_ente_benef_indirizzo_beneficiario);
											}

											if (MAPPING_EXPORT.de_e_ente_benef_civico_beneficiario == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																34,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																34,
																MAPPING_EXPORT.de_e_ente_benef_civico_beneficiario);
											}

											if (MAPPING_EXPORT.cod_e_ente_benef_cap_beneficiario == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																35,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																35,
																MAPPING_EXPORT.cod_e_ente_benef_cap_beneficiario);
											}

											if (MAPPING_EXPORT.de_e_ente_benef_localita_beneficiario == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																36,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																36,
																MAPPING_EXPORT.de_e_ente_benef_localita_beneficiario);
											}

											if (MAPPING_EXPORT.de_e_ente_benef_provincia_beneficiario == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																37,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																37,
																MAPPING_EXPORT.de_e_ente_benef_provincia_beneficiario);
											}

											if (MAPPING_EXPORT.cod_e_ente_benef_nazione_beneficiario == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																38,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																38,
																MAPPING_EXPORT.cod_e_ente_benef_nazione_beneficiario);
											}

											if (MAPPING_EXPORT.cod_e_sogg_vers_id_univ_vers_tipo_id_univoco == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																39,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																39,
																MAPPING_EXPORT.cod_e_sogg_vers_id_univ_vers_tipo_id_univoco);
											}

											if (MAPPING_EXPORT.cod_e_sogg_vers_id_univ_vers_codice_id_univoco == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																40,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																40,
																MAPPING_EXPORT.cod_e_sogg_vers_id_univ_vers_codice_id_univoco);
											}

											if (MAPPING_EXPORT.cod_e_sogg_vers_anagrafica_versante == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																41,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																41,
																MAPPING_EXPORT.cod_e_sogg_vers_anagrafica_versante);
											}

											if (MAPPING_EXPORT.de_e_sogg_vers_indirizzo_versante == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																42,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																42,
																MAPPING_EXPORT.de_e_sogg_vers_indirizzo_versante);
											}

											if (MAPPING_EXPORT.de_e_sogg_vers_civico_versante == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																43,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																43,
																MAPPING_EXPORT.de_e_sogg_vers_civico_versante);
											}

											if (MAPPING_EXPORT.cod_e_sogg_vers_cap_versante == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																44,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																44,
																MAPPING_EXPORT.cod_e_sogg_vers_cap_versante);
											}

											if (MAPPING_EXPORT.de_e_sogg_vers_localita_versante == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																45,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																45,
																MAPPING_EXPORT.de_e_sogg_vers_localita_versante);
											}

											if (MAPPING_EXPORT.de_e_sogg_vers_provincia_versante == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																46,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																46,
																MAPPING_EXPORT.de_e_sogg_vers_provincia_versante);
											}

											if (MAPPING_EXPORT.cod_e_sogg_vers_nazione_versante == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																47,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																47,
																MAPPING_EXPORT.cod_e_sogg_vers_nazione_versante);
											}

											if (MAPPING_EXPORT.de_e_sogg_vers_email_versante == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																48,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																48,
																MAPPING_EXPORT.de_e_sogg_vers_email_versante);
											}

											if (MAPPING_EXPORT.cod_e_sogg_pag_id_univ_pag_tipo_id_univoco == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																49,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																49,
																MAPPING_EXPORT.cod_e_sogg_pag_id_univ_pag_tipo_id_univoco);
											}

											if (MAPPING_EXPORT.cod_e_sogg_pag_id_univ_pag_codice_id_univoco == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																50,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																50,
																MAPPING_EXPORT.cod_e_sogg_pag_id_univ_pag_codice_id_univoco);
											}

											if (MAPPING_EXPORT.cod_e_sogg_pag_anagrafica_pagatore == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																51,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																51,
																MAPPING_EXPORT.cod_e_sogg_pag_anagrafica_pagatore);
											}

											if (MAPPING_EXPORT.de_e_sogg_pag_indirizzo_pagatore == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																52,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																52,
																MAPPING_EXPORT.de_e_sogg_pag_indirizzo_pagatore);
											}

											if (MAPPING_EXPORT.de_e_sogg_pag_civico_pagatore == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																53,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																53,
																MAPPING_EXPORT.de_e_sogg_pag_civico_pagatore);
											}

											if (MAPPING_EXPORT.cod_e_sogg_pag_cap_pagatore == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																54,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																54,
																MAPPING_EXPORT.cod_e_sogg_pag_cap_pagatore);
											}

											if (MAPPING_EXPORT.de_e_sogg_pag_localita_pagatore == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																55,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																55,
																MAPPING_EXPORT.de_e_sogg_pag_localita_pagatore);
											}

											if (MAPPING_EXPORT.de_e_sogg_pag_provincia_pagatore == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																56,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																56,
																MAPPING_EXPORT.de_e_sogg_pag_provincia_pagatore);
											}

											if (MAPPING_EXPORT.cod_e_sogg_pag_nazione_pagatore == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																57,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																57,
																MAPPING_EXPORT.cod_e_sogg_pag_nazione_pagatore);
											}

											if (MAPPING_EXPORT.de_e_sogg_pag_email_pagatore == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																58,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																58,
																MAPPING_EXPORT.de_e_sogg_pag_email_pagatore);
											}

											if (MAPPING_EXPORT.cod_e_dati_pag_codice_esito_pagamento == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																59,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																59,
																MAPPING_EXPORT.cod_e_dati_pag_codice_esito_pagamento);
											}

											if (MAPPING_EXPORT.num_e_dati_pag_importo_totale_pagato == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																60,
																java.sql.Types.DOUBLE);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setDouble(
																60,
																MAPPING_EXPORT.num_e_dati_pag_importo_totale_pagato);
											}

											if (MAPPING_EXPORT.cod_e_dati_pag_id_univoco_versamento == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																61,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																61,
																MAPPING_EXPORT.cod_e_dati_pag_id_univoco_versamento);
											}

											if (MAPPING_EXPORT.cod_e_dati_pag_codice_contesto_pagamento == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																62,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																62,
																MAPPING_EXPORT.cod_e_dati_pag_codice_contesto_pagamento);
											}

											if (MAPPING_EXPORT.num_e_dati_pag_dati_sing_pag_singolo_importo_pagato == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																63,
																java.sql.Types.DOUBLE);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setDouble(
																63,
																MAPPING_EXPORT.num_e_dati_pag_dati_sing_pag_singolo_importo_pagato);
											}

											if (MAPPING_EXPORT.de_e_dati_pag_dati_sing_pag_esito_singolo_pagamento == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																64,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																64,
																MAPPING_EXPORT.de_e_dati_pag_dati_sing_pag_esito_singolo_pagamento);
											}

											if (MAPPING_EXPORT.dt_e_dati_pag_dati_sing_pag_data_esito_singolo_pagamento != null) {
												pstmtInsert_tPostgresqlOutput_1
														.setTimestamp(
																65,
																new java.sql.Timestamp(
																		MAPPING_EXPORT.dt_e_dati_pag_dati_sing_pag_data_esito_singolo_pagamento
																				.getTime()));
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																65,
																java.sql.Types.TIMESTAMP);
											}

											if (MAPPING_EXPORT.cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																66,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																66,
																MAPPING_EXPORT.cod_e_dati_pag_dati_sing_pag_id_univoco_riscoss);
											}

											if (MAPPING_EXPORT.de_e_dati_pag_dati_sing_pag_causale_versamento == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																67,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																67,
																MAPPING_EXPORT.de_e_dati_pag_dati_sing_pag_causale_versamento);
											}

											if (MAPPING_EXPORT.de_e_dati_pag_dati_sing_pag_dati_specifici_riscossione == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																68,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																68,
																MAPPING_EXPORT.de_e_dati_pag_dati_sing_pag_dati_specifici_riscossione);
											}

											if (MAPPING_EXPORT.cod_tipo_dovuto == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																69,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																69,
																MAPPING_EXPORT.cod_tipo_dovuto);
											}

											if (MAPPING_EXPORT.dt_acquisizione != null) {
												pstmtInsert_tPostgresqlOutput_1
														.setTimestamp(
																70,
																new java.sql.Timestamp(
																		MAPPING_EXPORT.dt_acquisizione
																				.getTime()));
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																70,
																java.sql.Types.TIMESTAMP);
											}

											if (MAPPING_EXPORT.indice_dati_singolo_pagamento == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																71,
																java.sql.Types.INTEGER);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setInt(71,
																MAPPING_EXPORT.indice_dati_singolo_pagamento);
											}

											if (MAPPING_EXPORT.blb_rt_payload == null) {
												pstmtInsert_tPostgresqlOutput_1
														.setNull(
																72,
																java.sql.Types.VARCHAR);
											} else {
												pstmtInsert_tPostgresqlOutput_1
														.setString(
																72,
																MAPPING_EXPORT.blb_rt_payload);
											}

											insertedCount_tPostgresqlOutput_1 = insertedCount_tPostgresqlOutput_1
													+ pstmtInsert_tPostgresqlOutput_1
															.executeUpdate();
											nb_line_tPostgresqlOutput_1++;

										} else {
											nb_line_tPostgresqlOutput_1++;

										}
									} catch (java.lang.Exception e) {

										whetherReject_tPostgresqlOutput_1 = true;
										throw (e);
									}

									tos_count_tPostgresqlOutput_1++;

									/**
									 * [tPostgresqlOutput_1 main ] stop
									 */

								} // End of branch "MAPPING_EXPORT"

								// Start of branch "ERROR_LOAD_CF"
								if (ERROR_LOAD_CF != null) {

									/**
									 * [tJavaRow_1 main ] start
									 */

									currentComponent = "tJavaRow_1";

									globalMap.put("codFiscaleMatch", false);

									nb_line_tJavaRow_1++;

									tos_count_tJavaRow_1++;

									/**
									 * [tJavaRow_1 main ] stop
									 */

								} // End of branch "ERROR_LOAD_CF"

							} // End of branch "row1"

							/**
							 * [tFileInputDelimited_1 end ] start
							 */

							currentComponent = "tFileInputDelimited_1";

							nb_line_tFileInputDelimited_1++;
						}
					}
				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tFileInputDelimited_1",
						end_Hash.get("tFileInputDelimited_1")
								- start_Hash.get("tFileInputDelimited_1"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tMap_3",
						end_Hash.get("tMap_3") - start_Hash.get("tMap_3"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 end ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				if (pstmtUpdate_tPostgresqlOutput_1 != null) {
					pstmtUpdate_tPostgresqlOutput_1.close();
				}
				if (pstmtInsert_tPostgresqlOutput_1 != null) {
					pstmtInsert_tPostgresqlOutput_1.close();
				}

				nb_line_deleted_tPostgresqlOutput_1 = nb_line_deleted_tPostgresqlOutput_1
						+ deletedCount_tPostgresqlOutput_1;
				nb_line_update_tPostgresqlOutput_1 = nb_line_update_tPostgresqlOutput_1
						+ updatedCount_tPostgresqlOutput_1;
				nb_line_inserted_tPostgresqlOutput_1 = nb_line_inserted_tPostgresqlOutput_1
						+ insertedCount_tPostgresqlOutput_1;
				nb_line_rejected_tPostgresqlOutput_1 = nb_line_rejected_tPostgresqlOutput_1
						+ rejectedCount_tPostgresqlOutput_1;

				globalMap.put("tPostgresqlOutput_1_NB_LINE",
						nb_line_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_1);

				ok_Hash.put("tPostgresqlOutput_1", true);
				end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlOutput_1",
						end_Hash.get("tPostgresqlOutput_1")
								- start_Hash.get("tPostgresqlOutput_1"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlOutput_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tJavaRow_1",
						end_Hash.get("tJavaRow_1")
								- start_Hash.get("tJavaRow_1"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tJavaRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row5");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				/**
				 * [tPostgresqlOutput_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements
			routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];
		static byte[] commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_ente_id;

		public long getMygov_ente_id() {
			return this.mygov_ente_id;
		}

		public String cod_ipa_ente;

		public String getCod_ipa_ente() {
			return this.cod_ipa_ente;
		}

		public String codice_fiscale_ente;

		public String getCodice_fiscale_ente() {
			return this.codice_fiscale_ente;
		}

		public String de_nome_ente;

		public String getDe_nome_ente() {
			return this.de_nome_ente;
		}

		public String email_amministratore;

		public String getEmail_amministratore() {
			return this.email_amministratore;
		}

		public java.util.Date dt_creazione;

		public java.util.Date getDt_creazione() {
			return this.dt_creazione;
		}

		public java.util.Date dt_ultima_modifica;

		public java.util.Date getDt_ultima_modifica() {
			return this.dt_ultima_modifica;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.cod_ipa_ente == null) ? 0 : this.cod_ipa_ente
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.cod_ipa_ente == null) {
				if (other.cod_ipa_ente != null)
					return false;

			} else if (!this.cod_ipa_ente.equals(other.cod_ipa_ente))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.mygov_ente_id = this.mygov_ente_id;
			other.cod_ipa_ente = this.cod_ipa_ente;
			other.codice_fiscale_ente = this.codice_fiscale_ente;
			other.de_nome_ente = this.de_nome_ente;
			other.email_amministratore = this.email_amministratore;
			other.dt_creazione = this.dt_creazione;
			other.dt_ultima_modifica = this.dt_ultima_modifica;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.cod_ipa_ente = this.cod_ipa_ente;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length) {
					if (length < 1024
							&& commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length == 0) {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[1024];
					} else {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length);
				strReturn = new String(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1) {

				try {

					int length = 0;

					this.cod_ipa_ente = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.cod_ipa_ente, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.mygov_ente_id = dis.readLong();

				this.codice_fiscale_ente = readString(dis, ois);

				this.de_nome_ente = readString(dis, ois);

				this.email_amministratore = readString(dis, ois);

				this.dt_creazione = readDate(dis, ois);

				this.dt_ultima_modifica = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.mygov_ente_id);

				writeString(this.codice_fiscale_ente, dos, oos);

				writeString(this.de_nome_ente, dos, oos);

				writeString(this.email_amministratore, dos, oos);

				writeDate(this.dt_creazione, dos, oos);

				writeDate(this.dt_ultima_modifica, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_ente_id=" + String.valueOf(mygov_ente_id));
			sb.append(",cod_ipa_ente=" + cod_ipa_ente);
			sb.append(",codice_fiscale_ente=" + codice_fiscale_ente);
			sb.append(",de_nome_ente=" + de_nome_ente);
			sb.append(",email_amministratore=" + email_amministratore);
			sb.append(",dt_creazione=" + String.valueOf(dt_creazione));
			sb.append(",dt_ultima_modifica="
					+ String.valueOf(dt_ultima_modifica));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.cod_ipa_ente,
					other.cod_ipa_ente);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash
						.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tPostgresqlInput_2 -
				// inputs:(after_tFileInputDelimited_1) outputs:(row5,row5) |
				// target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
				// linked node: tMap_3 - inputs:(row1,row5)
				// outputs:(MAPPING_EXPORT,ERROR_LOAD_CF)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct> getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_2", false);
				start_Hash
						.put("tPostgresqlInput_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_2");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_2";

				int tos_count_tPostgresqlInput_2 = 0;

				int nb_line_tPostgresqlInput_2 = 0;
				java.sql.Connection conn_tPostgresqlInput_2 = null;
				conn_tPostgresqlInput_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2
						.createStatement();

				String dbquery_tPostgresqlInput_2 = "SELECT \n  \"mygov_ente\".\"mygov_ente_id\", \n  \"mygov_ente\".\"cod_ipa_ente\", \n  \"mygov_ente\".\"codice_fiscale_ente\", \n  \"mygov_ente\".\"de_nome_ente\", \n  \"mygov_ente\".\"email_amministratore\", \n  \"mygov_ente\".\"dt_creazione\", \n  \"mygov_ente\".\"dt_ultima_modifica\"\nFROM \"mygov_ente\"";

				globalMap.put("tPostgresqlInput_2_QUERY",
						dbquery_tPostgresqlInput_2);

				java.sql.ResultSet rs_tPostgresqlInput_2 = null;
				try {
					rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2
							.executeQuery(dbquery_tPostgresqlInput_2);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2
							.getColumnCount();

					String tmpContent_tPostgresqlInput_2 = null;

					while (rs_tPostgresqlInput_2.next()) {
						nb_line_tPostgresqlInput_2++;

						if (colQtyInRs_tPostgresqlInput_2 < 1) {
							row5.mygov_ente_id = 0;
						} else {

							if (rs_tPostgresqlInput_2.getObject(1) != null) {
								row5.mygov_ente_id = rs_tPostgresqlInput_2
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 2) {
							row5.cod_ipa_ente = null;
						} else {

							tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
									.getString(2);
							if (tmpContent_tPostgresqlInput_2 != null) {
								row5.cod_ipa_ente = tmpContent_tPostgresqlInput_2
										.trim();
							} else {
								row5.cod_ipa_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 3) {
							row5.codice_fiscale_ente = null;
						} else {

							tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
									.getString(3);
							if (tmpContent_tPostgresqlInput_2 != null) {
								row5.codice_fiscale_ente = tmpContent_tPostgresqlInput_2
										.trim();
							} else {
								row5.codice_fiscale_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 4) {
							row5.de_nome_ente = null;
						} else {

							tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
									.getString(4);
							if (tmpContent_tPostgresqlInput_2 != null) {
								row5.de_nome_ente = tmpContent_tPostgresqlInput_2
										.trim();
							} else {
								row5.de_nome_ente = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 5) {
							row5.email_amministratore = null;
						} else {

							tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
									.getString(5);
							if (tmpContent_tPostgresqlInput_2 != null) {
								row5.email_amministratore = tmpContent_tPostgresqlInput_2
										.trim();
							} else {
								row5.email_amministratore = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 6) {
							row5.dt_creazione = null;
						} else {

							if (rs_tPostgresqlInput_2.getTimestamp(6) != null) {
								row5.dt_creazione = new java.util.Date(
										rs_tPostgresqlInput_2.getTimestamp(6)
												.getTime());
							} else {
								row5.dt_creazione = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_2 < 7) {
							row5.dt_ultima_modifica = null;
						} else {

							if (rs_tPostgresqlInput_2.getTimestamp(7) != null) {
								row5.dt_ultima_modifica = new java.util.Date(
										rs_tPostgresqlInput_2.getTimestamp(7)
												.getTime());
							} else {
								row5.dt_ultima_modifica = null;
							}
						}

						/**
						 * [tPostgresqlInput_2 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_2 main ] start
						 */

						currentComponent = "tPostgresqlInput_2";

						tos_count_tPostgresqlInput_2++;

						/**
						 * [tPostgresqlInput_2 main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						row5Struct row5_HashRow = new row5Struct();

						row5_HashRow.mygov_ente_id = row5.mygov_ente_id;

						row5_HashRow.cod_ipa_ente = row5.cod_ipa_ente;

						row5_HashRow.codice_fiscale_ente = row5.codice_fiscale_ente;

						row5_HashRow.de_nome_ente = row5.de_nome_ente;

						row5_HashRow.email_amministratore = row5.email_amministratore;

						row5_HashRow.dt_creazione = row5.dt_creazione;

						row5_HashRow.dt_ultima_modifica = row5.dt_ultima_modifica;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tPostgresqlInput_2 end ] start
						 */

						currentComponent = "tPostgresqlInput_2";

					}
				} finally {
					stmt_tPostgresqlInput_2.close();

				}
				globalMap.put("tPostgresqlInput_2_NB_LINE",
						nb_line_tPostgresqlInput_2);

				ok_Hash.put("tPostgresqlInput_2", true);
				end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_2",
						end_Hash.get("tPostgresqlInput_2")
								- start_Hash.get("tPostgresqlInput_2"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_2 finally ] start
				 */

				currentComponent = "tPostgresqlInput_2";

				/**
				 * [tPostgresqlInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_3 begin ] start
				 */

				ok_Hash.put("tJava_3", false);
				start_Hash.put("tJava_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_3");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_3";

				int tos_count_tJava_3 = 0;

				if ("failure".equalsIgnoreCase(status)) {
					globalMap.put("errorLoadFlussi", true);
				}

				if (((Integer) globalMap.get("tFileInputDelimited_1_NB_LINE")) == null
						|| ((Integer) globalMap
								.get("tFileInputDelimited_1_NB_LINE")) == 0) {

					globalMap.put("errorLoadFlussi", true);
					tLogCatcher_1
							.addMessage(
									"IOException",
									currentComponent,
									6,
									"Problema lettura file "
											+ context.directory_root_enti
											+ "/"
											+ context.cod_ipa_ente
											+ context.de_percorso_file
											+ "/"
											+ context.de_nome_file
											+ ": File .csv formattato scorrettamente verificare il file. Possibile problema di configurazione mybox",
									1);
					tLogCatcher_1Process(globalMap);
				}

				/**
				 * [tJava_3 begin ] stop
				 */

				/**
				 * [tJava_3 main ] start
				 */

				currentComponent = "tJava_3";

				tos_count_tJava_3++;

				/**
				 * [tJava_3 main ] stop
				 */

				/**
				 * [tJava_3 end ] start
				 */

				currentComponent = "tJava_3";

				ok_Hash.put("tJava_3", true);
				end_Hash.put("tJava_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_3",
						end_Hash.get("tJava_3") - start_Hash.get("tJava_3"));
				tStatCatcher_1Process(globalMap);
				if (!((Boolean) globalMap.get("errorLoadFlussi"))) {

					tPostgresqlCommit_1Process(globalMap);
				}

				if (((Boolean) globalMap.get("errorLoadFlussi"))) {

					tPostgresqlRollback_1Process(globalMap);
				}

				/**
				 * [tJava_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlCommit_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlCommit_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlCommit_1", false);
				start_Hash.put("tPostgresqlCommit_1",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlCommit_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlCommit_1";

				int tos_count_tPostgresqlCommit_1 = 0;

				/**
				 * [tPostgresqlCommit_1 begin ] stop
				 */

				/**
				 * [tPostgresqlCommit_1 main ] start
				 */

				currentComponent = "tPostgresqlCommit_1";

				java.sql.Connection conn_tPostgresqlCommit_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (conn_tPostgresqlCommit_1 != null
						&& !conn_tPostgresqlCommit_1.isClosed()) {

					conn_tPostgresqlCommit_1.commit();

				}

				tos_count_tPostgresqlCommit_1++;

				/**
				 * [tPostgresqlCommit_1 main ] stop
				 */

				/**
				 * [tPostgresqlCommit_1 end ] start
				 */

				currentComponent = "tPostgresqlCommit_1";

				ok_Hash.put("tPostgresqlCommit_1", true);
				end_Hash.put("tPostgresqlCommit_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlCommit_1",
						end_Hash.get("tPostgresqlCommit_1")
								- start_Hash.get("tPostgresqlCommit_1"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlCommit_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlCommit_1 finally ] start
				 */

				currentComponent = "tPostgresqlCommit_1";

				/**
				 * [tPostgresqlCommit_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlRollback_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlRollback_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlRollback_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlRollback_1", false);
				start_Hash.put("tPostgresqlRollback_1",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlRollback_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlRollback_1";

				int tos_count_tPostgresqlRollback_1 = 0;

				/**
				 * [tPostgresqlRollback_1 begin ] stop
				 */

				/**
				 * [tPostgresqlRollback_1 main ] start
				 */

				currentComponent = "tPostgresqlRollback_1";

				java.sql.Connection conn_tPostgresqlRollback_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (conn_tPostgresqlRollback_1 != null
						&& !conn_tPostgresqlRollback_1.isClosed()) {

					conn_tPostgresqlRollback_1.rollback();

				}

				tos_count_tPostgresqlRollback_1++;

				/**
				 * [tPostgresqlRollback_1 main ] stop
				 */

				/**
				 * [tPostgresqlRollback_1 end ] start
				 */

				currentComponent = "tPostgresqlRollback_1";

				ok_Hash.put("tPostgresqlRollback_1", true);
				end_Hash.put("tPostgresqlRollback_1",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlRollback_1",
						end_Hash.get("tPostgresqlRollback_1")
								- start_Hash.get("tPostgresqlRollback_1"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlRollback_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlRollback_1 finally ] start
				 */

				currentComponent = "tPostgresqlRollback_1";

				/**
				 * [tPostgresqlRollback_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlRollback_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_4");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				if ("failure".equalsIgnoreCase(status)) {
					globalMap.put("errorLoadFlussi", true);
				}

				/**
				 * [tJava_4 begin ] stop
				 */

				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */

				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_4",
						end_Hash.get("tJava_4") - start_Hash.get("tJava_4"));
				tStatCatcher_1Process(globalMap);
				if (true) {

					tFixedFlowInput_2Process(globalMap);
				}

				/**
				 * [tJava_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_4 finally ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public static class MAPPING_UPDATEStruct implements
			routines.system.IPersistableRow<MAPPING_UPDATEStruct> {
		final static byte[] commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];
		static byte[] commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_manage_flusso_id;

		public long getMygov_manage_flusso_id() {
			return this.mygov_manage_flusso_id;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		public long mygov_anagrafica_stato_id;

		public long getMygov_anagrafica_stato_id() {
			return this.mygov_anagrafica_stato_id;
		}

		public java.util.Date dt_ultima_modifica;

		public java.util.Date getDt_ultima_modifica() {
			return this.dt_ultima_modifica;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.mygov_manage_flusso_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final MAPPING_UPDATEStruct other = (MAPPING_UPDATEStruct) obj;

			if (this.mygov_manage_flusso_id != other.mygov_manage_flusso_id)
				return false;

			return true;
		}

		public void copyDataTo(MAPPING_UPDATEStruct other) {

			other.mygov_manage_flusso_id = this.mygov_manage_flusso_id;
			other.version = this.version;
			other.mygov_anagrafica_stato_id = this.mygov_anagrafica_stato_id;
			other.dt_ultima_modifica = this.dt_ultima_modifica;

		}

		public void copyKeysDataTo(MAPPING_UPDATEStruct other) {

			other.mygov_manage_flusso_id = this.mygov_manage_flusso_id;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1) {

				try {

					int length = 0;

					this.mygov_manage_flusso_id = dis.readLong();

					this.version = dis.readInt();

					this.mygov_anagrafica_stato_id = dis.readLong();

					this.dt_ultima_modifica = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_manage_flusso_id);

				// int

				dos.writeInt(this.version);

				// long

				dos.writeLong(this.mygov_anagrafica_stato_id);

				// java.util.Date

				writeDate(this.dt_ultima_modifica, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_manage_flusso_id="
					+ String.valueOf(mygov_manage_flusso_id));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",mygov_anagrafica_stato_id="
					+ String.valueOf(mygov_anagrafica_stato_id));
			sb.append(",dt_ultima_modifica="
					+ String.valueOf(dt_ultima_modifica));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(MAPPING_UPDATEStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.mygov_manage_flusso_id,
					other.mygov_manage_flusso_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class UPDATE_PRENStruct implements
			routines.system.IPersistableRow<UPDATE_PRENStruct> {
		final static byte[] commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];
		static byte[] commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_ente_prenotazione_id;

		public long getMygov_ente_prenotazione_id() {
			return this.mygov_ente_prenotazione_id;
		}

		public int version;

		public int getVersion() {
			return this.version;
		}

		public long mygov_anagrafica_stato_id;

		public long getMygov_anagrafica_stato_id() {
			return this.mygov_anagrafica_stato_id;
		}

		public java.util.Date dt_ultima_modifica;

		public java.util.Date getDt_ultima_modifica() {
			return this.dt_ultima_modifica;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.mygov_ente_prenotazione_id;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final UPDATE_PRENStruct other = (UPDATE_PRENStruct) obj;

			if (this.mygov_ente_prenotazione_id != other.mygov_ente_prenotazione_id)
				return false;

			return true;
		}

		public void copyDataTo(UPDATE_PRENStruct other) {

			other.mygov_ente_prenotazione_id = this.mygov_ente_prenotazione_id;
			other.version = this.version;
			other.mygov_anagrafica_stato_id = this.mygov_anagrafica_stato_id;
			other.dt_ultima_modifica = this.dt_ultima_modifica;

		}

		public void copyKeysDataTo(UPDATE_PRENStruct other) {

			other.mygov_ente_prenotazione_id = this.mygov_ente_prenotazione_id;

		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1) {

				try {

					int length = 0;

					this.mygov_ente_prenotazione_id = dis.readLong();

					this.version = dis.readInt();

					this.mygov_anagrafica_stato_id = dis.readLong();

					this.dt_ultima_modifica = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_ente_prenotazione_id);

				// int

				dos.writeInt(this.version);

				// long

				dos.writeLong(this.mygov_anagrafica_stato_id);

				// java.util.Date

				writeDate(this.dt_ultima_modifica, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_ente_prenotazione_id="
					+ String.valueOf(mygov_ente_prenotazione_id));
			sb.append(",version=" + String.valueOf(version));
			sb.append(",mygov_anagrafica_stato_id="
					+ String.valueOf(mygov_anagrafica_stato_id));
			sb.append(",dt_ultima_modifica="
					+ String.valueOf(dt_ultima_modifica));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(UPDATE_PRENStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.mygov_ente_prenotazione_id,
					other.mygov_ente_prenotazione_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];
		static byte[] commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];

		public long mygov_manage_flusso_id;

		public long getMygov_manage_flusso_id() {
			return this.mygov_manage_flusso_id;
		}

		public String de_nome_file;

		public String getDe_nome_file() {
			return this.de_nome_file;
		}

		public String de_percorso_file;

		public String getDe_percorso_file() {
			return this.de_percorso_file;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length) {
					if (length < 1024
							&& commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length == 0) {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[1024];
					} else {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length);
				strReturn = new String(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1) {

				try {

					int length = 0;

					this.mygov_manage_flusso_id = dis.readLong();

					this.de_nome_file = readString(dis);

					this.de_percorso_file = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_manage_flusso_id);

				// String

				writeString(this.de_nome_file, dos);

				// String

				writeString(this.de_percorso_file, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_manage_flusso_id="
					+ String.valueOf(mygov_manage_flusso_id));
			sb.append(",de_nome_file=" + de_nome_file);
			sb.append(",de_percorso_file=" + de_percorso_file);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFixedFlowInput_2Struct implements
			routines.system.IPersistableRow<after_tFixedFlowInput_2Struct> {
		final static byte[] commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];
		static byte[] commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];

		public long mygov_manage_flusso_id;

		public long getMygov_manage_flusso_id() {
			return this.mygov_manage_flusso_id;
		}

		public String de_nome_file;

		public String getDe_nome_file() {
			return this.de_nome_file;
		}

		public String de_percorso_file;

		public String getDe_percorso_file() {
			return this.de_percorso_file;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length) {
					if (length < 1024
							&& commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length == 0) {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[1024];
					} else {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length);
				strReturn = new String(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1) {

				try {

					int length = 0;

					this.mygov_manage_flusso_id = dis.readLong();

					this.de_nome_file = readString(dis);

					this.de_percorso_file = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.mygov_manage_flusso_id);

				// String

				writeString(this.de_nome_file, dos);

				// String

				writeString(this.de_percorso_file, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_manage_flusso_id="
					+ String.valueOf(mygov_manage_flusso_id));
			sb.append(",de_nome_file=" + de_nome_file);
			sb.append(",de_percorso_file=" + de_percorso_file);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFixedFlowInput_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_1Process(globalMap);
				tPostgresqlInput_3Process(globalMap);

				row6Struct row6 = new row6Struct();
				MAPPING_UPDATEStruct MAPPING_UPDATE = new MAPPING_UPDATEStruct();
				UPDATE_PRENStruct UPDATE_PREN = new UPDATE_PRENStruct();

				/**
				 * [tPostgresqlOutput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_2", false);
				start_Hash.put("tPostgresqlOutput_2",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlOutput_2");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlOutput_2";

				int tos_count_tPostgresqlOutput_2 = 0;

				String dbschema_tPostgresqlOutput_2 = null;
				dbschema_tPostgresqlOutput_2 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_2 = null;
				if (dbschema_tPostgresqlOutput_2 == null
						|| dbschema_tPostgresqlOutput_2.trim().length() == 0) {
					tableName_tPostgresqlOutput_2 = "mygov_manage_flusso";
				} else {
					tableName_tPostgresqlOutput_2 = dbschema_tPostgresqlOutput_2
							+ "\".\"" + "mygov_manage_flusso";
				}

				int updateKeyCount_tPostgresqlOutput_2 = 1;
				if (updateKeyCount_tPostgresqlOutput_2 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_2 = 0;
				int nb_line_update_tPostgresqlOutput_2 = 0;
				int nb_line_inserted_tPostgresqlOutput_2 = 0;
				int nb_line_deleted_tPostgresqlOutput_2 = 0;
				int nb_line_rejected_tPostgresqlOutput_2 = 0;

				int deletedCount_tPostgresqlOutput_2 = 0;
				int updatedCount_tPostgresqlOutput_2 = 0;
				int insertedCount_tPostgresqlOutput_2 = 0;
				int rejectedCount_tPostgresqlOutput_2 = 0;

				boolean whetherReject_tPostgresqlOutput_2 = false;

				java.sql.Connection conn_tPostgresqlOutput_2 = null;
				String dbUser_tPostgresqlOutput_2 = null;

				conn_tPostgresqlOutput_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int count_tPostgresqlOutput_2 = 0;
				String update_tPostgresqlOutput_2 = "UPDATE \""
						+ tableName_tPostgresqlOutput_2
						+ "\" SET \""
						+ "version"
						+ "\" = "
						+ "version + 1"
						+ ",\"mygov_anagrafica_stato_id\" = ?,\"dt_ultima_modifica\" = ? WHERE \"mygov_manage_flusso_id\" = ?";
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_2 = conn_tPostgresqlOutput_2
						.prepareStatement(update_tPostgresqlOutput_2);

				/**
				 * [tPostgresqlOutput_2 begin ] stop
				 */

				/**
				 * [tPostgresqlOutput_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_3", false);
				start_Hash.put("tPostgresqlOutput_3",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlOutput_3");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlOutput_3";

				int tos_count_tPostgresqlOutput_3 = 0;

				String dbschema_tPostgresqlOutput_3 = null;
				dbschema_tPostgresqlOutput_3 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_1");

				String tableName_tPostgresqlOutput_3 = null;
				if (dbschema_tPostgresqlOutput_3 == null
						|| dbschema_tPostgresqlOutput_3.trim().length() == 0) {
					tableName_tPostgresqlOutput_3 = "mygov_ente_prenotazione";
				} else {
					tableName_tPostgresqlOutput_3 = dbschema_tPostgresqlOutput_3
							+ "\".\"" + "mygov_ente_prenotazione";
				}

				int updateKeyCount_tPostgresqlOutput_3 = 1;
				if (updateKeyCount_tPostgresqlOutput_3 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				int nb_line_tPostgresqlOutput_3 = 0;
				int nb_line_update_tPostgresqlOutput_3 = 0;
				int nb_line_inserted_tPostgresqlOutput_3 = 0;
				int nb_line_deleted_tPostgresqlOutput_3 = 0;
				int nb_line_rejected_tPostgresqlOutput_3 = 0;

				int deletedCount_tPostgresqlOutput_3 = 0;
				int updatedCount_tPostgresqlOutput_3 = 0;
				int insertedCount_tPostgresqlOutput_3 = 0;
				int rejectedCount_tPostgresqlOutput_3 = 0;

				boolean whetherReject_tPostgresqlOutput_3 = false;

				java.sql.Connection conn_tPostgresqlOutput_3 = null;
				String dbUser_tPostgresqlOutput_3 = null;

				conn_tPostgresqlOutput_3 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				int batchSize_tPostgresqlOutput_3 = 10000;
				int batchSizeCounter_tPostgresqlOutput_3 = 0;

				int count_tPostgresqlOutput_3 = 0;
				String update_tPostgresqlOutput_3 = "UPDATE \""
						+ tableName_tPostgresqlOutput_3
						+ "\" SET \""
						+ "version"
						+ "\" = "
						+ "version + 1"
						+ ",\"mygov_anagrafica_stato_id\" = ?,\"dt_ultima_modifica\" = ? WHERE \"mygov_ente_prenotazione_id\" = ?";
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3
						.prepareStatement(update_tPostgresqlOutput_3);

				/**
				 * [tPostgresqlOutput_3 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tMap_4");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tMap_4";

				int tos_count_tMap_4 = 0;

				// ###############################
				// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) globalMap
						.get("tHash_Lookup_row8"));

				row8Struct row8HashKey = new row8Struct();
				row8Struct row8Default = new row8Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) globalMap
						.get("tHash_Lookup_row2"));

				row2Struct row2HashKey = new row2Struct();
				row2Struct row2Default = new row2Struct();
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				MAPPING_UPDATEStruct MAPPING_UPDATE_tmp = new MAPPING_UPDATEStruct();
				UPDATE_PRENStruct UPDATE_PREN_tmp = new UPDATE_PRENStruct();
				// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_2 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_2", false);
				start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tFixedFlowInput_2");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tFixedFlowInput_2";

				int tos_count_tFixedFlowInput_2 = 0;

				for (int i_tFixedFlowInput_2 = 0; i_tFixedFlowInput_2 < 1; i_tFixedFlowInput_2++) {

					row6.mygov_manage_flusso_id = context.mygov_manage_flusso_id;

					row6.de_nome_file = context.de_nome_file;

					row6.de_percorso_file = context.de_percorso_file;

					/**
					 * [tFixedFlowInput_2 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_2 main ] start
					 */

					currentComponent = "tFixedFlowInput_2";

					tos_count_tFixedFlowInput_2++;

					/**
					 * [tFixedFlowInput_2 main ] stop
					 */

					/**
					 * [tMap_4 main ] start
					 */

					currentComponent = "tMap_4";

					boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_4 = false;
					boolean mainRowRejected_tMap_4 = false;

					// /////////////////////////////////////////////
					// Starting Lookup Table "row8"
					// /////////////////////////////////////////////

					boolean forceLooprow8 = false;

					row8Struct row8ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_4 = false;

						row8HashKey.cod_stato = (Boolean) globalMap
								.get("errorLoadFlussi") ? "ERROR_LOAD"
								: ((Boolean) globalMap.get("codFiscaleMatch") ? "FILE_CARICATO"
										: "ERROR_CF_ENTE");

						row8HashKey.de_tipo_stato = "MANAGE";

						row8HashKey.hashCodeDirty = true;

						tHash_Lookup_row8.lookup(row8HashKey);

					} // G_TM_M_020

					if (tHash_Lookup_row8 != null
							&& tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G
																				// 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.cod_stato = '"
						// + row8HashKey.cod_stato + "', row8.de_tipo_stato = '"
						// + row8HashKey.de_tipo_stato + "'");
					} // G 071

					row8Struct row8 = null;

					row8Struct fromLookup_row8 = null;
					row8 = row8Default;

					if (tHash_Lookup_row8 != null
							&& tHash_Lookup_row8.hasNext()) { // G 099

						fromLookup_row8 = tHash_Lookup_row8.next();

					} // G 099

					if (fromLookup_row8 != null) {
						row8 = fromLookup_row8;
					}

					// /////////////////////////////////////////////
					// Starting Lookup Table "row2"
					// /////////////////////////////////////////////

					boolean forceLooprow2 = false;

					row2Struct row2ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_4 = false;

						row2HashKey.cod_stato = (Boolean) globalMap
								.get("errorLoadFlussi")
								|| !(Boolean) globalMap.get("codFiscaleMatch") ? "ERROR_LOAD"
								: "LOAD";

						row2HashKey.de_tipo_stato = "FLUSSO_EXPORT";

						row2HashKey.hashCodeDirty = true;

						tHash_Lookup_row2.lookup(row2HashKey);

					} // G_TM_M_020

					if (tHash_Lookup_row2 != null
							&& tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G
																				// 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.cod_stato = '"
						// + row2HashKey.cod_stato + "', row2.de_tipo_stato = '"
						// + row2HashKey.de_tipo_stato + "'");
					} // G 071

					row2Struct row2 = null;

					row2Struct fromLookup_row2 = null;
					row2 = row2Default;

					if (tHash_Lookup_row2 != null
							&& tHash_Lookup_row2.hasNext()) { // G 099

						fromLookup_row2 = tHash_Lookup_row2.next();

					} // G 099

					if (fromLookup_row2 != null) {
						row2 = fromLookup_row2;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
						// ###############################
						// # Output tables

						MAPPING_UPDATE = null;
						UPDATE_PREN = null;

						// # Output table : 'MAPPING_UPDATE'
						MAPPING_UPDATE_tmp.mygov_manage_flusso_id = row6.mygov_manage_flusso_id;
						MAPPING_UPDATE_tmp.version = 0;
						MAPPING_UPDATE_tmp.mygov_anagrafica_stato_id = row8.mygov_anagrafica_stato_id;
						MAPPING_UPDATE_tmp.dt_ultima_modifica = TalendDate
								.getCurrentDate();
						MAPPING_UPDATE = MAPPING_UPDATE_tmp;

						// # Output table : 'UPDATE_PREN'
						// # Filter conditions
						if (

						context.mygov_ente_prenotazione_id != null

						) {
							UPDATE_PREN_tmp.mygov_ente_prenotazione_id = context.mygov_ente_prenotazione_id;
							UPDATE_PREN_tmp.version = 0;
							UPDATE_PREN_tmp.mygov_anagrafica_stato_id = row2.mygov_anagrafica_stato_id;
							UPDATE_PREN_tmp.dt_ultima_modifica = TalendDate
									.getCurrentDate();
							UPDATE_PREN = UPDATE_PREN_tmp;
						} // closing filter/reject
							// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_4 = false;

					tos_count_tMap_4++;

					/**
					 * [tMap_4 main ] stop
					 */
					// Start of branch "MAPPING_UPDATE"
					if (MAPPING_UPDATE != null) {

						/**
						 * [tPostgresqlOutput_2 main ] start
						 */

						currentComponent = "tPostgresqlOutput_2";

						whetherReject_tPostgresqlOutput_2 = false;
						pstmt_tPostgresqlOutput_2.setLong(1,
								MAPPING_UPDATE.mygov_anagrafica_stato_id);

						if (MAPPING_UPDATE.dt_ultima_modifica != null) {
							pstmt_tPostgresqlOutput_2.setTimestamp(
									2,
									new java.sql.Timestamp(
											MAPPING_UPDATE.dt_ultima_modifica
													.getTime()));
						} else {
							pstmt_tPostgresqlOutput_2.setNull(2,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tPostgresqlOutput_2.setLong(
								3 + count_tPostgresqlOutput_2,
								MAPPING_UPDATE.mygov_manage_flusso_id);

						try {
							nb_line_tPostgresqlOutput_2++;

							updatedCount_tPostgresqlOutput_2 = updatedCount_tPostgresqlOutput_2
									+ pstmt_tPostgresqlOutput_2.executeUpdate();

						} catch (java.lang.Exception e) {

							whetherReject_tPostgresqlOutput_2 = true;
							System.err.print(e.getMessage());
						}

						tos_count_tPostgresqlOutput_2++;

						/**
						 * [tPostgresqlOutput_2 main ] stop
						 */

					} // End of branch "MAPPING_UPDATE"

					// Start of branch "UPDATE_PREN"
					if (UPDATE_PREN != null) {

						/**
						 * [tPostgresqlOutput_3 main ] start
						 */

						currentComponent = "tPostgresqlOutput_3";

						whetherReject_tPostgresqlOutput_3 = false;
						pstmt_tPostgresqlOutput_3.setLong(1,
								UPDATE_PREN.mygov_anagrafica_stato_id);

						if (UPDATE_PREN.dt_ultima_modifica != null) {
							pstmt_tPostgresqlOutput_3.setTimestamp(
									2,
									new java.sql.Timestamp(
											UPDATE_PREN.dt_ultima_modifica
													.getTime()));
						} else {
							pstmt_tPostgresqlOutput_3.setNull(2,
									java.sql.Types.TIMESTAMP);
						}

						pstmt_tPostgresqlOutput_3.setLong(
								3 + count_tPostgresqlOutput_3,
								UPDATE_PREN.mygov_ente_prenotazione_id);

						pstmt_tPostgresqlOutput_3.addBatch();
						nb_line_tPostgresqlOutput_3++;

						batchSizeCounter_tPostgresqlOutput_3++;

						if ((batchSize_tPostgresqlOutput_3 > 0)
								&& (batchSize_tPostgresqlOutput_3 <= batchSizeCounter_tPostgresqlOutput_3)) {
							try {
								int countSum_tPostgresqlOutput_3 = 0;

								for (int countEach_tPostgresqlOutput_3 : pstmt_tPostgresqlOutput_3
										.executeBatch()) {
									countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0
											: countEach_tPostgresqlOutput_3);
								}

								updatedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;

								batchSizeCounter_tPostgresqlOutput_3 = 0;
							} catch (java.sql.BatchUpdateException e) {

								throw (e);

							}
						}

						tos_count_tPostgresqlOutput_3++;

						/**
						 * [tPostgresqlOutput_3 main ] stop
						 */

					} // End of branch "UPDATE_PREN"

					/**
					 * [tFixedFlowInput_2 end ] start
					 */

					currentComponent = "tFixedFlowInput_2";

				}
				globalMap.put("tFixedFlowInput_2_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_2", true);
				end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tFixedFlowInput_2",
						end_Hash.get("tFixedFlowInput_2")
								- start_Hash.get("tFixedFlowInput_2"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tFixedFlowInput_2 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

				// ###############################
				// # Lookup hashes releasing
				if (tHash_Lookup_row8 != null) {
					tHash_Lookup_row8.endGet();
				}
				globalMap.remove("tHash_Lookup_row8");

				if (tHash_Lookup_row2 != null) {
					tHash_Lookup_row2.endGet();
				}
				globalMap.remove("tHash_Lookup_row2");

				// ###############################

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tMap_4",
						end_Hash.get("tMap_4") - start_Hash.get("tMap_4"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_2 end ] start
				 */

				currentComponent = "tPostgresqlOutput_2";

				if (pstmt_tPostgresqlOutput_2 != null) {
					pstmt_tPostgresqlOutput_2.close();
				}

				nb_line_deleted_tPostgresqlOutput_2 = nb_line_deleted_tPostgresqlOutput_2
						+ deletedCount_tPostgresqlOutput_2;
				nb_line_update_tPostgresqlOutput_2 = nb_line_update_tPostgresqlOutput_2
						+ updatedCount_tPostgresqlOutput_2;
				nb_line_inserted_tPostgresqlOutput_2 = nb_line_inserted_tPostgresqlOutput_2
						+ insertedCount_tPostgresqlOutput_2;
				nb_line_rejected_tPostgresqlOutput_2 = nb_line_rejected_tPostgresqlOutput_2
						+ rejectedCount_tPostgresqlOutput_2;

				globalMap.put("tPostgresqlOutput_2_NB_LINE",
						nb_line_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_2);
				globalMap.put("tPostgresqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_2);

				ok_Hash.put("tPostgresqlOutput_2", true);
				end_Hash.put("tPostgresqlOutput_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlOutput_2",
						end_Hash.get("tPostgresqlOutput_2")
								- start_Hash.get("tPostgresqlOutput_2"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlOutput_2 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_3 end ] start
				 */

				currentComponent = "tPostgresqlOutput_3";

				try {
					int countSum_tPostgresqlOutput_3 = 0;
					if (pstmt_tPostgresqlOutput_3 != null
							&& batchSizeCounter_tPostgresqlOutput_3 > 0) {

						for (int countEach_tPostgresqlOutput_3 : pstmt_tPostgresqlOutput_3
								.executeBatch()) {
							countSum_tPostgresqlOutput_3 += (countEach_tPostgresqlOutput_3 < 0 ? 0
									: countEach_tPostgresqlOutput_3);
						}

					}

					updatedCount_tPostgresqlOutput_3 += countSum_tPostgresqlOutput_3;

				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}

				if (pstmt_tPostgresqlOutput_3 != null) {
					pstmt_tPostgresqlOutput_3.close();
				}

				nb_line_deleted_tPostgresqlOutput_3 = nb_line_deleted_tPostgresqlOutput_3
						+ deletedCount_tPostgresqlOutput_3;
				nb_line_update_tPostgresqlOutput_3 = nb_line_update_tPostgresqlOutput_3
						+ updatedCount_tPostgresqlOutput_3;
				nb_line_inserted_tPostgresqlOutput_3 = nb_line_inserted_tPostgresqlOutput_3
						+ insertedCount_tPostgresqlOutput_3;
				nb_line_rejected_tPostgresqlOutput_3 = nb_line_rejected_tPostgresqlOutput_3
						+ rejectedCount_tPostgresqlOutput_3;

				globalMap.put("tPostgresqlOutput_3_NB_LINE",
						nb_line_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_3);

				ok_Hash.put("tPostgresqlOutput_3", true);
				end_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlOutput_3",
						end_Hash.get("tPostgresqlOutput_3")
								- start_Hash.get("tPostgresqlOutput_3"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row8");

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row2");

			try {

				/**
				 * [tFixedFlowInput_2 finally ] start
				 */

				currentComponent = "tFixedFlowInput_2";

				/**
				 * [tFixedFlowInput_2 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_2 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_2";

				/**
				 * [tPostgresqlOutput_2 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_3 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_3";

				/**
				 * [tPostgresqlOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableComparableLookupRow<row8Struct> {
		final static byte[] commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];
		static byte[] commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_anagrafica_stato_id;

		public long getMygov_anagrafica_stato_id() {
			return this.mygov_anagrafica_stato_id;
		}

		public String cod_stato;

		public String getCod_stato() {
			return this.cod_stato;
		}

		public String de_stato;

		public String getDe_stato() {
			return this.de_stato;
		}

		public String de_tipo_stato;

		public String getDe_tipo_stato() {
			return this.de_tipo_stato;
		}

		public java.util.Date dt_creazione;

		public java.util.Date getDt_creazione() {
			return this.dt_creazione;
		}

		public java.util.Date dt_ultima_modifica;

		public java.util.Date getDt_ultima_modifica() {
			return this.dt_ultima_modifica;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.cod_stato == null) ? 0 : this.cod_stato
								.hashCode());

				result = prime
						* result
						+ ((this.de_tipo_stato == null) ? 0
								: this.de_tipo_stato.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.cod_stato == null) {
				if (other.cod_stato != null)
					return false;

			} else if (!this.cod_stato.equals(other.cod_stato))

				return false;

			if (this.de_tipo_stato == null) {
				if (other.de_tipo_stato != null)
					return false;

			} else if (!this.de_tipo_stato.equals(other.de_tipo_stato))

				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.mygov_anagrafica_stato_id = this.mygov_anagrafica_stato_id;
			other.cod_stato = this.cod_stato;
			other.de_stato = this.de_stato;
			other.de_tipo_stato = this.de_tipo_stato;
			other.dt_creazione = this.dt_creazione;
			other.dt_ultima_modifica = this.dt_ultima_modifica;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.cod_stato = this.cod_stato;
			other.de_tipo_stato = this.de_tipo_stato;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length) {
					if (length < 1024
							&& commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length == 0) {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[1024];
					} else {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length);
				strReturn = new String(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1) {

				try {

					int length = 0;

					this.cod_stato = readString(dis);

					this.de_tipo_stato = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.cod_stato, dos);

				// String

				writeString(this.de_tipo_stato, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.mygov_anagrafica_stato_id = dis.readLong();

				this.de_stato = readString(dis, ois);

				this.dt_creazione = readDate(dis, ois);

				this.dt_ultima_modifica = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.mygov_anagrafica_stato_id);

				writeString(this.de_stato, dos, oos);

				writeDate(this.dt_creazione, dos, oos);

				writeDate(this.dt_ultima_modifica, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_anagrafica_stato_id="
					+ String.valueOf(mygov_anagrafica_stato_id));
			sb.append(",cod_stato=" + cod_stato);
			sb.append(",de_stato=" + de_stato);
			sb.append(",de_tipo_stato=" + de_tipo_stato);
			sb.append(",dt_creazione=" + String.valueOf(dt_creazione));
			sb.append(",dt_ultima_modifica="
					+ String.valueOf(dt_ultima_modifica));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.cod_stato, other.cod_stato);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.de_tipo_stato,
					other.de_tipo_stato);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tAdvancedHash_row8 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row8", false);
				start_Hash
						.put("tAdvancedHash_row8", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row8";

				int tos_count_tAdvancedHash_row8 = 0;

				// connection name:row8
				// source node:tPostgresqlInput_1 -
				// inputs:(after_tFixedFlowInput_2) outputs:(row8,row8) | target
				// node:tAdvancedHash_row8 - inputs:(row8) outputs:()
				// linked node: tMap_4 - inputs:(row6,row8,row2)
				// outputs:(MAPPING_UPDATE,UPDATE_PREN)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row8Struct> getLookup(matchingModeEnum_row8);

				globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);

				/**
				 * [tAdvancedHash_row8 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_1", false);
				start_Hash
						.put("tPostgresqlInput_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_1";

				int tos_count_tPostgresqlInput_1 = 0;

				int nb_line_tPostgresqlInput_1 = 0;
				java.sql.Connection conn_tPostgresqlInput_1 = null;
				conn_tPostgresqlInput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1
						.createStatement();

				String dbquery_tPostgresqlInput_1 = "SELECT \n  \"mygov_anagrafica_stato\".\"mygov_anagrafica_stato_id\",  \n  \"mygov_anagrafica_stato\".\"cod_stato\", \n  \"mygov_anagrafica_stato\".\"de_stato\", \n  \"mygov_anagrafica_stato\".\"de_tipo_stato\", \n  \"mygov_anagrafica_stato\".\"dt_creazione\", \n  \"mygov_anagrafica_stato\".\"dt_ultima_modifica\"\nFROM \"mygov_anagrafica_stato\"";

				globalMap.put("tPostgresqlInput_1_QUERY",
						dbquery_tPostgresqlInput_1);

				java.sql.ResultSet rs_tPostgresqlInput_1 = null;
				try {
					rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1
							.executeQuery(dbquery_tPostgresqlInput_1);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1
							.getColumnCount();

					String tmpContent_tPostgresqlInput_1 = null;

					while (rs_tPostgresqlInput_1.next()) {
						nb_line_tPostgresqlInput_1++;

						if (colQtyInRs_tPostgresqlInput_1 < 1) {
							row8.mygov_anagrafica_stato_id = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(1) != null) {
								row8.mygov_anagrafica_stato_id = rs_tPostgresqlInput_1
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 2) {
							row8.cod_stato = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(2);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row8.cod_stato = tmpContent_tPostgresqlInput_1
										.trim();
							} else {
								row8.cod_stato = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 3) {
							row8.de_stato = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(3);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row8.de_stato = tmpContent_tPostgresqlInput_1
										.trim();
							} else {
								row8.de_stato = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 4) {
							row8.de_tipo_stato = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(4);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row8.de_tipo_stato = tmpContent_tPostgresqlInput_1
										.trim();
							} else {
								row8.de_tipo_stato = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 5) {
							row8.dt_creazione = null;
						} else {

							if (rs_tPostgresqlInput_1.getTimestamp(5) != null) {
								row8.dt_creazione = new java.util.Date(
										rs_tPostgresqlInput_1.getTimestamp(5)
												.getTime());
							} else {
								row8.dt_creazione = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_1 < 6) {
							row8.dt_ultima_modifica = null;
						} else {

							if (rs_tPostgresqlInput_1.getTimestamp(6) != null) {
								row8.dt_ultima_modifica = new java.util.Date(
										rs_tPostgresqlInput_1.getTimestamp(6)
												.getTime());
							} else {
								row8.dt_ultima_modifica = null;
							}
						}

						/**
						 * [tPostgresqlInput_1 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_1 main ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						tos_count_tPostgresqlInput_1++;

						/**
						 * [tPostgresqlInput_1 main ] stop
						 */

						/**
						 * [tAdvancedHash_row8 main ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						row8Struct row8_HashRow = new row8Struct();

						row8_HashRow.mygov_anagrafica_stato_id = row8.mygov_anagrafica_stato_id;

						row8_HashRow.cod_stato = row8.cod_stato;

						row8_HashRow.de_stato = row8.de_stato;

						row8_HashRow.de_tipo_stato = row8.de_tipo_stato;

						row8_HashRow.dt_creazione = row8.dt_creazione;

						row8_HashRow.dt_ultima_modifica = row8.dt_ultima_modifica;

						tHash_Lookup_row8.put(row8_HashRow);

						tos_count_tAdvancedHash_row8++;

						/**
						 * [tAdvancedHash_row8 main ] stop
						 */

						/**
						 * [tPostgresqlInput_1 end ] start
						 */

						currentComponent = "tPostgresqlInput_1";

					}
				} finally {
					stmt_tPostgresqlInput_1.close();

				}
				globalMap.put("tPostgresqlInput_1_NB_LINE",
						nb_line_tPostgresqlInput_1);

				ok_Hash.put("tPostgresqlInput_1", true);
				end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_1",
						end_Hash.get("tPostgresqlInput_1")
								- start_Hash.get("tPostgresqlInput_1"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row8 end ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				tHash_Lookup_row8.endPut();

				ok_Hash.put("tAdvancedHash_row8", true);
				end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row8 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_1 finally ] start
				 */

				currentComponent = "tPostgresqlInput_1";

				/**
				 * [tPostgresqlInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row8 finally ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				/**
				 * [tAdvancedHash_row8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableComparableLookupRow<row2Struct> {
		final static byte[] commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];
		static byte[] commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public long mygov_anagrafica_stato_id;

		public long getMygov_anagrafica_stato_id() {
			return this.mygov_anagrafica_stato_id;
		}

		public String cod_stato;

		public String getCod_stato() {
			return this.cod_stato;
		}

		public String de_stato;

		public String getDe_stato() {
			return this.de_stato;
		}

		public String de_tipo_stato;

		public String getDe_tipo_stato() {
			return this.de_tipo_stato;
		}

		public java.util.Date dt_creazione;

		public java.util.Date getDt_creazione() {
			return this.dt_creazione;
		}

		public java.util.Date dt_ultima_modifica;

		public java.util.Date getDt_ultima_modifica() {
			return this.dt_ultima_modifica;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime
						* result
						+ ((this.cod_stato == null) ? 0 : this.cod_stato
								.hashCode());

				result = prime
						* result
						+ ((this.de_tipo_stato == null) ? 0
								: this.de_tipo_stato.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.cod_stato == null) {
				if (other.cod_stato != null)
					return false;

			} else if (!this.cod_stato.equals(other.cod_stato))

				return false;

			if (this.de_tipo_stato == null) {
				if (other.de_tipo_stato != null)
					return false;

			} else if (!this.de_tipo_stato.equals(other.de_tipo_stato))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.mygov_anagrafica_stato_id = this.mygov_anagrafica_stato_id;
			other.cod_stato = this.cod_stato;
			other.de_stato = this.de_stato;
			other.de_tipo_stato = this.de_tipo_stato;
			other.dt_creazione = this.dt_creazione;
			other.dt_ultima_modifica = this.dt_ultima_modifica;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.cod_stato = this.cod_stato;
			other.de_tipo_stato = this.de_tipo_stato;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length) {
					if (length < 1024
							&& commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length == 0) {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[1024];
					} else {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length);
				strReturn = new String(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis,
				ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1) {

				try {

					int length = 0;

					this.cod_stato = readString(dis);

					this.de_tipo_stato = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.cod_stato, dos);

				// String

				writeString(this.de_tipo_stato, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.mygov_anagrafica_stato_id = dis.readLong();

				this.de_stato = readString(dis, ois);

				this.dt_creazione = readDate(dis, ois);

				this.dt_ultima_modifica = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeLong(this.mygov_anagrafica_stato_id);

				writeString(this.de_stato, dos, oos);

				writeDate(this.dt_creazione, dos, oos);

				writeDate(this.dt_ultima_modifica, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("mygov_anagrafica_stato_id="
					+ String.valueOf(mygov_anagrafica_stato_id));
			sb.append(",cod_stato=" + cod_stato);
			sb.append(",de_stato=" + de_stato);
			sb.append(",de_tipo_stato=" + de_tipo_stato);
			sb.append(",dt_creazione=" + String.valueOf(dt_creazione));
			sb.append(",dt_ultima_modifica="
					+ String.valueOf(dt_ultima_modifica));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.cod_stato, other.cod_stato);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.de_tipo_stato,
					other.de_tipo_stato);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tAdvancedHash_row2 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row2", false);
				start_Hash
						.put("tAdvancedHash_row2", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row2";

				int tos_count_tAdvancedHash_row2 = 0;

				// connection name:row2
				// source node:tPostgresqlInput_3 -
				// inputs:(after_tFixedFlowInput_2) outputs:(row2,row2) | target
				// node:tAdvancedHash_row2 - inputs:(row2) outputs:()
				// linked node: tMap_4 - inputs:(row6,row8,row2)
				// outputs:(MAPPING_UPDATE,UPDATE_PREN)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row2Struct> getLookup(matchingModeEnum_row2);

				globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);

				/**
				 * [tAdvancedHash_row2 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_3", false);
				start_Hash
						.put("tPostgresqlInput_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlInput_3");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlInput_3";

				int tos_count_tPostgresqlInput_3 = 0;

				int nb_line_tPostgresqlInput_3 = 0;
				java.sql.Connection conn_tPostgresqlInput_3 = null;
				conn_tPostgresqlInput_3 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_3 = conn_tPostgresqlInput_3
						.createStatement();

				String dbquery_tPostgresqlInput_3 = "SELECT \n  \"mygov_anagrafica_stato\".\"mygov_anagrafica_stato_id\",  \n  \"mygov_anagrafica_stato\".\"cod_stato\", \n  \"mygov_anagrafica_stato\".\"de_stato\", \n  \"mygov_anagrafica_stato\".\"de_tipo_stato\", \n  \"mygov_anagrafica_stato\".\"dt_creazione\", \n  \"mygov_anagrafica_stato\".\"dt_ultima_modifica\"\nFROM \"mygov_anagrafica_stato\"";

				globalMap.put("tPostgresqlInput_3_QUERY",
						dbquery_tPostgresqlInput_3);

				java.sql.ResultSet rs_tPostgresqlInput_3 = null;
				try {
					rs_tPostgresqlInput_3 = stmt_tPostgresqlInput_3
							.executeQuery(dbquery_tPostgresqlInput_3);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_3 = rs_tPostgresqlInput_3
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_3 = rsmd_tPostgresqlInput_3
							.getColumnCount();

					String tmpContent_tPostgresqlInput_3 = null;

					while (rs_tPostgresqlInput_3.next()) {
						nb_line_tPostgresqlInput_3++;

						if (colQtyInRs_tPostgresqlInput_3 < 1) {
							row2.mygov_anagrafica_stato_id = 0;
						} else {

							if (rs_tPostgresqlInput_3.getObject(1) != null) {
								row2.mygov_anagrafica_stato_id = rs_tPostgresqlInput_3
										.getLong(1);
							} else {
								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 2) {
							row2.cod_stato = null;
						} else {

							tmpContent_tPostgresqlInput_3 = rs_tPostgresqlInput_3
									.getString(2);
							if (tmpContent_tPostgresqlInput_3 != null) {
								row2.cod_stato = tmpContent_tPostgresqlInput_3
										.trim();
							} else {
								row2.cod_stato = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 3) {
							row2.de_stato = null;
						} else {

							tmpContent_tPostgresqlInput_3 = rs_tPostgresqlInput_3
									.getString(3);
							if (tmpContent_tPostgresqlInput_3 != null) {
								row2.de_stato = tmpContent_tPostgresqlInput_3
										.trim();
							} else {
								row2.de_stato = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 4) {
							row2.de_tipo_stato = null;
						} else {

							tmpContent_tPostgresqlInput_3 = rs_tPostgresqlInput_3
									.getString(4);
							if (tmpContent_tPostgresqlInput_3 != null) {
								row2.de_tipo_stato = tmpContent_tPostgresqlInput_3
										.trim();
							} else {
								row2.de_tipo_stato = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 5) {
							row2.dt_creazione = null;
						} else {

							if (rs_tPostgresqlInput_3.getTimestamp(5) != null) {
								row2.dt_creazione = new java.util.Date(
										rs_tPostgresqlInput_3.getTimestamp(5)
												.getTime());
							} else {
								row2.dt_creazione = null;
							}
						}
						if (colQtyInRs_tPostgresqlInput_3 < 6) {
							row2.dt_ultima_modifica = null;
						} else {

							if (rs_tPostgresqlInput_3.getTimestamp(6) != null) {
								row2.dt_ultima_modifica = new java.util.Date(
										rs_tPostgresqlInput_3.getTimestamp(6)
												.getTime());
							} else {
								row2.dt_ultima_modifica = null;
							}
						}

						/**
						 * [tPostgresqlInput_3 begin ] stop
						 */

						/**
						 * [tPostgresqlInput_3 main ] start
						 */

						currentComponent = "tPostgresqlInput_3";

						tos_count_tPostgresqlInput_3++;

						/**
						 * [tPostgresqlInput_3 main ] stop
						 */

						/**
						 * [tAdvancedHash_row2 main ] start
						 */

						currentComponent = "tAdvancedHash_row2";

						row2Struct row2_HashRow = new row2Struct();

						row2_HashRow.mygov_anagrafica_stato_id = row2.mygov_anagrafica_stato_id;

						row2_HashRow.cod_stato = row2.cod_stato;

						row2_HashRow.de_stato = row2.de_stato;

						row2_HashRow.de_tipo_stato = row2.de_tipo_stato;

						row2_HashRow.dt_creazione = row2.dt_creazione;

						row2_HashRow.dt_ultima_modifica = row2.dt_ultima_modifica;

						tHash_Lookup_row2.put(row2_HashRow);

						tos_count_tAdvancedHash_row2++;

						/**
						 * [tAdvancedHash_row2 main ] stop
						 */

						/**
						 * [tPostgresqlInput_3 end ] start
						 */

						currentComponent = "tPostgresqlInput_3";

					}
				} finally {
					stmt_tPostgresqlInput_3.close();

				}
				globalMap.put("tPostgresqlInput_3_NB_LINE",
						nb_line_tPostgresqlInput_3);

				ok_Hash.put("tPostgresqlInput_3", true);
				end_Hash.put("tPostgresqlInput_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlInput_3",
						end_Hash.get("tPostgresqlInput_3")
								- start_Hash.get("tPostgresqlInput_3"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row2 end ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				tHash_Lookup_row2.endPut();

				ok_Hash.put("tAdvancedHash_row2", true);
				end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_3 finally ] start
				 */

				currentComponent = "tPostgresqlInput_3";

				/**
				 * [tPostgresqlInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row2 finally ] start
				 */

				currentComponent = "tAdvancedHash_row2";

				/**
				 * [tAdvancedHash_row2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_3_SUBPROCESS_STATE", 1);
	}

	public void tJava_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tJava_5");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				if ("failure".equalsIgnoreCase(status)) {
					globalMap.put("errorLoadFlussi", true);
				}

				/**
				 * [tJava_5 begin ] stop
				 */

				/**
				 * [tJava_5 main ] start
				 */

				currentComponent = "tJava_5";

				tos_count_tJava_5++;

				/**
				 * [tJava_5 main ] stop
				 */

				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tJava_5",
						end_Hash.get("tJava_5") - start_Hash.get("tJava_5"));
				tStatCatcher_1Process(globalMap);
				if (true) {

					tLog4J_5Process(globalMap);
				}

				if (!(Boolean) globalMap.get("errorLoadFlussi")
						&& !context.is_ws && !context.is_user_java) {

					tRunJob_2Process(globalMap);
				}

				if ((Boolean) globalMap.get("errorLoadFlussi")
						&& !context.is_user_java) {

					tRunJob_3Process(globalMap);
				}

				/**
				 * [tJava_5 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_5 finally ] start
				 */

				currentComponent = "tJava_5";

				/**
				 * [tJava_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}

	public void tLog4J_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLog4J_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLog4J_5 begin ] start
				 */

				ok_Hash.put("tLog4J_5", false);
				start_Hash.put("tLog4J_5", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tLog4J_5");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tLog4J_5";

				int tos_count_tLog4J_5 = 0;

				org.apache.log4j.Logger logger_tLog4J_5 = org.apache.log4j.Logger
						.getLogger(this.getClass());

				int nb_line_tLog4J_5 = 0;
				int nb_logged_line_tLog4J_5 = 0;

				/**
				 * [tLog4J_5 begin ] stop
				 */

				/**
				 * [tLog4J_5 main ] start
				 */

				currentComponent = "tLog4J_5";

				logger_tLog4J_5.info("Fine caricamento file: "
						+ context.de_nome_file);
				nb_logged_line_tLog4J_5++;

				nb_line_tLog4J_5++;

				tos_count_tLog4J_5++;

				/**
				 * [tLog4J_5 main ] stop
				 */

				/**
				 * [tLog4J_5 end ] start
				 */

				currentComponent = "tLog4J_5";

				globalMap.put("tLog4J_5_NB_LINE", nb_line_tLog4J_5);
				globalMap.put("tLog4J_5_NB_LOGGED_LINE",
						nb_logged_line_tLog4J_5);

				ok_Hash.put("tLog4J_5", true);
				end_Hash.put("tLog4J_5", System.currentTimeMillis());

				tStatCatcher_1.addMessage("end", "tLog4J_5",
						end_Hash.get("tLog4J_5") - start_Hash.get("tLog4J_5"));
				tStatCatcher_1Process(globalMap);
				if (true) {

					tPostgresqlCommit_2Process(globalMap);
				}

				/**
				 * [tLog4J_5 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLog4J_5 finally ] start
				 */

				currentComponent = "tLog4J_5";

				/**
				 * [tLog4J_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLog4J_5_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlCommit_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlCommit_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlCommit_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlCommit_2", false);
				start_Hash.put("tPostgresqlCommit_2",
						System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tPostgresqlCommit_2");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tPostgresqlCommit_2";

				int tos_count_tPostgresqlCommit_2 = 0;

				/**
				 * [tPostgresqlCommit_2 begin ] stop
				 */

				/**
				 * [tPostgresqlCommit_2 main ] start
				 */

				currentComponent = "tPostgresqlCommit_2";

				java.sql.Connection conn_tPostgresqlCommit_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (conn_tPostgresqlCommit_2 != null
						&& !conn_tPostgresqlCommit_2.isClosed()) {

					try {

						conn_tPostgresqlCommit_2.commit();

					} finally {

						conn_tPostgresqlCommit_2.close();

					}

				}

				tos_count_tPostgresqlCommit_2++;

				/**
				 * [tPostgresqlCommit_2 main ] stop
				 */

				/**
				 * [tPostgresqlCommit_2 end ] start
				 */

				currentComponent = "tPostgresqlCommit_2";

				ok_Hash.put("tPostgresqlCommit_2", true);
				end_Hash.put("tPostgresqlCommit_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage(
						"end",
						"tPostgresqlCommit_2",
						end_Hash.get("tPostgresqlCommit_2")
								- start_Hash.get("tPostgresqlCommit_2"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tPostgresqlCommit_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlCommit_2 finally ] start
				 */

				currentComponent = "tPostgresqlCommit_2";

				/**
				 * [tPostgresqlCommit_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlCommit_2_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tRunJob_2");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				/**
				 * [tRunJob_2 begin ] stop
				 */

				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

				paraList_tRunJob_2.add("--father_pid=" + pid);

				paraList_tRunJob_2.add("--root_pid=" + rootPid);

				paraList_tRunJob_2.add("--father_node=tRunJob_2");

				paraList_tRunJob_2.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_2.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2)
						&& childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_2");

				java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_2 = context
						.propertyNames();
				while (propertyNames_tRunJob_2.hasMoreElements()) {
					String key_tRunJob_2 = (String) propertyNames_tRunJob_2
							.nextElement();
					Object value_tRunJob_2 = (Object) context
							.get(key_tRunJob_2);
					paraList_tRunJob_2.add("--context_param " + key_tRunJob_2
							+ "=" + value_tRunJob_2);
				}

				parentContextMap_tRunJob_2.put("de_nome_file",
						context.de_nome_file);

				parentContextMap_tRunJob_2.put("de_percorso_file",
						context.de_percorso_file);

				parentContextMap_tRunJob_2.put("mygov_manage_flusso_id",
						context.mygov_manage_flusso_id);

				parentContextMap_tRunJob_2.put("cod_ipa_ente",
						context.cod_ipa_ente);

				parentContextMap_tRunJob_2.put("mygov_ente_prenotazione_id",
						context.mygov_ente_prenotazione_id);

				parentContextMap_tRunJob_2.put("is_ws", context.is_ws);

				parentContextMap_tRunJob_2.put(
						"indirizzo_operatore_richiedente",
						context.indirizzo_operatore_richiedente);

				parentContextMap_tRunJob_2.put("indirizzo_amministratore_ente",
						context.indirizzo_amministratore_ente);

				parentContextMap_tRunJob_2.put("is_user_java",
						context.is_user_java);

				parentContextMap_tRunJob_2.put("conn_db", context.conn_db);

				parentContextMap_tRunJob_2.put("conn_host", context.conn_host);

				parentContextMap_tRunJob_2.put("conn_port", context.conn_port);

				parentContextMap_tRunJob_2.put("conn_psw", context.conn_psw);

				parentContextMap_tRunJob_2.put("conn_schema",
						context.conn_schema);

				parentContextMap_tRunJob_2.put("conn_usr", context.conn_usr);

				parentContextMap_tRunJob_2.put("email_ambiente",
						context.email_ambiente);

				parentContextMap_tRunJob_2.put("email_amministratore",
						context.email_amministratore);

				parentContextMap_tRunJob_2.put("email_flag_attiva",
						context.email_flag_attiva);

				parentContextMap_tRunJob_2.put("email_indirizzo_gestore",
						context.email_indirizzo_gestore);

				parentContextMap_tRunJob_2.put("email_psw_gestore",
						context.email_psw_gestore);

				parentContextMap_tRunJob_2.put("email_sendername",
						context.email_sendername);

				parentContextMap_tRunJob_2.put("email_smptHost_gestore",
						context.email_smptHost_gestore);

				parentContextMap_tRunJob_2.put("email_smptPort_gestore",
						context.email_smptPort_gestore);

				parentContextMap_tRunJob_2.put("email_ssl_support",
						context.email_ssl_support);

				parentContextMap_tRunJob_2.put("email_usr_gestore",
						context.email_usr_gestore);

				parentContextMap_tRunJob_2.put("directory_root_enti",
						context.directory_root_enti);

				parentContextMap_tRunJob_2.put("directory_talend",
						context.directory_talend);

				parentContextMap_tRunJob_2.put("numero_minuti_avviso",
						context.numero_minuti_avviso);

				parentContextMap_tRunJob_2.put("numero_minuti_trigger_batch",
						context.numero_minuti_trigger_batch);

				parentContextMap_tRunJob_2.put("numero_ore_trigger_batch",
						context.numero_ore_trigger_batch);

				parentContextMap_tRunJob_2.put("url_mybox_sostituire_a",
						context.url_mybox_sostituire_a);

				parentContextMap_tRunJob_2.put("url_mybox_sostituire_da",
						context.url_mybox_sostituire_da);

				parentContextMap_tRunJob_2.put("nagios_codice_applicazione",
						context.nagios_codice_applicazione);

				parentContextMap_tRunJob_2.put("nagios_codice_servizio",
						context.nagios_codice_servizio);

				parentContextMap_tRunJob_2.put("nagios_flag_attiva",
						context.nagios_flag_attiva);

				parentContextMap_tRunJob_2.put("nagios_password",
						context.nagios_password);

				parentContextMap_tRunJob_2
						.put("nagios_url", context.nagios_url);

				parentContextMap_tRunJob_2.put("nagios_username",
						context.nagios_username);

				parentContextMap_tRunJob_2.put("endpoint", context.endpoint);

				Object obj_tRunJob_2 = null;

				obj_tRunJob_2 = "Resoconto Caricamento file: "
						+ context.de_nome_file;
				paraList_tRunJob_2.add("--context_param oggetto_mail="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("oggetto_mail", obj_tRunJob_2);

				obj_tRunJob_2 = "Il caricamento del file "
						+ context.de_nome_file + " è andato a buon fine.";
				paraList_tRunJob_2.add("--context_param testo_mail="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("testo_mail", obj_tRunJob_2);

				obj_tRunJob_2 = context.indirizzo_operatore_richiedente;
				paraList_tRunJob_2
						.add("--context_param indirizzo_operatore_richiedente="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put(
						"indirizzo_operatore_richiedente", obj_tRunJob_2);

				obj_tRunJob_2 = context.indirizzo_amministratore_ente;
				paraList_tRunJob_2
						.add("--context_param indirizzo_amministratore_ente="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("indirizzo_amministratore_ente",
						obj_tRunJob_2);

				obj_tRunJob_2 = "ENTE";
				paraList_tRunJob_2.add("--context_param tipo_invio="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
				parentContextMap_tRunJob_2.put("tipo_invio", obj_tRunJob_2);

				manage_flussi_export.inviamail_0_1.InviaMail childJob_tRunJob_2 = new manage_flussi_export.inviamail_0_1.InviaMail();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_2) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
							.entrySet()) {
						dataSources_tRunJob_2.put(
								talendDataSourceEntry_tRunJob_2.getKey(),
								talendDataSourceEntry_tRunJob_2.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_2.setDataSources(dataSources_tRunJob_2);
				}

				childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;

				String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
						.runJob((String[]) paraList_tRunJob_2
								.toArray(new String[paraList_tRunJob_2.size()]));

				errorCode = childJob_tRunJob_2.getErrorCode();

				if (childJob_tRunJob_2.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_2
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
							childJob_tRunJob_2.getErrorCode());
				}
				if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_2.getExceptionStackTrace());
				}

				tos_count_tRunJob_2++;

				/**
				 * [tRunJob_2 main ] stop
				 */

				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				tStatCatcher_1
						.addMessage(
								"end",
								"tRunJob_2",
								end_Hash.get("tRunJob_2")
										- start_Hash.get("tRunJob_2"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tRunJob_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_2 finally ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_3Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_3 begin ] start
				 */

				ok_Hash.put("tRunJob_3", false);
				start_Hash.put("tRunJob_3", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tRunJob_3");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tRunJob_3";

				int tos_count_tRunJob_3 = 0;

				/**
				 * [tRunJob_3 begin ] stop
				 */

				/**
				 * [tRunJob_3 main ] start
				 */

				currentComponent = "tRunJob_3";

				java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();

				paraList_tRunJob_3.add("--father_pid=" + pid);

				paraList_tRunJob_3.add("--root_pid=" + rootPid);

				paraList_tRunJob_3.add("--father_node=tRunJob_3");

				paraList_tRunJob_3.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_3.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_3.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_3 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_3 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_3".equals(tRunJobName_tRunJob_3)
						&& childResumePath_tRunJob_3 != null) {
					paraList_tRunJob_3
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_3.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_3");

				java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

				context.synchronizeContext();
				java.util.Enumeration<?> propertyNames_tRunJob_3 = context
						.propertyNames();
				while (propertyNames_tRunJob_3.hasMoreElements()) {
					String key_tRunJob_3 = (String) propertyNames_tRunJob_3
							.nextElement();
					Object value_tRunJob_3 = (Object) context
							.get(key_tRunJob_3);
					paraList_tRunJob_3.add("--context_param " + key_tRunJob_3
							+ "=" + value_tRunJob_3);
				}

				parentContextMap_tRunJob_3.put("de_nome_file",
						context.de_nome_file);

				parentContextMap_tRunJob_3.put("de_percorso_file",
						context.de_percorso_file);

				parentContextMap_tRunJob_3.put("mygov_manage_flusso_id",
						context.mygov_manage_flusso_id);

				parentContextMap_tRunJob_3.put("cod_ipa_ente",
						context.cod_ipa_ente);

				parentContextMap_tRunJob_3.put("mygov_ente_prenotazione_id",
						context.mygov_ente_prenotazione_id);

				parentContextMap_tRunJob_3.put("is_ws", context.is_ws);

				parentContextMap_tRunJob_3.put(
						"indirizzo_operatore_richiedente",
						context.indirizzo_operatore_richiedente);

				parentContextMap_tRunJob_3.put("indirizzo_amministratore_ente",
						context.indirizzo_amministratore_ente);

				parentContextMap_tRunJob_3.put("is_user_java",
						context.is_user_java);

				parentContextMap_tRunJob_3.put("conn_db", context.conn_db);

				parentContextMap_tRunJob_3.put("conn_host", context.conn_host);

				parentContextMap_tRunJob_3.put("conn_port", context.conn_port);

				parentContextMap_tRunJob_3.put("conn_psw", context.conn_psw);

				parentContextMap_tRunJob_3.put("conn_schema",
						context.conn_schema);

				parentContextMap_tRunJob_3.put("conn_usr", context.conn_usr);

				parentContextMap_tRunJob_3.put("email_ambiente",
						context.email_ambiente);

				parentContextMap_tRunJob_3.put("email_amministratore",
						context.email_amministratore);

				parentContextMap_tRunJob_3.put("email_flag_attiva",
						context.email_flag_attiva);

				parentContextMap_tRunJob_3.put("email_indirizzo_gestore",
						context.email_indirizzo_gestore);

				parentContextMap_tRunJob_3.put("email_psw_gestore",
						context.email_psw_gestore);

				parentContextMap_tRunJob_3.put("email_sendername",
						context.email_sendername);

				parentContextMap_tRunJob_3.put("email_smptHost_gestore",
						context.email_smptHost_gestore);

				parentContextMap_tRunJob_3.put("email_smptPort_gestore",
						context.email_smptPort_gestore);

				parentContextMap_tRunJob_3.put("email_ssl_support",
						context.email_ssl_support);

				parentContextMap_tRunJob_3.put("email_usr_gestore",
						context.email_usr_gestore);

				parentContextMap_tRunJob_3.put("directory_root_enti",
						context.directory_root_enti);

				parentContextMap_tRunJob_3.put("directory_talend",
						context.directory_talend);

				parentContextMap_tRunJob_3.put("numero_minuti_avviso",
						context.numero_minuti_avviso);

				parentContextMap_tRunJob_3.put("numero_minuti_trigger_batch",
						context.numero_minuti_trigger_batch);

				parentContextMap_tRunJob_3.put("numero_ore_trigger_batch",
						context.numero_ore_trigger_batch);

				parentContextMap_tRunJob_3.put("url_mybox_sostituire_a",
						context.url_mybox_sostituire_a);

				parentContextMap_tRunJob_3.put("url_mybox_sostituire_da",
						context.url_mybox_sostituire_da);

				parentContextMap_tRunJob_3.put("nagios_codice_applicazione",
						context.nagios_codice_applicazione);

				parentContextMap_tRunJob_3.put("nagios_codice_servizio",
						context.nagios_codice_servizio);

				parentContextMap_tRunJob_3.put("nagios_flag_attiva",
						context.nagios_flag_attiva);

				parentContextMap_tRunJob_3.put("nagios_password",
						context.nagios_password);

				parentContextMap_tRunJob_3
						.put("nagios_url", context.nagios_url);

				parentContextMap_tRunJob_3.put("nagios_username",
						context.nagios_username);

				parentContextMap_tRunJob_3.put("endpoint", context.endpoint);

				Object obj_tRunJob_3 = null;

				obj_tRunJob_3 = "Resoconto Caricamento file: "
						+ context.de_nome_file;
				paraList_tRunJob_3.add("--context_param oggetto_mail="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("oggetto_mail", obj_tRunJob_3);

				obj_tRunJob_3 = "Il caricamento del file "
						+ context.de_nome_file
						+ " non è andato a buon fine. Si consiglia di riprovare o di contattare l'assistenza.";
				paraList_tRunJob_3.add("--context_param testo_mail="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("testo_mail", obj_tRunJob_3);

				obj_tRunJob_3 = context.indirizzo_operatore_richiedente;
				paraList_tRunJob_3
						.add("--context_param indirizzo_operatore_richiedente="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put(
						"indirizzo_operatore_richiedente", obj_tRunJob_3);

				obj_tRunJob_3 = context.indirizzo_amministratore_ente;
				paraList_tRunJob_3
						.add("--context_param indirizzo_amministratore_ente="
								+ RuntimeUtils
										.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("indirizzo_amministratore_ente",
						obj_tRunJob_3);

				obj_tRunJob_3 = "ENTE";
				paraList_tRunJob_3.add("--context_param tipo_invio="
						+ RuntimeUtils.tRunJobConvertContext(obj_tRunJob_3));
				parentContextMap_tRunJob_3.put("tipo_invio", obj_tRunJob_3);

				manage_flussi_export.inviamail_0_1.InviaMail childJob_tRunJob_3 = new manage_flussi_export.inviamail_0_1.InviaMail();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_3) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
							.entrySet()) {
						dataSources_tRunJob_3.put(
								talendDataSourceEntry_tRunJob_3.getKey(),
								talendDataSourceEntry_tRunJob_3.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_3.setDataSources(dataSources_tRunJob_3);
				}

				childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;

				String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
						.runJob((String[]) paraList_tRunJob_3
								.toArray(new String[paraList_tRunJob_3.size()]));

				errorCode = childJob_tRunJob_3.getErrorCode();

				if (childJob_tRunJob_3.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_3
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_3_CHILD_RETURN_CODE",
							childJob_tRunJob_3.getErrorCode());
				}
				if (childJob_tRunJob_3.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_3.getExceptionStackTrace());
				}

				tos_count_tRunJob_3++;

				/**
				 * [tRunJob_3 main ] stop
				 */

				/**
				 * [tRunJob_3 end ] start
				 */

				currentComponent = "tRunJob_3";

				ok_Hash.put("tRunJob_3", true);
				end_Hash.put("tRunJob_3", System.currentTimeMillis());

				tStatCatcher_1
						.addMessage(
								"end",
								"tRunJob_3",
								end_Hash.get("tRunJob_3")
										- start_Hash.get("tRunJob_3"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tRunJob_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_3 finally ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_3_SUBPROCESS_STATE", 1);
	}

	public static class LOG_JOBStruct implements
			routines.system.IPersistableRow<LOG_JOBStruct> {
		final static byte[] commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];
		static byte[] commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length) {
					if (length < 1024
							&& commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1.length == 0) {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[1024];
					} else {
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1 = new byte[2 * length];
					}
				}
				dis.readFully(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length);
				strReturn = new String(
						commonByteArray_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MANAGE_FLUSSI_EXPORT_Load_Flussi_1_1) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(LOG_JOBStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				LOG_JOBStruct LOG_JOB = new LOG_JOBStruct();

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				tStatCatcher_1.addMessage("begin", "tRunJob_1");
				tStatCatcher_1Process(globalMap);

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					LOG_JOB.type = lcm.getType();
					LOG_JOB.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					LOG_JOB.priority = lcm.getPriority();
					LOG_JOB.message = lcm.getMessage();
					LOG_JOB.code = lcm.getCode();

					LOG_JOB.moment = java.util.Calendar.getInstance().getTime();

					LOG_JOB.pid = pid;
					LOG_JOB.root_pid = rootPid;
					LOG_JOB.father_pid = fatherPid;

					LOG_JOB.project = projectName;
					LOG_JOB.job = jobName;
					LOG_JOB.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */

					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tRunJob_1 main ] start
					 */

					currentComponent = "tRunJob_1";

					java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

					paraList_tRunJob_1.add("--father_pid=" + pid);

					paraList_tRunJob_1.add("--root_pid=" + rootPid);

					paraList_tRunJob_1.add("--father_node=tRunJob_1");

					paraList_tRunJob_1.add("--context=Default");

					// for feature:10589

					paraList_tRunJob_1.add("--stat_port=" + portStats);

					if (resuming_logs_dir_path != null) {
						paraList_tRunJob_1.add("--resuming_logs_dir_path="
								+ resuming_logs_dir_path);
					}
					String childResumePath_tRunJob_1 = ResumeUtil
							.getChildJobCheckPointPath(resuming_checkpoint_path);
					String tRunJobName_tRunJob_1 = ResumeUtil
							.getRighttRunJob(resuming_checkpoint_path);
					if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
							&& childResumePath_tRunJob_1 != null) {
						paraList_tRunJob_1
								.add("--resuming_checkpoint_path="
										+ ResumeUtil
												.getChildJobCheckPointPath(resuming_checkpoint_path));
					}
					paraList_tRunJob_1.add("--parent_part_launcher=JOB:"
							+ jobName + "/NODE:tRunJob_1");

					java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

					context.synchronizeContext();
					java.util.Enumeration<?> propertyNames_tRunJob_1 = context
							.propertyNames();
					while (propertyNames_tRunJob_1.hasMoreElements()) {
						String key_tRunJob_1 = (String) propertyNames_tRunJob_1
								.nextElement();
						Object value_tRunJob_1 = (Object) context
								.get(key_tRunJob_1);
						paraList_tRunJob_1.add("--context_param "
								+ key_tRunJob_1 + "=" + value_tRunJob_1);
					}

					parentContextMap_tRunJob_1.put("de_nome_file",
							context.de_nome_file);

					parentContextMap_tRunJob_1.put("de_percorso_file",
							context.de_percorso_file);

					parentContextMap_tRunJob_1.put("mygov_manage_flusso_id",
							context.mygov_manage_flusso_id);

					parentContextMap_tRunJob_1.put("cod_ipa_ente",
							context.cod_ipa_ente);

					parentContextMap_tRunJob_1.put(
							"mygov_ente_prenotazione_id",
							context.mygov_ente_prenotazione_id);

					parentContextMap_tRunJob_1.put("is_ws", context.is_ws);

					parentContextMap_tRunJob_1.put(
							"indirizzo_operatore_richiedente",
							context.indirizzo_operatore_richiedente);

					parentContextMap_tRunJob_1.put(
							"indirizzo_amministratore_ente",
							context.indirizzo_amministratore_ente);

					parentContextMap_tRunJob_1.put("is_user_java",
							context.is_user_java);

					parentContextMap_tRunJob_1.put("conn_db", context.conn_db);

					parentContextMap_tRunJob_1.put("conn_host",
							context.conn_host);

					parentContextMap_tRunJob_1.put("conn_port",
							context.conn_port);

					parentContextMap_tRunJob_1
							.put("conn_psw", context.conn_psw);

					parentContextMap_tRunJob_1.put("conn_schema",
							context.conn_schema);

					parentContextMap_tRunJob_1
							.put("conn_usr", context.conn_usr);

					parentContextMap_tRunJob_1.put("email_ambiente",
							context.email_ambiente);

					parentContextMap_tRunJob_1.put("email_amministratore",
							context.email_amministratore);

					parentContextMap_tRunJob_1.put("email_flag_attiva",
							context.email_flag_attiva);

					parentContextMap_tRunJob_1.put("email_indirizzo_gestore",
							context.email_indirizzo_gestore);

					parentContextMap_tRunJob_1.put("email_psw_gestore",
							context.email_psw_gestore);

					parentContextMap_tRunJob_1.put("email_sendername",
							context.email_sendername);

					parentContextMap_tRunJob_1.put("email_smptHost_gestore",
							context.email_smptHost_gestore);

					parentContextMap_tRunJob_1.put("email_smptPort_gestore",
							context.email_smptPort_gestore);

					parentContextMap_tRunJob_1.put("email_ssl_support",
							context.email_ssl_support);

					parentContextMap_tRunJob_1.put("email_usr_gestore",
							context.email_usr_gestore);

					parentContextMap_tRunJob_1.put("directory_root_enti",
							context.directory_root_enti);

					parentContextMap_tRunJob_1.put("directory_talend",
							context.directory_talend);

					parentContextMap_tRunJob_1.put("numero_minuti_avviso",
							context.numero_minuti_avviso);

					parentContextMap_tRunJob_1.put(
							"numero_minuti_trigger_batch",
							context.numero_minuti_trigger_batch);

					parentContextMap_tRunJob_1.put("numero_ore_trigger_batch",
							context.numero_ore_trigger_batch);

					parentContextMap_tRunJob_1.put("url_mybox_sostituire_a",
							context.url_mybox_sostituire_a);

					parentContextMap_tRunJob_1.put("url_mybox_sostituire_da",
							context.url_mybox_sostituire_da);

					parentContextMap_tRunJob_1.put(
							"nagios_codice_applicazione",
							context.nagios_codice_applicazione);

					parentContextMap_tRunJob_1.put("nagios_codice_servizio",
							context.nagios_codice_servizio);

					parentContextMap_tRunJob_1.put("nagios_flag_attiva",
							context.nagios_flag_attiva);

					parentContextMap_tRunJob_1.put("nagios_password",
							context.nagios_password);

					parentContextMap_tRunJob_1.put("nagios_url",
							context.nagios_url);

					parentContextMap_tRunJob_1.put("nagios_username",
							context.nagios_username);

					parentContextMap_tRunJob_1
							.put("endpoint", context.endpoint);

					Object obj_tRunJob_1 = null;

					obj_tRunJob_1 = "2";
					paraList_tRunJob_1
							.add("--context_param codice="
									+ RuntimeUtils
											.tRunJobConvertContext(obj_tRunJob_1));
					parentContextMap_tRunJob_1.put("codice", obj_tRunJob_1);

					obj_tRunJob_1 = LOG_JOB.message;
					paraList_tRunJob_1
							.add("--context_param descrizione="
									+ RuntimeUtils
											.tRunJobConvertContext(obj_tRunJob_1));
					parentContextMap_tRunJob_1
							.put("descrizione", obj_tRunJob_1);

					obj_tRunJob_1 = this.getException();
					paraList_tRunJob_1
							.add("--context_param exception="
									+ RuntimeUtils
											.tRunJobConvertContext(obj_tRunJob_1));
					parentContextMap_tRunJob_1.put("exception", obj_tRunJob_1);

					manage_flussi_export.manage_log_0_1.Manage_Log childJob_tRunJob_1 = new manage_flussi_export.manage_log_0_1.Manage_Log();
					// pass DataSources
					java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (null != talendDataSources_tRunJob_1) {
						java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
						for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
								.entrySet()) {
							dataSources_tRunJob_1.put(
									talendDataSourceEntry_tRunJob_1.getKey(),
									talendDataSourceEntry_tRunJob_1.getValue()
											.getRawDataSource());
						}
						childJob_tRunJob_1
								.setDataSources(dataSources_tRunJob_1);
					}

					childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

					String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
							.runJob((String[]) paraList_tRunJob_1
									.toArray(new String[paraList_tRunJob_1
											.size()]));

					errorCode = childJob_tRunJob_1.getErrorCode();

					if (childJob_tRunJob_1.getErrorCode() == null) {
						globalMap.put(
								"tRunJob_1_CHILD_RETURN_CODE",
								childJob_tRunJob_1.getStatus() != null
										&& ("failure")
												.equals(childJob_tRunJob_1
														.getStatus()) ? 1 : 0);
					} else {
						globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
								childJob_tRunJob_1.getErrorCode());
					}
					if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
						globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
								childJob_tRunJob_1.getExceptionStackTrace());
					}

					tos_count_tRunJob_1++;

					/**
					 * [tRunJob_1 main ] stop
					 */

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				tJava_6Process(globalMap);

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				tStatCatcher_1
						.addMessage(
								"end",
								"tRunJob_1",
								end_Hash.get("tRunJob_1")
										- start_Hash.get("tRunJob_1"));
				tStatCatcher_1Process(globalMap);

				/**
				 * [tRunJob_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());

				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				globalMap.put("errorLoadFlussi", true);

				/**
				 * [tJava_6 begin ] stop
				 */

				/**
				 * [tJava_6 main ] start
				 */

				currentComponent = "tJava_6";

				tos_count_tJava_6++;

				/**
				 * [tJava_6 main ] stop
				 */

				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				/**
				 * [tJava_6 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_6 finally ] start
				 */

				currentComponent = "tJava_6";

				/**
				 * [tJava_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Load_Flussi_1_1 Load_Flussi_1_1Class = new Load_Flussi_1_1();

		int exitCode = Load_Flussi_1_1Class.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Load_Flussi_1_1.class
					.getClassLoader().getResourceAsStream(
							"manage_flussi_export/load_flussi_1_1_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.de_nome_file = (String) context.getProperty("de_nome_file");
			context.de_percorso_file = (String) context
					.getProperty("de_percorso_file");
			try {
				context.mygov_manage_flusso_id = routines.system.ParserUtils
						.parseTo_Long(context
								.getProperty("mygov_manage_flusso_id"));
			} catch (NumberFormatException e) {
				context.mygov_manage_flusso_id = null;
			}
			context.cod_ipa_ente = (String) context.getProperty("cod_ipa_ente");
			try {
				context.mygov_ente_prenotazione_id = routines.system.ParserUtils
						.parseTo_Long(context
								.getProperty("mygov_ente_prenotazione_id"));
			} catch (NumberFormatException e) {
				context.mygov_ente_prenotazione_id = null;
			}
			try {
				context.is_ws = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("is_ws"));
			} catch (NumberFormatException e) {
				context.is_ws = null;
			}
			context.indirizzo_operatore_richiedente = (String) context
					.getProperty("indirizzo_operatore_richiedente");
			context.indirizzo_amministratore_ente = (String) context
					.getProperty("indirizzo_amministratore_ente");
			try {
				context.is_user_java = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("is_user_java"));
			} catch (NumberFormatException e) {
				context.is_user_java = null;
			}
			context.conn_db = (String) context.getProperty("conn_db");
			context.conn_host = (String) context.getProperty("conn_host");
			context.conn_port = (String) context.getProperty("conn_port");
			context.conn_psw = (String) context.getProperty("conn_psw");
			context.conn_schema = (String) context.getProperty("conn_schema");
			context.conn_usr = (String) context.getProperty("conn_usr");
			context.email_ambiente = (String) context
					.getProperty("email_ambiente");
			context.email_amministratore = (String) context
					.getProperty("email_amministratore");
			try {
				context.email_flag_attiva = routines.system.ParserUtils
						.parseTo_Boolean(context
								.getProperty("email_flag_attiva"));
			} catch (NumberFormatException e) {
				context.email_flag_attiva = null;
			}
			context.email_indirizzo_gestore = (String) context
					.getProperty("email_indirizzo_gestore");
			context.email_psw_gestore = (String) context
					.getProperty("email_psw_gestore");
			context.email_sendername = (String) context
					.getProperty("email_sendername");
			context.email_smptHost_gestore = (String) context
					.getProperty("email_smptHost_gestore");
			context.email_smptPort_gestore = (String) context
					.getProperty("email_smptPort_gestore");
			try {
				context.email_ssl_support = routines.system.ParserUtils
						.parseTo_Boolean(context
								.getProperty("email_ssl_support"));
			} catch (NumberFormatException e) {
				context.email_ssl_support = null;
			}
			context.email_usr_gestore = (String) context
					.getProperty("email_usr_gestore");
			context.directory_root_enti = (String) context
					.getProperty("directory_root_enti");
			context.directory_talend = (String) context
					.getProperty("directory_talend");
			try {
				context.numero_minuti_avviso = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("numero_minuti_avviso"));
			} catch (NumberFormatException e) {
				context.numero_minuti_avviso = null;
			}
			try {
				context.numero_minuti_trigger_batch = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("numero_minuti_trigger_batch"));
			} catch (NumberFormatException e) {
				context.numero_minuti_trigger_batch = null;
			}
			try {
				context.numero_ore_trigger_batch = routines.system.ParserUtils
						.parseTo_Integer(context
								.getProperty("numero_ore_trigger_batch"));
			} catch (NumberFormatException e) {
				context.numero_ore_trigger_batch = null;
			}
			context.url_mybox_sostituire_a = (String) context
					.getProperty("url_mybox_sostituire_a");
			context.url_mybox_sostituire_da = (String) context
					.getProperty("url_mybox_sostituire_da");
			context.nagios_codice_applicazione = (String) context
					.getProperty("nagios_codice_applicazione");
			context.nagios_codice_servizio = (String) context
					.getProperty("nagios_codice_servizio");
			try {
				context.nagios_flag_attiva = routines.system.ParserUtils
						.parseTo_Boolean(context
								.getProperty("nagios_flag_attiva"));
			} catch (NumberFormatException e) {
				context.nagios_flag_attiva = null;
			}
			context.nagios_password = (String) context
					.getProperty("nagios_password");
			context.nagios_url = (String) context.getProperty("nagios_url");
			context.nagios_username = (String) context
					.getProperty("nagios_username");
			context.endpoint = (String) context.getProperty("endpoint");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("de_nome_file")) {
				context.de_nome_file = (String) parentContextMap
						.get("de_nome_file");
			}
			if (parentContextMap.containsKey("de_percorso_file")) {
				context.de_percorso_file = (String) parentContextMap
						.get("de_percorso_file");
			}
			if (parentContextMap.containsKey("mygov_manage_flusso_id")) {
				context.mygov_manage_flusso_id = (Long) parentContextMap
						.get("mygov_manage_flusso_id");
			}
			if (parentContextMap.containsKey("cod_ipa_ente")) {
				context.cod_ipa_ente = (String) parentContextMap
						.get("cod_ipa_ente");
			}
			if (parentContextMap.containsKey("mygov_ente_prenotazione_id")) {
				context.mygov_ente_prenotazione_id = (Long) parentContextMap
						.get("mygov_ente_prenotazione_id");
			}
			if (parentContextMap.containsKey("is_ws")) {
				context.is_ws = (Boolean) parentContextMap.get("is_ws");
			}
			if (parentContextMap.containsKey("indirizzo_operatore_richiedente")) {
				context.indirizzo_operatore_richiedente = (String) parentContextMap
						.get("indirizzo_operatore_richiedente");
			}
			if (parentContextMap.containsKey("indirizzo_amministratore_ente")) {
				context.indirizzo_amministratore_ente = (String) parentContextMap
						.get("indirizzo_amministratore_ente");
			}
			if (parentContextMap.containsKey("is_user_java")) {
				context.is_user_java = (Boolean) parentContextMap
						.get("is_user_java");
			}
			if (parentContextMap.containsKey("conn_db")) {
				context.conn_db = (String) parentContextMap.get("conn_db");
			}
			if (parentContextMap.containsKey("conn_host")) {
				context.conn_host = (String) parentContextMap.get("conn_host");
			}
			if (parentContextMap.containsKey("conn_port")) {
				context.conn_port = (String) parentContextMap.get("conn_port");
			}
			if (parentContextMap.containsKey("conn_psw")) {
				context.conn_psw = (String) parentContextMap.get("conn_psw");
			}
			if (parentContextMap.containsKey("conn_schema")) {
				context.conn_schema = (String) parentContextMap
						.get("conn_schema");
			}
			if (parentContextMap.containsKey("conn_usr")) {
				context.conn_usr = (String) parentContextMap.get("conn_usr");
			}
			if (parentContextMap.containsKey("email_ambiente")) {
				context.email_ambiente = (String) parentContextMap
						.get("email_ambiente");
			}
			if (parentContextMap.containsKey("email_amministratore")) {
				context.email_amministratore = (String) parentContextMap
						.get("email_amministratore");
			}
			if (parentContextMap.containsKey("email_flag_attiva")) {
				context.email_flag_attiva = (Boolean) parentContextMap
						.get("email_flag_attiva");
			}
			if (parentContextMap.containsKey("email_indirizzo_gestore")) {
				context.email_indirizzo_gestore = (String) parentContextMap
						.get("email_indirizzo_gestore");
			}
			if (parentContextMap.containsKey("email_psw_gestore")) {
				context.email_psw_gestore = (String) parentContextMap
						.get("email_psw_gestore");
			}
			if (parentContextMap.containsKey("email_sendername")) {
				context.email_sendername = (String) parentContextMap
						.get("email_sendername");
			}
			if (parentContextMap.containsKey("email_smptHost_gestore")) {
				context.email_smptHost_gestore = (String) parentContextMap
						.get("email_smptHost_gestore");
			}
			if (parentContextMap.containsKey("email_smptPort_gestore")) {
				context.email_smptPort_gestore = (String) parentContextMap
						.get("email_smptPort_gestore");
			}
			if (parentContextMap.containsKey("email_ssl_support")) {
				context.email_ssl_support = (Boolean) parentContextMap
						.get("email_ssl_support");
			}
			if (parentContextMap.containsKey("email_usr_gestore")) {
				context.email_usr_gestore = (String) parentContextMap
						.get("email_usr_gestore");
			}
			if (parentContextMap.containsKey("directory_root_enti")) {
				context.directory_root_enti = (String) parentContextMap
						.get("directory_root_enti");
			}
			if (parentContextMap.containsKey("directory_talend")) {
				context.directory_talend = (String) parentContextMap
						.get("directory_talend");
			}
			if (parentContextMap.containsKey("numero_minuti_avviso")) {
				context.numero_minuti_avviso = (Integer) parentContextMap
						.get("numero_minuti_avviso");
			}
			if (parentContextMap.containsKey("numero_minuti_trigger_batch")) {
				context.numero_minuti_trigger_batch = (Integer) parentContextMap
						.get("numero_minuti_trigger_batch");
			}
			if (parentContextMap.containsKey("numero_ore_trigger_batch")) {
				context.numero_ore_trigger_batch = (Integer) parentContextMap
						.get("numero_ore_trigger_batch");
			}
			if (parentContextMap.containsKey("url_mybox_sostituire_a")) {
				context.url_mybox_sostituire_a = (String) parentContextMap
						.get("url_mybox_sostituire_a");
			}
			if (parentContextMap.containsKey("url_mybox_sostituire_da")) {
				context.url_mybox_sostituire_da = (String) parentContextMap
						.get("url_mybox_sostituire_da");
			}
			if (parentContextMap.containsKey("nagios_codice_applicazione")) {
				context.nagios_codice_applicazione = (String) parentContextMap
						.get("nagios_codice_applicazione");
			}
			if (parentContextMap.containsKey("nagios_codice_servizio")) {
				context.nagios_codice_servizio = (String) parentContextMap
						.get("nagios_codice_servizio");
			}
			if (parentContextMap.containsKey("nagios_flag_attiva")) {
				context.nagios_flag_attiva = (Boolean) parentContextMap
						.get("nagios_flag_attiva");
			}
			if (parentContextMap.containsKey("nagios_password")) {
				context.nagios_password = (String) parentContextMap
						.get("nagios_password");
			}
			if (parentContextMap.containsKey("nagios_url")) {
				context.nagios_url = (String) parentContextMap
						.get("nagios_url");
			}
			if (parentContextMap.containsKey("nagios_username")) {
				context.nagios_username = (String) parentContextMap
						.get("nagios_username");
			}
			if (parentContextMap.containsKey("endpoint")) {
				context.endpoint = (String) parentContextMap.get("endpoint");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();
		tStatCatcher_1.addMessage("begin");

		this.globalResumeTicket = true;// to run tPreJob

		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tJava_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_1) {
			globalMap.put("tJava_1_SUBPROCESS_STATE", -1);

			e_tJava_1.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_2) {
			globalMap.put("tJava_2_SUBPROCESS_STATE", -1);

			e_tJava_2.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_3) {
			globalMap.put("tJava_3_SUBPROCESS_STATE", -1);

			e_tJava_3.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_4) {
			globalMap.put("tJava_4_SUBPROCESS_STATE", -1);

			e_tJava_4.printStackTrace();

		}
		try {
			errorCode = null;
			tJava_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tJava_5) {
			globalMap.put("tJava_5_SUBPROCESS_STATE", -1);

			e_tJava_5.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Load_Flussi_1_1");
		}
		tStatCatcher_1.addMessage(status == "" ? "end" : status,
				(end - startTime));
		try {
			tStatCatcher_1Process(globalMap);
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tPostgresqlConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tPostgresqlConnection_1",
				globalMap.get("conn_tPostgresqlConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 487054 characters generated by Talend Open Studio for Data Integration on the
 * 10 marzo 2020 14.54.17 CET
 ************************************************************************************************/
